{
  "swagger": "2.0",
  "info": {
    "version": "2016-03-01",
    "title": "Domains API Client"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Check if a domain is available for registration.",
        "description": "Check if a domain is available for registration.",
        "operationId": "Domains_CheckAvailability",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "identifier",
            "in": "body",
            "description": "Name of the domain.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NameIdentifier"
            }
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainAvailablilityCheckResult"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Get all domains in a subscription.",
        "description": "Get all domains in a subscription.",
        "operationId": "Domains_List",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Generate a single sign-on request for the domain management portal.",
        "description": "Generate a single sign-on request for the domain management portal.",
        "operationId": "Domains_GetControlCenterSsoRequest",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainControlCenterSsoRequest"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations": {
      "post": {
        "tags": [
          "Domains"
        ],
        "summary": "Get domain name recommendations based on keywords.",
        "description": "Get domain name recommendations based on keywords.",
        "operationId": "Domains_ListRecommendations",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "description": "Search parameters for domain name recommendations.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainRecommendationSearchParameters"
            }
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NameIdentifierCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Get all domains in a resource group.",
        "description": "Get all domains in a resource group.",
        "operationId": "Domains_ListByResourceGroup",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Get a domain.",
        "description": "Get a domain.",
        "operationId": "Domains_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Domains"
        ],
        "summary": "Create a domain.",
        "description": "Create a domain.",
        "operationId": "Domains_CreateOrUpdate",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domain",
            "in": "body",
            "description": "Domain registration information.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Domain purchase is in progress.",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          "200": {
            "description": "Domain purchase was successful.",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          }
        },
        "x-ms-long-running-operation": true
      },
      "delete": {
        "tags": [
          "Domains"
        ],
        "summary": "Delete a domain.",
        "description": "Delete a domain.",
        "operationId": "Domains_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "type": "string"
          },
          {
            "name": "forceHardDeleteDomain",
            "in": "query",
            "description": "Specify <code>true</code> to delete the domain immediately. The default is <code>false</code> which deletes the domain after 24 hours.",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully deleted domain."
          },
          "204": {
            "description": "Domain does not exist in Azure database probably because it has already been deleted"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Lists domain ownership identifiers.",
        "description": "Lists domain ownership identifiers.",
        "operationId": "Domains_ListOwnershipIdentifiers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of domain.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainOwnershipIdentifierCollection"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Get ownership identifier for domain",
        "description": "Get ownership identifier for domain",
        "operationId": "Domains_GetOwnershipIdentifier",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of domain.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of identifier.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainOwnershipIdentifier"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Domains"
        ],
        "summary": "Creates an ownership identifier for a domain or updates identifier details for an existing identifer",
        "description": "Creates an ownership identifier for a domain or updates identifier details for an existing identifer",
        "operationId": "Domains_CreateOrUpdateOwnershipIdentifier",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of domain.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainOwnershipIdentifier",
            "in": "body",
            "description": "A JSON representation of the domain ownership properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainOwnershipIdentifier"
            }
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainOwnershipIdentifier"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Domains"
        ],
        "summary": "Delete ownership identifier for domain",
        "description": "Delete ownership identifier for domain",
        "operationId": "Domains_DeleteOwnershipIdentifier",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of domain.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of identifier.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfully deleted domain ownership identifier."
          },
          "204": {
            "description": "Domain ownership identifider does not exist."
          }
        }
      },
      "patch": {
        "tags": [
          "Domains"
        ],
        "summary": "Creates an ownership identifier for a domain or updates identifier details for an existing identifer",
        "description": "Creates an ownership identifier for a domain or updates identifier details for an existing identifer",
        "operationId": "Domains_UpdateOwnershipIdentifier",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of domain.",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "domainOwnershipIdentifier",
            "in": "body",
            "description": "A JSON representation of the domain ownership properties.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DomainOwnershipIdentifier"
            }
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DomainOwnershipIdentifier"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/operationresults/{operationId}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "summary": "Get the status of a domain purchase operation.",
        "description": "Get the status of a domain purchase operation.",
        "operationId": "Domains_GetOperation",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "domainName",
            "in": "path",
            "description": "Name of the domain.",
            "required": true,
            "type": "string"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "ID of the domain purchase operation.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/subscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/resourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/apiVersionParameter"
          }
        ],
        "responses": {
          "202": {
            "description": "Domain purchase is in progress.",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          "200": {
            "description": "Domain purchase was successful.",
            "schema": {
              "$ref": "#/definitions/Domain"
            }
          },
          "500": {
            "description": "Domain purchase request failed."
          }
        }
      }
    }
  },
  "definitions": {
    "Address": {
      "description": "Address information for domain registration.",
      "type": "object",
      "properties": {
        "address1": {
          "description": "Address 1.",
          "type": "string"
        },
        "address2": {
          "description": "Address 2.",
          "type": "string"
        },
        "city": {
          "description": "City.",
          "type": "string"
        },
        "country": {
          "description": "Country.",
          "type": "string"
        },
        "postalCode": {
          "description": "Postal code.",
          "type": "string"
        },
        "state": {
          "description": "State.",
          "type": "string"
        }
      }
    },
    "ApiDefinitionInfo": {
      "description": "Information about the formal API definition for the app.",
      "type": "object",
      "properties": {
        "url": {
          "description": "The URL of the API definition.",
          "type": "string"
        }
      }
    },
    "AppServiceCertificate": {
      "description": "Key Vault container for a certificate that is purchased through Azure.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "keyVaultId": {
              "description": "Key Vault Csm resource Id.",
              "type": "string"
            },
            "keyVaultSecretName": {
              "description": "Key Vault secret name.",
              "type": "string"
            },
            "provisioningState": {
              "description": "Status of the Key Vault secret.",
              "enum": [
                "Initialized",
                "WaitingOnCertificateOrder",
                "Succeeded",
                "CertificateOrderFailed",
                "OperationNotPermittedOnKeyVault",
                "AzureServiceUnauthorizedToAccessKeyVault",
                "KeyVaultDoesNotExist",
                "KeyVaultSecretDoesNotExist",
                "UnknownError",
                "ExternalPrivateKey",
                "Unknown"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "KeyVaultSecretStatus",
                "modelAsString": false
              }
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "AppServiceCertificateOrder": {
      "description": "SSL certificate purchase order.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "required": [
            "productType"
          ],
          "properties": {
            "certificates": {
              "description": "State of the Key Vault secret.",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/AppServiceCertificate"
              }
            },
            "distinguishedName": {
              "description": "Certificate distinguished name.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "domainVerificationToken": {
              "description": "Domain verification token.",
              "type": "string",
              "readOnly": true
            },
            "validityInYears": {
              "format": "int32",
              "description": "Duration in years (must be between 1 and 3).",
              "default": 1,
              "type": "integer",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "keySize": {
              "format": "int32",
              "description": "Certificate key size.",
              "default": 2048,
              "type": "integer",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "productType": {
              "description": "Certificate product type.",
              "enum": [
                "StandardDomainValidatedSsl",
                "StandardDomainValidatedWildCardSsl"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "CertificateProductType",
                "modelAsString": false
              },
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "autoRenew": {
              "description": "<code>true</code> if the certificate should be automatically renewed when it expires; otherwise, <code>false</code>.",
              "default": true,
              "type": "boolean"
            },
            "provisioningState": {
              "description": "Status of certificate order.",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "InProgress",
                "Deleting"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": false
              }
            },
            "status": {
              "description": "Current order status.",
              "enum": [
                "Pendingissuance",
                "Issued",
                "Revoked",
                "Canceled",
                "Denied",
                "Pendingrevocation",
                "PendingRekey",
                "Unused",
                "Expired",
                "NotSubmitted"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "CertificateOrderStatus",
                "modelAsString": false
              }
            },
            "signedCertificate": {
              "$ref": "#/definitions/CertificateDetails",
              "description": "Signed certificate.",
              "readOnly": true
            },
            "csr": {
              "description": "Last CSR that was created for this order.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "intermediate": {
              "$ref": "#/definitions/CertificateDetails",
              "description": "Intermediate certificate.",
              "readOnly": true
            },
            "root": {
              "$ref": "#/definitions/CertificateDetails",
              "description": "Root certificate.",
              "readOnly": true
            },
            "serialNumber": {
              "description": "Current serial number of the certificate.",
              "type": "string",
              "readOnly": true
            },
            "lastCertificateIssuanceTime": {
              "format": "date-time",
              "description": "Certificate last issuance time.",
              "type": "string",
              "readOnly": true
            },
            "expirationTime": {
              "format": "date-time",
              "description": "Certificate expiration time.",
              "type": "string",
              "readOnly": true
            },
            "isPrivateKeyExternal": {
              "description": "<code>true</code> if private key is external; otherwise, <code>false</code>.",
              "type": "boolean"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "AppServiceEnvironment": {
      "description": "Description of an App Service Environment.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "required": [
            "name",
            "location",
            "virtualNetwork",
            "workerPools"
          ],
          "properties": {
            "name": {
              "description": "Name of the App Service Environment.",
              "type": "string"
            },
            "location": {
              "description": "Location of the App Service Environment, e.g. \"West US\".",
              "type": "string"
            },
            "provisioningState": {
              "description": "Provisioning state of the App Service Environment.",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "InProgress",
                "Deleting"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": false
              }
            },
            "status": {
              "description": "Current status of the App Service Environment.",
              "enum": [
                "Preparing",
                "Ready",
                "Scaling",
                "Deleting"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "HostingEnvironmentStatus",
                "modelAsString": false
              }
            },
            "vnetName": {
              "description": "Name of the Virtual Network for the App Service Environment.",
              "type": "string"
            },
            "vnetResourceGroupName": {
              "description": "Resource group of the Virtual Network.",
              "type": "string"
            },
            "vnetSubnetName": {
              "description": "Subnet of the Virtual Network.",
              "type": "string"
            },
            "virtualNetwork": {
              "$ref": "#/definitions/VirtualNetworkProfile",
              "description": "Description of the Virtual Network."
            },
            "internalLoadBalancingMode": {
              "description": "Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.",
              "enum": [
                "None",
                "Web",
                "Publishing"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "InternalLoadBalancingMode",
                "modelAsString": false
              }
            },
            "multiSize": {
              "description": "Front-end VM size, e.g. \"Medium\", \"Large\".",
              "type": "string"
            },
            "multiRoleCount": {
              "format": "int32",
              "description": "Number of front-end instances.",
              "type": "integer"
            },
            "workerPools": {
              "description": "Description of worker pools with worker size IDs, VM sizes, and number of workers in each pool.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/WorkerPool"
              }
            },
            "ipsslAddressCount": {
              "format": "int32",
              "description": "Number of IP SSL addresses reserved for the App Service Environment.",
              "type": "integer"
            },
            "databaseEdition": {
              "description": "Edition of the metadata database for the App Service Environment, e.g. \"Standard\".",
              "type": "string",
              "readOnly": true
            },
            "databaseServiceObjective": {
              "description": "Service objective of the metadata database for the App Service Environment, e.g. \"S0\".",
              "type": "string",
              "readOnly": true
            },
            "upgradeDomains": {
              "format": "int32",
              "description": "Number of upgrade domains of the App Service Environment.",
              "type": "integer",
              "readOnly": true
            },
            "subscriptionId": {
              "description": "Subscription of the App Service Environment.",
              "type": "string",
              "readOnly": true
            },
            "dnsSuffix": {
              "description": "DNS suffix of the App Service Environment.",
              "type": "string"
            },
            "lastAction": {
              "description": "Last deployment action on the App Service Environment.",
              "type": "string",
              "readOnly": true
            },
            "lastActionResult": {
              "description": "Result of the last deployment action on the App Service Environment.",
              "type": "string",
              "readOnly": true
            },
            "allowedMultiSizes": {
              "description": "List of comma separated strings describing which VM sizes are allowed for front-ends.",
              "type": "string",
              "readOnly": true
            },
            "allowedWorkerSizes": {
              "description": "List of comma separated strings describing which VM sizes are allowed for workers.",
              "type": "string",
              "readOnly": true
            },
            "maximumNumberOfMachines": {
              "format": "int32",
              "description": "Maximum number of VMs in the App Service Environment.",
              "type": "integer",
              "readOnly": true
            },
            "vipMappings": {
              "description": "Description of IP SSL mapping for the App Service Environment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/VirtualIPMapping"
              },
              "readOnly": true
            },
            "environmentCapacities": {
              "description": "Current total, used, and available worker capacities.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StampCapacity"
              },
              "readOnly": true
            },
            "networkAccessControlList": {
              "description": "Access control list for controlling traffic to the App Service Environment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/NetworkAccessControlEntry"
              }
            },
            "environmentIsHealthy": {
              "description": "True/false indicating whether the App Service Environment is healthy.",
              "type": "boolean",
              "readOnly": true
            },
            "environmentStatus": {
              "description": "Detailed message about with results of the last check of the App Service Environment.",
              "type": "string",
              "readOnly": true
            },
            "resourceGroup": {
              "description": "Resource group of the App Service Environment.",
              "type": "string",
              "readOnly": true
            },
            "frontEndScaleFactor": {
              "format": "int32",
              "description": "Scale factor for front-ends.",
              "type": "integer"
            },
            "defaultFrontEndScaleFactor": {
              "format": "int32",
              "description": "Default Scale Factor for FrontEnds.",
              "type": "integer"
            },
            "apiManagementAccountId": {
              "description": "API Management Account associated with the App Service Environment.",
              "type": "string"
            },
            "suspended": {
              "description": "<code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended, e.g. when the management endpoint is no longer available\r\n            (most likely because NSG blocked the incoming traffic).",
              "type": "boolean"
            },
            "dynamicCacheEnabled": {
              "description": "True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available\r\n            (most likely because NSG blocked the incoming traffic).",
              "type": "boolean"
            },
            "clusterSettings": {
              "description": "Custom settings for changing the behavior of the App Service Environment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/NameValuePair"
              }
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "AppServicePlan": {
      "description": "App Service plan.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Name for the App Service plan.",
              "type": "string"
            },
            "workerTierName": {
              "description": "Target worker tier assigned to the App Service plan.",
              "type": "string"
            },
            "status": {
              "description": "App Service plan status.",
              "enum": [
                "Ready",
                "Pending"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "StatusOptions",
                "modelAsString": false
              }
            },
            "subscription": {
              "description": "App Service plan subscription.",
              "type": "string",
              "readOnly": true
            },
            "adminSiteName": {
              "description": "App Service plan administration site.",
              "type": "string"
            },
            "hostingEnvironmentProfile": {
              "$ref": "#/definitions/HostingEnvironmentProfile",
              "description": "Specification for the App Service Environment to use for the App Service plan.",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "maximumNumberOfWorkers": {
              "format": "int32",
              "description": "Maximum number of instances that can be assigned to this App Service plan.",
              "type": "integer",
              "readOnly": true
            },
            "geoRegion": {
              "description": "Geographical location for the App Service plan.",
              "type": "string",
              "readOnly": true
            },
            "perSiteScaling": {
              "description": "If <code>true</code>, apps assigned to this App Service plan can be scaled independently.\r\n            If <code>false</code>, apps assigned to this App Service plan will scale to all instances of the plan.",
              "default": false,
              "type": "boolean"
            },
            "numberOfSites": {
              "format": "int32",
              "description": "Number of apps assigned to this App Service plan.",
              "type": "integer",
              "readOnly": true
            },
            "resourceGroup": {
              "description": "Resource group of the App Service plan.",
              "type": "string",
              "readOnly": true
            },
            "targetWorkerCount": {
              "format": "int32",
              "description": "Scaling worker count.",
              "type": "integer"
            },
            "targetWorkerSizeId": {
              "format": "int32",
              "description": "Scaling worker size ID.",
              "type": "integer"
            },
            "provisioningState": {
              "description": "Provisioning state of the App Service Environment.",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "InProgress",
                "Deleting"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": false
              }
            }
          },
          "x-ms-client-flatten": true
        },
        "sku": {
          "$ref": "#/definitions/SkuDescription"
        }
      }
    },
    "ApplicationLogsConfig": {
      "description": "Application logs configuration.",
      "type": "object",
      "properties": {
        "fileSystem": {
          "$ref": "#/definitions/FileSystemApplicationLogsConfig",
          "description": "Application logs to file system configuration."
        },
        "azureTableStorage": {
          "$ref": "#/definitions/AzureTableStorageApplicationLogsConfig",
          "description": "Application logs to azure table storage configuration."
        },
        "azureBlobStorage": {
          "$ref": "#/definitions/AzureBlobStorageApplicationLogsConfig",
          "description": "Application logs to blob storage configuration."
        }
      }
    },
    "ArmPlan": {
      "description": "The plan object in Azure Resource Manager, represents a marketplace plan.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name.",
          "type": "string"
        },
        "publisher": {
          "description": "The publisher.",
          "type": "string"
        },
        "product": {
          "description": "The product.",
          "type": "string"
        },
        "promotionCode": {
          "description": "The promotion code.",
          "type": "string"
        },
        "version": {
          "description": "Version of product.",
          "type": "string"
        }
      }
    },
    "AutoHealActions": {
      "description": "Actions which to take by the auto-heal module when a rule is triggered.",
      "type": "object",
      "properties": {
        "actionType": {
          "description": "Predefined action to be taken.",
          "enum": [
            "Recycle",
            "LogEvent",
            "CustomAction"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AutoHealActionType",
            "modelAsString": false
          }
        },
        "customAction": {
          "$ref": "#/definitions/AutoHealCustomAction",
          "description": "Custom action to be taken."
        },
        "minProcessExecutionTime": {
          "description": "Minimum time the process must execute\r\n            before taking the action",
          "type": "string"
        }
      }
    },
    "AutoHealCustomAction": {
      "description": "Custom action to be executed\r\n            when an auto heal rule is triggered.",
      "type": "object",
      "properties": {
        "exe": {
          "description": "Executable to be run.",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters for the executable.",
          "type": "string"
        }
      }
    },
    "AutoHealRules": {
      "description": "Rules that can be defined for auto-heal.",
      "type": "object",
      "properties": {
        "triggers": {
          "$ref": "#/definitions/AutoHealTriggers",
          "description": "Conditions that describe when to execute the auto-heal actions."
        },
        "actions": {
          "$ref": "#/definitions/AutoHealActions",
          "description": "Actions to be executed when a rule is triggered."
        }
      }
    },
    "AutoHealTriggers": {
      "description": "Triggers for auto-heal.",
      "type": "object",
      "properties": {
        "requests": {
          "$ref": "#/definitions/RequestsBasedTrigger",
          "description": "A rule based on total requests."
        },
        "privateBytesInKB": {
          "format": "int32",
          "description": "A rule based on private bytes.",
          "type": "integer"
        },
        "statusCodes": {
          "description": "A rule based on status codes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StatusCodesBasedTrigger"
          }
        },
        "slowRequests": {
          "$ref": "#/definitions/SlowRequestsBasedTrigger",
          "description": "A rule based on request execution time."
        }
      }
    },
    "AzureBlobStorageApplicationLogsConfig": {
      "description": "Application logs azure blob storage configuration.",
      "type": "object",
      "properties": {
        "level": {
          "description": "Log level.",
          "enum": [
            "Off",
            "Verbose",
            "Information",
            "Warning",
            "Error"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LogLevel",
            "modelAsString": false
          }
        },
        "sasUrl": {
          "description": "SAS url to a azure blob container with read/write/list/delete permissions.",
          "type": "string"
        },
        "retentionInDays": {
          "format": "int32",
          "description": "Retention in days.\r\n            Remove blobs older than X days.\r\n            0 or lower means no retention.",
          "type": "integer"
        }
      }
    },
    "AzureBlobStorageHttpLogsConfig": {
      "description": "Http logs to azure blob storage configuration.",
      "type": "object",
      "properties": {
        "sasUrl": {
          "description": "SAS url to a azure blob container with read/write/list/delete permissions.",
          "type": "string"
        },
        "retentionInDays": {
          "format": "int32",
          "description": "Retention in days.\r\n            Remove blobs older than X days.\r\n            0 or lower means no retention.",
          "type": "integer"
        },
        "enabled": {
          "description": "Enabled.",
          "type": "boolean"
        }
      }
    },
    "AzureTableStorageApplicationLogsConfig": {
      "description": "Application logs to Azure table storage configuration.",
      "type": "object",
      "properties": {
        "level": {
          "description": "Log level.",
          "enum": [
            "Off",
            "Verbose",
            "Information",
            "Warning",
            "Error"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LogLevel",
            "modelAsString": false
          }
        },
        "sasUrl": {
          "description": "SAS URL to an Azure table with add/query/delete permissions.",
          "type": "string"
        }
      }
    },
    "BackupItem": {
      "description": "Backup description.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "id": {
              "format": "int32",
              "description": "Id of the backup.",
              "type": "integer",
              "readOnly": true
            },
            "storageAccountUrl": {
              "description": "SAS URL for the storage account container which contains this backup.",
              "type": "string",
              "readOnly": true
            },
            "blobName": {
              "description": "Name of the blob which contains data for this backup.",
              "type": "string",
              "readOnly": true
            },
            "name": {
              "description": "Name of this backup.",
              "type": "string",
              "readOnly": true
            },
            "status": {
              "description": "Backup status.",
              "enum": [
                "InProgress",
                "Failed",
                "Succeeded",
                "TimedOut",
                "Created",
                "Skipped",
                "PartiallySucceeded",
                "DeleteInProgress",
                "DeleteFailed",
                "Deleted"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "BackupItemStatus",
                "modelAsString": false
              }
            },
            "sizeInBytes": {
              "format": "int64",
              "description": "Size of the backup in bytes.",
              "type": "integer",
              "readOnly": true
            },
            "created": {
              "format": "date-time",
              "description": "Timestamp of the backup creation.",
              "type": "string",
              "readOnly": true
            },
            "log": {
              "description": "Details regarding this backup. Might contain an error message.",
              "type": "string",
              "readOnly": true
            },
            "databases": {
              "description": "List of databases included in the backup.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DatabaseBackupSetting"
              },
              "readOnly": true
            },
            "scheduled": {
              "description": "True if this backup has been created due to a schedule being triggered.",
              "type": "boolean",
              "readOnly": true
            },
            "lastRestoreTimeStamp": {
              "format": "date-time",
              "description": "Timestamp of a last restore operation which used this backup.",
              "type": "string",
              "readOnly": true
            },
            "finishedTimeStamp": {
              "format": "date-time",
              "description": "Timestamp when this backup finished.",
              "type": "string",
              "readOnly": true
            },
            "correlationId": {
              "description": "Unique correlation identifier. Please use this along with the timestamp while communicating with Azure support.",
              "type": "string",
              "readOnly": true
            },
            "websiteSizeInBytes": {
              "format": "int64",
              "description": "Size of the original web app which has been backed up.",
              "type": "integer",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "BackupSchedule": {
      "description": "Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.",
      "type": "object",
      "properties": {
        "frequencyInterval": {
          "format": "int32",
          "description": "How often should be the backup executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)",
          "type": "integer"
        },
        "frequencyUnit": {
          "description": "How often should be the backup executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)",
          "enum": [
            "Day",
            "Hour"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "FrequencyUnit",
            "modelAsString": false
          }
        },
        "keepAtLeastOneBackup": {
          "description": "True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.",
          "type": "boolean"
        },
        "retentionPeriodInDays": {
          "format": "int32",
          "description": "After how many days backups should be deleted.",
          "type": "integer"
        },
        "startTime": {
          "format": "date-time",
          "description": "When the schedule should start working.",
          "type": "string"
        },
        "lastExecutionTime": {
          "format": "date-time",
          "description": "Last time when this schedule was triggered.",
          "type": "string"
        }
      }
    },
    "Capability": {
      "description": "Description of a SKU Capability.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the SKU capability.",
          "type": "string"
        },
        "value": {
          "description": "Value of the SKU capability.",
          "type": "string"
        },
        "reason": {
          "description": "Reason of the SKU capability.",
          "type": "string"
        }
      }
    },
    "Certificate": {
      "description": "SSL certificate for an app.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "required": [
            "password"
          ],
          "properties": {
            "friendlyName": {
              "description": "Friendly name of the certificate.",
              "type": "string",
              "readOnly": true
            },
            "subjectName": {
              "description": "Subject name of the certificate.",
              "type": "string",
              "readOnly": true
            },
            "hostNames": {
              "description": "Host names the certificate applies to.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pfxBlob": {
              "description": "Pfx blob.",
              "type": "string"
            },
            "siteName": {
              "description": "App name.",
              "type": "string",
              "readOnly": true
            },
            "selfLink": {
              "description": "Self link.",
              "type": "string",
              "readOnly": true
            },
            "issuer": {
              "description": "Certificate issuer.",
              "type": "string",
              "readOnly": true
            },
            "issueDate": {
              "format": "date-time",
              "description": "Certificate issue Date.",
              "type": "string",
              "readOnly": true
            },
            "expirationDate": {
              "format": "date-time",
              "description": "Certificate expriration date.",
              "type": "string",
              "readOnly": true
            },
            "password": {
              "description": "Certificate password.",
              "type": "string",
              "x-ms-mutability": [
                "create"
              ]
            },
            "thumbprint": {
              "description": "Certificate thumbprint.",
              "type": "string",
              "readOnly": true
            },
            "valid": {
              "description": "Is the certificate valid?.",
              "type": "boolean",
              "readOnly": true
            },
            "cerBlob": {
              "description": "Raw bytes of .cer file",
              "type": "string"
            },
            "publicKeyHash": {
              "description": "Public key hash.",
              "type": "string",
              "readOnly": true
            },
            "hostingEnvironmentProfile": {
              "$ref": "#/definitions/HostingEnvironmentProfile",
              "description": "Specification for the App Service Environment to use for the certificate.",
              "readOnly": true
            },
            "keyVaultSecretStatus": {
              "description": "Status of the Key Vault secret.",
              "enum": [
                "Initialized",
                "WaitingOnCertificateOrder",
                "Succeeded",
                "CertificateOrderFailed",
                "OperationNotPermittedOnKeyVault",
                "AzureServiceUnauthorizedToAccessKeyVault",
                "KeyVaultDoesNotExist",
                "KeyVaultSecretDoesNotExist",
                "UnknownError",
                "ExternalPrivateKey",
                "Unknown"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "KeyVaultSecretStatus",
                "modelAsString": false
              }
            },
            "serverFarmId": {
              "description": "Resource ID of the associated App Service plan, formatted as: \"/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}\".",
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "CertificateDetails": {
      "description": "SSL certificate details.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "version": {
              "format": "int32",
              "description": "Version.",
              "type": "integer",
              "readOnly": true
            },
            "serialNumber": {
              "description": "Serial Number.",
              "type": "string",
              "readOnly": true
            },
            "thumbprint": {
              "description": "Thumbprint.",
              "type": "string",
              "readOnly": true
            },
            "subject": {
              "description": "Subject.",
              "type": "string",
              "readOnly": true
            },
            "notBefore": {
              "format": "date-time",
              "description": "Valid from.",
              "type": "string",
              "readOnly": true
            },
            "notAfter": {
              "format": "date-time",
              "description": "Valid to.",
              "type": "string",
              "readOnly": true
            },
            "signatureAlgorithm": {
              "description": "Signature algorithm.",
              "type": "string",
              "readOnly": true
            },
            "issuer": {
              "description": "Issuer.",
              "type": "string",
              "readOnly": true
            },
            "rawData": {
              "description": "Raw certificate data.",
              "type": "string",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "ClassicMobileService": {
      "description": "A mobile service.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "name": {
              "description": "Name of the mobile service.",
              "type": "string",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "CloningInfo": {
      "description": "Information needed for cloning operation.",
      "required": [
        "sourceWebAppId"
      ],
      "type": "object",
      "properties": {
        "correlationId": {
          "description": "Correlation ID of cloning operation. This ID ties multiple cloning operations\r\n            together to use the same snapshot.",
          "type": "string"
        },
        "overwrite": {
          "description": "<code>true</code> to overwrite destination app; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "cloneCustomHostNames": {
          "description": "<code>true</code> to clone custom hostnames from source app; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "cloneSourceControl": {
          "description": "<code>true</code> to clone source control from source app; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "sourceWebAppId": {
          "description": "ARM resource ID of the source app. App resource ID is of the form \r\n            /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and \r\n            /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.",
          "type": "string"
        },
        "hostingEnvironment": {
          "description": "App Service Environment.",
          "type": "string"
        },
        "appSettingsOverrides": {
          "description": "Application setting overrides for cloned app. If specified, these settings override the settings cloned \r\n            from source app. Otherwise, application settings from source app are retained.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "configureLoadBalancing": {
          "description": "<code>true</code> to configure load balancing for source and destination app.",
          "type": "boolean"
        },
        "trafficManagerProfileId": {
          "description": "ARM resource ID of the Traffic Manager profile to use, if it exists. Traffic Manager resource ID is of the form \r\n            /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.",
          "type": "string"
        },
        "trafficManagerProfileName": {
          "description": "Name of Traffic Manager profile to create. This is only needed if Traffic Manager profile does not already exist.",
          "type": "string"
        }
      }
    },
    "ConnStringValueTypePair": {
      "description": "Database connection string value to type pair.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Value of pair.",
          "type": "string"
        },
        "type": {
          "description": "Type of database.",
          "enum": [
            "MySql",
            "SQLServer",
            "SQLAzure",
            "Custom",
            "NotificationHub",
            "ServiceBus",
            "EventHub",
            "ApiHub",
            "DocDb",
            "RedisCache"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ConnectionStringType",
            "modelAsString": false
          }
        }
      }
    },
    "Contact": {
      "description": "Contact information for domain registration. If 'Domain Privacy' option is not selected then the contact information is made publicly available through the Whois \r\n            directories as per ICANN requirements.",
      "type": "object",
      "properties": {
        "addressMailing": {
          "$ref": "#/definitions/Address",
          "description": "Mailing address."
        },
        "email": {
          "description": "Email address.",
          "type": "string"
        },
        "fax": {
          "description": "Fax number.",
          "type": "string"
        },
        "jobTitle": {
          "description": "Job title.",
          "type": "string"
        },
        "nameFirst": {
          "description": "First name.",
          "type": "string"
        },
        "nameLast": {
          "description": "Last name.",
          "type": "string"
        },
        "nameMiddle": {
          "description": "Middle name.",
          "type": "string"
        },
        "organization": {
          "description": "Organization.",
          "type": "string"
        },
        "phone": {
          "description": "Phone number.",
          "type": "string"
        }
      }
    },
    "CorsSettings": {
      "description": "Cross-Origin Resource Sharing (CORS) settings for the app.",
      "type": "object",
      "properties": {
        "allowedOrigins": {
          "description": "Gets or sets the list of origins that should be allowed to make cross-origin\r\n            calls (for example: http://example.com:12345). Use \"*\" to allow all.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "CsmUsageQuota": {
      "description": "Usage of the quota resource.",
      "type": "object",
      "properties": {
        "unit": {
          "description": "Units of measurement for the quota resourse.",
          "type": "string"
        },
        "nextResetTime": {
          "format": "date-time",
          "description": "Next reset time for the resource counter.",
          "type": "string"
        },
        "currentValue": {
          "format": "int64",
          "description": "The current value of the resource counter.",
          "type": "integer"
        },
        "limit": {
          "format": "int64",
          "description": "The resource limit.",
          "type": "integer"
        },
        "name": {
          "$ref": "#/definitions/LocalizableString",
          "description": "Quota name."
        }
      }
    },
    "DatabaseBackupSetting": {
      "description": "Database backup settings.",
      "type": "object",
      "properties": {
        "databaseType": {
          "description": "Database type (e.g. SqlAzure / MySql).",
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "connectionStringName": {
          "description": "Contains a connection string name that is linked to the SiteConfig.ConnectionStrings.\r\n            This is used during restore with overwrite connection strings options.",
          "type": "string"
        },
        "connectionString": {
          "description": "Contains a connection string to a database which is being backed up or restored. If the restore should happen to a new database, the database name inside is the new one.",
          "type": "string"
        }
      }
    },
    "DeletedSite": {
      "description": "A deleted app.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "deletedTimestamp": {
              "format": "date-time",
              "description": "Time when the app was deleted.",
              "type": "string",
              "readOnly": true
            },
            "state": {
              "description": "Current state of the app. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "hostNames": {
              "description": "Hostnames associated with the app. Read-only.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            },
            "repositorySiteName": {
              "description": "Name of the repository site. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "usageState": {
              "description": "State indicating whether the app has exceeded its quota usage. Read-only.",
              "enum": [
                "Normal",
                "Exceeded"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "UsageState",
                "modelAsString": false
              }
            },
            "enabled": {
              "description": "<code>true</code> if the app is enabled; otherwise, <code>false</code>. Setting this value to false disables the app (takes the app offline).",
              "type": "boolean"
            },
            "enabledHostNames": {
              "description": "Enabled hostnames for the app. Read-only. Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,\r\n            the app is not served on those hostnames.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            },
            "availabilityState": {
              "description": "Management information availability state for the app. Read-only.",
              "enum": [
                "Normal",
                "Limited",
                "DisasterRecoveryMode"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "SiteAvailabilityState",
                "modelAsString": false
              }
            },
            "hostNameSslStates": {
              "description": "Hostname SSL states are used to manage the SSL bindings for app's hostnames.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HostNameSslState"
              }
            },
            "serverFarmId": {
              "description": "Resource ID of the associated App Service plan, formatted as: \"/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}\".",
              "type": "string"
            },
            "reserved": {
              "description": "<code>true</code> if reserved; otherwise, <code>false</code>.",
              "default": false,
              "type": "boolean",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "lastModifiedTimeUtc": {
              "format": "date-time",
              "description": "Last time the app was modified, in UTC. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "siteConfig": {
              "$ref": "#/definitions/SiteConfig",
              "description": "Configuration of the app."
            },
            "trafficManagerHostNames": {
              "description": "Azure Traffic Manager hostnames associated with the app. Read-only.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            },
            "premiumAppDeployed": {
              "description": "Indicates whether app is deployed as a premium app. Read-only.",
              "type": "boolean",
              "readOnly": true
            },
            "scmSiteAlsoStopped": {
              "description": "<code>true</code> to stop SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The default is <code>false</code>.",
              "type": "boolean",
              "readOnly": true
            },
            "targetSwapSlot": {
              "description": "Specifies which deployment slot this app will swap into. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "hostingEnvironmentProfile": {
              "$ref": "#/definitions/HostingEnvironmentProfile",
              "description": "App Service Environment to use for the app.",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "microService": {
              "description": "Micro services like apps, logic apps.",
              "default": false,
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "gatewaySiteName": {
              "description": "Name of gateway app associated with the app.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "clientAffinityEnabled": {
              "description": "<code>true</code> to enable client affinity; <code>false</code> to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is <code>true</code>.",
              "type": "boolean"
            },
            "clientCertEnabled": {
              "description": "<code>true</code> to enable client certificate authentication (TLS mutual authentication); otherwise, <code>false</code>. Default is <code>false</code>.",
              "type": "boolean"
            },
            "hostNamesDisabled": {
              "description": "<code>true</code> to disable the public hostnames of the app; otherwise, <code>false</code>.\r\n            If <code>true</code>, the app is only accessible via API management process.",
              "type": "boolean"
            },
            "outboundIpAddresses": {
              "description": "List of IP addresses that the app uses for outbound connections (e.g. database access). Read-only.",
              "type": "string",
              "readOnly": true
            },
            "containerSize": {
              "format": "int32",
              "description": "Size of the function container.",
              "type": "integer"
            },
            "dailyMemoryTimeQuota": {
              "format": "int32",
              "description": "Maximum allowed daily memory-time quota (applicable on dynamic apps only).",
              "type": "integer"
            },
            "suspendedTill": {
              "format": "date-time",
              "description": "App suspended till in case memory-time quota is exceeded.",
              "type": "string",
              "readOnly": true
            },
            "maxNumberOfWorkers": {
              "format": "int32",
              "description": "Maximum number of workers.\r\n            This only applies to Functions container.",
              "type": "integer",
              "readOnly": true
            },
            "cloningInfo": {
              "$ref": "#/definitions/CloningInfo",
              "description": "If specified during app creation, the app is cloned from a source app.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "resourceGroup": {
              "description": "Name of the resource group the app belongs to. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "isDefaultContainer": {
              "description": "<code>true</code> if the app is a default container; otherwise, <code>false</code>. Read-only.",
              "type": "boolean",
              "readOnly": true
            },
            "defaultHostName": {
              "description": "Default hostname of the app. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "slotSwapStatus": {
              "$ref": "#/definitions/SlotSwapStatus",
              "description": "Status of the last deployment slot swap operation.",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "Deployment": {
      "description": "User crendentials used for publishing activity.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "id": {
              "description": "ID.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "status": {
              "format": "int32",
              "description": "Status.",
              "type": "integer"
            },
            "message": {
              "description": "Message.",
              "type": "string"
            },
            "author": {
              "description": "Author.",
              "type": "string"
            },
            "deployer": {
              "description": "Deployer.",
              "type": "string"
            },
            "author_email": {
              "description": "Author email.",
              "type": "string"
            },
            "start_time": {
              "format": "date-time",
              "description": "Start time.",
              "type": "string"
            },
            "end_time": {
              "format": "date-time",
              "description": "End time.",
              "type": "string"
            },
            "active": {
              "description": "Active.",
              "type": "boolean"
            },
            "details": {
              "description": "Detail.",
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "Domain": {
      "description": "Information about a domain.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "required": [
            "contactAdmin",
            "contactBilling",
            "contactRegistrant",
            "contactTech",
            "consent"
          ],
          "properties": {
            "contactAdmin": {
              "$ref": "#/definitions/Contact",
              "description": "Administrative contact.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "contactBilling": {
              "$ref": "#/definitions/Contact",
              "description": "Billing contact.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "contactRegistrant": {
              "$ref": "#/definitions/Contact",
              "description": "Registrant contact.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "contactTech": {
              "$ref": "#/definitions/Contact",
              "description": "Technical contact.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "registrationStatus": {
              "description": "Domain registration status.",
              "enum": [
                "Active",
                "Awaiting",
                "Cancelled",
                "Confiscated",
                "Disabled",
                "Excluded",
                "Expired",
                "Failed",
                "Held",
                "Locked",
                "Parked",
                "Pending",
                "Reserved",
                "Reverted",
                "Suspended",
                "Transferred",
                "Unknown",
                "Unlocked",
                "Unparked",
                "Updated",
                "JsonConverterFailed"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "DomainStatus",
                "modelAsString": false
              }
            },
            "provisioningState": {
              "description": "Domain provisioning state.",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "InProgress",
                "Deleting"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": false
              }
            },
            "nameServers": {
              "description": "Name servers.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "privacy": {
              "description": "<code>true</code> if domain privacy is enabled for this domain; otherwise, <code>false</code>.",
              "type": "boolean",
              "readOnly": true
            },
            "createdTime": {
              "format": "date-time",
              "description": "Domain creation timestamp.",
              "type": "string",
              "readOnly": true
            },
            "expirationTime": {
              "format": "date-time",
              "description": "Domain expiration timestamp.",
              "type": "string",
              "readOnly": true
            },
            "lastRenewedTime": {
              "format": "date-time",
              "description": "Timestamp when the domain was renewed last time.",
              "type": "string",
              "readOnly": true
            },
            "autoRenew": {
              "description": "<code>true</code> if the domain should be automatically renewed; otherwise, <code>false</code>.",
              "default": true,
              "type": "boolean"
            },
            "readyForDnsRecordManagement": {
              "description": "<code>true</code> if Azure can assign this domain to App Service apps; otherwise, <code>false</code>. This value will be <code>true</code> if domain registration status is active and \r\n            it is hosted on name servers Azure has programmatic access to.",
              "type": "boolean",
              "readOnly": true
            },
            "managedHostNames": {
              "description": "All hostnames derived from the domain and assigned to Azure resources.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HostName"
              }
            },
            "consent": {
              "$ref": "#/definitions/DomainPurchaseConsent",
              "description": "Legal agreement consent.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "domainNotRenewableReasons": {
              "description": "Reasons why domain is not renewable.",
              "type": "array",
              "items": {
                "enum": [
                  "RegistrationStatusNotSupportedForRenewal",
                  "ExpirationNotInRenewalTimeRange",
                  "SubscriptionNotActive"
                ],
                "type": "string"
              }
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "DomainAvailablilityCheckResult": {
      "description": "Domain availablility check result.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the domain.",
          "type": "string"
        },
        "available": {
          "description": "<code>true</code> if domain can be purchased using CreateDomain API; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "domainType": {
          "description": "Domain type.",
          "enum": [
            "Regular",
            "SoftDeleted"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "DomainType",
            "modelAsString": false
          }
        }
      }
    },
    "DomainCollection": {
      "description": "Collection of domains.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "Collection of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Domain"
          }
        },
        "nextLink": {
          "description": "Link to next page of resources.",
          "type": "string"
        }
      }
    },
    "DomainControlCenterSsoRequest": {
      "description": "Single sign-on request information for domain management.",
      "type": "object",
      "properties": {
        "url": {
          "description": "URL where the single sign-on request is to be made.",
          "type": "string"
        },
        "postParameterKey": {
          "description": "Post parameter key.",
          "type": "string"
        },
        "postParameterValue": {
          "description": "Post parameter value. Client should use 'application/x-www-form-urlencoded' encoding for this value.",
          "type": "string"
        }
      }
    },
    "DomainOwnershipIdentifier": {
      "description": "Domain ownership Identifier.",
      "type": "object",
      "properties": {
        "ownershipId": {
          "description": "Ownership Id.",
          "type": "string"
        }
      }
    },
    "DomainOwnershipIdentifierCollection": {
      "description": "Collection of domain ownership identifiers.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "Collection of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DomainOwnershipIdentifier"
          }
        },
        "nextLink": {
          "description": "Link to next page of resources.",
          "type": "string"
        }
      }
    },
    "DomainPurchaseConsent": {
      "description": "Domain purchase consent object, representing acceptance of applicable legal agreements.",
      "type": "object",
      "properties": {
        "agreementKeys": {
          "description": "List of applicable legal agreement keys. This list can be retrieved using ListLegalAgreements API under <code>TopLevelDomain</code> resource.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "agreedBy": {
          "description": "Client IP address.",
          "type": "string"
        },
        "agreedAt": {
          "format": "date-time",
          "description": "Timestamp when the agreements were accepted.",
          "type": "string"
        }
      }
    },
    "DomainRecommendationSearchParameters": {
      "description": "Domain recommendation search parameters.",
      "type": "object",
      "properties": {
        "keywords": {
          "description": "Keywords to be used for generating domain recommendations.",
          "type": "string"
        },
        "maxDomainRecommendations": {
          "format": "int32",
          "description": "Maximum number of recommendations.",
          "type": "integer"
        }
      }
    },
    "EnabledConfig": {
      "description": "Enabled configuration.",
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Enabled.",
          "type": "boolean"
        }
      }
    },
    "ErrorEntity": {
      "description": "Body of the error response returned from the API.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Basic error code.",
          "type": "string"
        },
        "message": {
          "description": "Any details of the error.",
          "type": "string"
        },
        "extendedCode": {
          "description": "Type of error.",
          "type": "string"
        },
        "messageTemplate": {
          "description": "Message template.",
          "type": "string"
        },
        "parameters": {
          "description": "Parameters for the template.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "innerErrors": {
          "description": "Inner errors.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorEntity"
          }
        }
      }
    },
    "Experiments": {
      "description": "Routing rules in production experiments.",
      "type": "object",
      "properties": {
        "rampUpRules": {
          "description": "List of ramp-up rules.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RampUpRule"
          }
        }
      }
    },
    "FileSystemApplicationLogsConfig": {
      "description": "Application logs to file system configuration.",
      "type": "object",
      "properties": {
        "level": {
          "description": "Log level.",
          "enum": [
            "Off",
            "Verbose",
            "Information",
            "Warning",
            "Error"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "LogLevel",
            "modelAsString": false
          }
        }
      }
    },
    "FileSystemHttpLogsConfig": {
      "description": "Http logs to file system configuration.",
      "type": "object",
      "properties": {
        "retentionInMb": {
          "format": "int32",
          "description": "Maximum size in megabytes that http log files can use.\r\n            When reached old log files will be removed to make space for new ones.\r\n            Value can range between 25 and 100.",
          "type": "integer"
        },
        "retentionInDays": {
          "format": "int32",
          "description": "Retention in days.\r\n            Remove files older than X days.\r\n            0 or lower means no retention.",
          "type": "integer"
        },
        "enabled": {
          "description": "Enabled.",
          "type": "boolean"
        }
      }
    },
    "GeoRegion": {
      "description": "Geographical region.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "name": {
              "description": "Region name.",
              "type": "string",
              "readOnly": true
            },
            "description": {
              "description": "Region description.",
              "type": "string",
              "readOnly": true
            },
            "displayName": {
              "description": "Display name for region.",
              "type": "string",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "GlobalCsmSkuDescription": {
      "description": "A Global SKU Description.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the resource SKU.",
          "type": "string"
        },
        "tier": {
          "description": "Service Tier of the resource SKU.",
          "type": "string"
        },
        "capacity": {
          "$ref": "#/definitions/SkuCapacity",
          "description": "Min, max, and default scale values of the SKU."
        },
        "locations": {
          "description": "Locations of the SKU.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capabilities": {
          "description": "Capabilities of the SKU, e.g., is traffic manager enabled?",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Capability"
          }
        }
      }
    },
    "HandlerMapping": {
      "description": "The IIS handler mappings used to define which handler processes HTTP requests with certain extension. \r\n            For example, it is used to configure php-cgi.exe process to handle all HTTP requests with *.php extension.",
      "type": "object",
      "properties": {
        "extension": {
          "description": "Requests with this extension will be handled using the specified FastCGI application.",
          "type": "string"
        },
        "scriptProcessor": {
          "description": "The absolute path to the FastCGI application.",
          "type": "string"
        },
        "arguments": {
          "description": "Command-line arguments to be passed to the script processor.",
          "type": "string"
        }
      }
    },
    "HostName": {
      "description": "Details of a hostname derived from a domain.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the hostname.",
          "type": "string"
        },
        "siteNames": {
          "description": "List of apps the hostname is assigned to. This list will have more than one app only if the hostname is pointing to a Traffic Manager.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "azureResourceName": {
          "description": "Name of the Azure resource the hostname is assigned to. If it is assigned to a Traffic Manager then it will be the Traffic Manager name otherwise it will be the app name.",
          "type": "string"
        },
        "azureResourceType": {
          "description": "Type of the Azure resource the hostname is assigned to.",
          "enum": [
            "Website",
            "TrafficManager"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AzureResourceType",
            "modelAsString": false
          }
        },
        "customHostNameDnsRecordType": {
          "description": "Type of the DNS record.",
          "enum": [
            "CName",
            "A"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "CustomHostNameDnsRecordType",
            "modelAsString": false
          }
        },
        "hostNameType": {
          "description": "Type of the hostname.",
          "enum": [
            "Verified",
            "Managed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "HostNameType",
            "modelAsString": false
          }
        }
      }
    },
    "HostNameBinding": {
      "description": "A hostname binding object.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "description": "Hostname.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "siteName": {
              "description": "App Service app name.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "domainId": {
              "description": "Fully qualified ARM domain resource URI.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "azureResourceName": {
              "description": "Azure resource name.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "azureResourceType": {
              "description": "Azure resource type.",
              "enum": [
                "Website",
                "TrafficManager"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "AzureResourceType",
                "modelAsString": false
              },
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "customHostNameDnsRecordType": {
              "description": "Custom DNS record type.",
              "enum": [
                "CName",
                "A"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "CustomHostNameDnsRecordType",
                "modelAsString": false
              },
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "hostNameType": {
              "description": "Hostname type.",
              "enum": [
                "Verified",
                "Managed"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "HostNameType",
                "modelAsString": false
              },
              "x-ms-mutability": [
                "create",
                "read"
              ]
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "HostNameSslState": {
      "description": "SSL-enabled hostname.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Hostname.",
          "type": "string"
        },
        "sslState": {
          "description": "SSL type.",
          "enum": [
            "Disabled",
            "SniEnabled",
            "IpBasedEnabled"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "SslState",
            "modelAsString": false
          }
        },
        "virtualIP": {
          "description": "Virtual IP address assigned to the hostname if IP based SSL is enabled.",
          "type": "string"
        },
        "thumbprint": {
          "description": "SSL certificate thumbprint.",
          "type": "string"
        },
        "toUpdate": {
          "description": "Set to <code>true</code> to update existing hostname.",
          "type": "boolean"
        }
      }
    },
    "HostingEnvironmentProfile": {
      "description": "Specification for an App Service Environment to use for this resource.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Resource ID of the App Service Environment.",
          "type": "string"
        },
        "name": {
          "description": "Name of the App Service Environment (read only).",
          "type": "string"
        },
        "type": {
          "description": "Resource type of the App Service Environment (read only).",
          "type": "string"
        }
      }
    },
    "HttpLogsConfig": {
      "description": "Http logs configuration.",
      "type": "object",
      "properties": {
        "fileSystem": {
          "$ref": "#/definitions/FileSystemHttpLogsConfig",
          "description": "Http logs to file system configuration."
        },
        "azureBlobStorage": {
          "$ref": "#/definitions/AzureBlobStorageHttpLogsConfig",
          "description": "Http logs to azure blob storage configuration."
        }
      }
    },
    "HybridConnection": {
      "description": "Hybrid Connection contract. This is used to configure a Hybrid Connection.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "serviceBusNamespace": {
              "description": "The name of the Service Bus namespace.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "relayName": {
              "description": "The name of the Service Bus relay.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "relayArmUri": {
              "description": "The ARM URI to the Service Bus relay.",
              "type": "string"
            },
            "hostname": {
              "description": "The hostname of the endpoint.",
              "type": "string"
            },
            "port": {
              "format": "int32",
              "description": "The port of the endpoint.",
              "type": "integer"
            },
            "sendKeyName": {
              "description": "The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus.",
              "type": "string"
            },
            "sendKeyValue": {
              "description": "The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned\r\n            normally, use the POST /listKeys API instead.",
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "IpSecurityRestriction": {
      "description": "IP security restriction on an app.",
      "required": [
        "ipAddress"
      ],
      "type": "object",
      "properties": {
        "ipAddress": {
          "description": "IP address the security restriction is valid for.",
          "type": "string"
        },
        "subnetMask": {
          "description": "Subnet mask for the range of IP addresses the restriction is valid for.",
          "type": "string"
        }
      }
    },
    "LocalizableString": {
      "description": "Localizable string object containing the name and a localized value.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Non-localized name.",
          "type": "string"
        },
        "localizedValue": {
          "description": "Localized name.",
          "type": "string"
        }
      }
    },
    "MetricAvailabilily": {
      "description": "Metric availability and retention.",
      "type": "object",
      "properties": {
        "timeGrain": {
          "description": "Time grain.",
          "type": "string"
        },
        "retention": {
          "description": "Retention period for the current time grain.",
          "type": "string"
        }
      }
    },
    "NameIdentifier": {
      "description": "Identifies an object.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the object.",
          "type": "string"
        }
      }
    },
    "NameIdentifierCollection": {
      "description": "Collection of domain name identifiers.",
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "description": "Collection of resources.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameIdentifier"
          }
        },
        "nextLink": {
          "description": "Link to next page of resources.",
          "type": "string"
        }
      }
    },
    "NameValuePair": {
      "description": "Name value pair.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Pair name.",
          "type": "string"
        },
        "value": {
          "description": "Pair value.",
          "type": "string"
        }
      }
    },
    "NetworkAccessControlEntry": {
      "description": "Network access control entry.",
      "type": "object",
      "properties": {
        "action": {
          "description": "Action object.",
          "enum": [
            "Permit",
            "Deny"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "AccessControlEntryAction",
            "modelAsString": false
          }
        },
        "description": {
          "description": "Description.",
          "type": "string"
        },
        "order": {
          "format": "int32",
          "description": "Order of precedence.",
          "type": "integer"
        },
        "remoteSubnet": {
          "description": "Remote subnet.",
          "type": "string"
        }
      }
    },
    "Object": {
      "type": "object",
      "properties": {}
    },
    "PerfMonResponse": {
      "description": "Performance monitor API response.",
      "type": "object",
      "properties": {
        "code": {
          "description": "The response code.",
          "type": "string"
        },
        "message": {
          "description": "The message.",
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/PerfMonSet",
          "description": "The performance monitor counters."
        }
      }
    },
    "PerfMonSample": {
      "description": "Performance monitor sample in a set.",
      "type": "object",
      "properties": {
        "time": {
          "format": "date-time",
          "description": "Point in time for which counter was measured.",
          "type": "string"
        },
        "instanceName": {
          "description": "Name of the server on which the measurement is made.",
          "type": "string"
        },
        "value": {
          "format": "double",
          "description": "Value of counter at a certain time.",
          "type": "number"
        }
      }
    },
    "PerfMonSet": {
      "description": "Metric information.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Unique key name of the counter.",
          "type": "string"
        },
        "startTime": {
          "format": "date-time",
          "description": "Start time of the period.",
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "description": "End time of the period.",
          "type": "string"
        },
        "timeGrain": {
          "description": "Presented time grain.",
          "type": "string"
        },
        "values": {
          "description": "Collection of workers that are active during this time.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PerfMonSample"
          }
        }
      }
    },
    "PremierAddOnOffer": {
      "description": "Premier add-on offer.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "sku": {
              "description": "SKU.",
              "type": "string"
            },
            "product": {
              "description": "Product.",
              "type": "string"
            },
            "vendor": {
              "description": "Vendor.",
              "type": "string"
            },
            "name": {
              "description": "Name.",
              "type": "string"
            },
            "promoCodeRequired": {
              "description": "<code>true</code> if promotion code is required; otherwise, <code>false</code>.",
              "type": "boolean"
            },
            "quota": {
              "format": "int32",
              "description": "Quota.",
              "type": "integer"
            },
            "webHostingPlanRestrictions": {
              "description": "App Service plans this offer is restricted to.",
              "enum": [
                "None",
                "Free",
                "Shared",
                "Basic",
                "Standard",
                "Premium"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "AppServicePlanRestrictions",
                "modelAsString": false
              }
            },
            "privacyPolicyUrl": {
              "description": "Privacy policy URL.",
              "type": "string"
            },
            "legalTermsUrl": {
              "description": "Legal terms URL.",
              "type": "string"
            },
            "marketplacePublisher": {
              "description": "Marketplace publisher.",
              "type": "string"
            },
            "marketplaceOffer": {
              "description": "Marketplace offer.",
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "PushSettings": {
      "description": "Push settings for the App.",
      "type": "object",
      "properties": {
        "isPushEnabled": {
          "description": "Gets or sets a flag indicating whether the Push endpoint is enabled.",
          "type": "boolean"
        },
        "tagWhitelistJson": {
          "description": "Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.",
          "type": "string"
        },
        "tagsRequiringAuth": {
          "description": "Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.",
          "type": "string"
        },
        "dynamicTagsJson": {
          "description": "Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint.",
          "type": "string"
        }
      }
    },
    "RampUpRule": {
      "description": "Routing rules for ramp up testing. This rule allows to redirect static traffic % to a slot or to gradually change routing % based on performance.",
      "type": "object",
      "properties": {
        "actionHostName": {
          "description": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.",
          "type": "string"
        },
        "reroutePercentage": {
          "format": "double",
          "description": "Percentage of the traffic which will be redirected to <code>ActionHostName</code>.",
          "type": "number"
        },
        "changeStep": {
          "format": "double",
          "description": "[Optional] In auto ramp up scenario this is the step to to add/remove from <code>ReroutePercentage</code> until it reaches \r\n            <code>MinReroutePercentage</code> or <code>MaxReroutePercentage</code>. Site metrics are checked every N minutes specificed in <code>ChangeIntervalInMinutes</code>.\r\n            Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in <code>ChangeDecisionCallbackUrl</code>.",
          "type": "number"
        },
        "changeIntervalInMinutes": {
          "format": "int32",
          "description": "[Optional] Specifies interval in mimuntes to reevaluate ReroutePercentage.",
          "type": "integer"
        },
        "minReroutePercentage": {
          "format": "double",
          "description": "[Optional] Specifies lower boundary above which ReroutePercentage will stay.",
          "type": "number"
        },
        "maxReroutePercentage": {
          "format": "double",
          "description": "[Optional] Specifies upper boundary below which ReroutePercentage will stay.",
          "type": "number"
        },
        "changeDecisionCallbackUrl": {
          "description": "Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.\r\n            https://www.siteextensions.net/packages/TiPCallback/",
          "type": "string"
        },
        "name": {
          "description": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment.",
          "type": "string"
        }
      }
    },
    "RelayServiceConnectionEntity": {
      "description": "Hybrid Connection for an App Service app.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "entityName": {
              "type": "string"
            },
            "entityConnectionString": {
              "type": "string"
            },
            "resourceType": {
              "type": "string"
            },
            "resourceConnectionString": {
              "type": "string"
            },
            "hostname": {
              "type": "string"
            },
            "port": {
              "format": "int32",
              "type": "integer"
            },
            "biztalkUri": {
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "RequestsBasedTrigger": {
      "description": "Trigger based on total requests.",
      "type": "object",
      "properties": {
        "count": {
          "format": "int32",
          "description": "Count.",
          "type": "integer"
        },
        "timeInterval": {
          "description": "Time interval.",
          "type": "string"
        }
      }
    },
    "Resource": {
      "description": "Azure resource.",
      "required": [
        "location",
        "name"
      ],
      "properties": {
        "id": {
          "description": "Resource Id.",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Resource Name.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of resource.",
          "type": "string"
        },
        "location": {
          "description": "Resource Location.",
          "type": "string"
        },
        "type": {
          "description": "Resource type.",
          "type": "string"
        },
        "tags": {
          "description": "Resource tags.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-ms-azure-resource": true
    },
    "ResourceMetric": {
      "description": "Object representing a metric for any resource .",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/ResourceMetricName",
          "description": "Name of metric.",
          "readOnly": true
        },
        "unit": {
          "description": "Metric unit.",
          "type": "string",
          "readOnly": true
        },
        "timeGrain": {
          "description": "Metric granularity. E.g PT1H, PT5M, P1D",
          "type": "string",
          "readOnly": true
        },
        "startTime": {
          "format": "date-time",
          "description": "Metric start time.",
          "type": "string",
          "readOnly": true
        },
        "endTime": {
          "format": "date-time",
          "description": "Metric end time.",
          "type": "string",
          "readOnly": true
        },
        "resourceId": {
          "description": "Metric resource Id.",
          "type": "string",
          "readOnly": true
        },
        "id": {
          "description": "Resource Id.",
          "type": "string",
          "readOnly": true
        },
        "metricValues": {
          "description": "Metric values.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceMetricValue"
          },
          "readOnly": true
        },
        "properties": {
          "description": "Properties.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceMetricProperty"
          },
          "readOnly": true
        }
      }
    },
    "ResourceMetricAvailability": {
      "description": "Metrics availability and retention.",
      "type": "object",
      "properties": {
        "timeGrain": {
          "description": "Time grain .",
          "type": "string",
          "readOnly": true
        },
        "retention": {
          "description": "Retention period for the current time grain.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResourceMetricDefinition": {
      "description": "Metadata for the metrics.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "name": {
              "$ref": "#/definitions/ResourceMetricName",
              "description": "Name of the metric.",
              "readOnly": true
            },
            "unit": {
              "description": "Unit of the metric.",
              "type": "string",
              "readOnly": true
            },
            "primaryAggregationType": {
              "description": "Primary aggregation type.",
              "type": "string",
              "readOnly": true
            },
            "metricAvailabilities": {
              "description": "List of time grains supported for the metric together with retention period.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResourceMetricAvailability"
              },
              "readOnly": true
            },
            "resourceUri": {
              "description": "Resource URI.",
              "type": "string",
              "readOnly": true
            },
            "id": {
              "description": "Resource ID.",
              "type": "string",
              "readOnly": true
            },
            "properties": {
              "description": "Properties.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "ResourceMetricName": {
      "description": "Name of a metric for any resource .",
      "type": "object",
      "properties": {
        "value": {
          "description": "metric name value.",
          "type": "string",
          "readOnly": true
        },
        "localizedValue": {
          "description": "Localized metric name value.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResourceMetricProperty": {
      "description": "Resource metric property.",
      "type": "object",
      "properties": {
        "key": {
          "description": "Key for resource metric property.",
          "type": "string"
        },
        "value": {
          "description": "Value of pair.",
          "type": "string"
        }
      }
    },
    "ResourceMetricValue": {
      "description": "Value of resource metric.",
      "type": "object",
      "properties": {
        "timestamp": {
          "description": "Value timestamp.",
          "type": "string",
          "readOnly": true
        },
        "average": {
          "format": "float",
          "description": "Value average.",
          "type": "number",
          "readOnly": true
        },
        "minimum": {
          "format": "float",
          "description": "Value minimum.",
          "type": "number",
          "readOnly": true
        },
        "maximum": {
          "format": "float",
          "description": "Value maximum.",
          "type": "number",
          "readOnly": true
        },
        "total": {
          "format": "float",
          "description": "Value total.",
          "type": "number",
          "readOnly": true
        },
        "count": {
          "format": "float",
          "description": "Value count.",
          "type": "number",
          "readOnly": true
        },
        "properties": {
          "description": "Properties.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceMetricProperty"
          },
          "readOnly": true
        }
      }
    },
    "Site": {
      "description": "A web app, a mobile app backend, or an API app.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "state": {
              "description": "Current state of the app. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "hostNames": {
              "description": "Hostnames associated with the app. Read-only.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            },
            "repositorySiteName": {
              "description": "Name of the repository site. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "usageState": {
              "description": "State indicating whether the app has exceeded its quota usage. Read-only.",
              "enum": [
                "Normal",
                "Exceeded"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "UsageState",
                "modelAsString": false
              }
            },
            "enabled": {
              "description": "<code>true</code> if the app is enabled; otherwise, <code>false</code>. Setting this value to false disables the app (takes the app offline).",
              "type": "boolean"
            },
            "enabledHostNames": {
              "description": "Enabled hostnames for the app. Read-only. Hostnames need to be assigned (see HostNames) AND enabled. Otherwise,\r\n            the app is not served on those hostnames.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            },
            "availabilityState": {
              "description": "Management information availability state for the app. Read-only.",
              "enum": [
                "Normal",
                "Limited",
                "DisasterRecoveryMode"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "SiteAvailabilityState",
                "modelAsString": false
              }
            },
            "hostNameSslStates": {
              "description": "Hostname SSL states are used to manage the SSL bindings for app's hostnames.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HostNameSslState"
              }
            },
            "serverFarmId": {
              "description": "Resource ID of the associated App Service plan, formatted as: \"/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}\".",
              "type": "string"
            },
            "reserved": {
              "description": "<code>true</code> if reserved; otherwise, <code>false</code>.",
              "default": false,
              "type": "boolean",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "lastModifiedTimeUtc": {
              "format": "date-time",
              "description": "Last time the app was modified, in UTC. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "siteConfig": {
              "$ref": "#/definitions/SiteConfig",
              "description": "Configuration of the app."
            },
            "trafficManagerHostNames": {
              "description": "Azure Traffic Manager hostnames associated with the app. Read-only.",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            },
            "premiumAppDeployed": {
              "description": "Indicates whether app is deployed as a premium app. Read-only.",
              "type": "boolean",
              "readOnly": true
            },
            "scmSiteAlsoStopped": {
              "description": "<code>true</code> to stop SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The default is <code>false</code>.",
              "type": "boolean",
              "readOnly": true
            },
            "targetSwapSlot": {
              "description": "Specifies which deployment slot this app will swap into. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "hostingEnvironmentProfile": {
              "$ref": "#/definitions/HostingEnvironmentProfile",
              "description": "App Service Environment to use for the app.",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "microService": {
              "description": "Micro services like apps, logic apps.",
              "default": false,
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "gatewaySiteName": {
              "description": "Name of gateway app associated with the app.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "clientAffinityEnabled": {
              "description": "<code>true</code> to enable client affinity; <code>false</code> to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is <code>true</code>.",
              "type": "boolean"
            },
            "clientCertEnabled": {
              "description": "<code>true</code> to enable client certificate authentication (TLS mutual authentication); otherwise, <code>false</code>. Default is <code>false</code>.",
              "type": "boolean"
            },
            "hostNamesDisabled": {
              "description": "<code>true</code> to disable the public hostnames of the app; otherwise, <code>false</code>.\r\n            If <code>true</code>, the app is only accessible via API management process.",
              "type": "boolean"
            },
            "outboundIpAddresses": {
              "description": "List of IP addresses that the app uses for outbound connections (e.g. database access). Read-only.",
              "type": "string",
              "readOnly": true
            },
            "containerSize": {
              "format": "int32",
              "description": "Size of the function container.",
              "type": "integer"
            },
            "dailyMemoryTimeQuota": {
              "format": "int32",
              "description": "Maximum allowed daily memory-time quota (applicable on dynamic apps only).",
              "type": "integer"
            },
            "suspendedTill": {
              "format": "date-time",
              "description": "App suspended till in case memory-time quota is exceeded.",
              "type": "string",
              "readOnly": true
            },
            "maxNumberOfWorkers": {
              "format": "int32",
              "description": "Maximum number of workers.\r\n            This only applies to Functions container.",
              "type": "integer",
              "readOnly": true
            },
            "cloningInfo": {
              "$ref": "#/definitions/CloningInfo",
              "description": "If specified during app creation, the app is cloned from a source app.",
              "x-ms-mutability": [
                "create"
              ]
            },
            "resourceGroup": {
              "description": "Name of the resource group the app belongs to. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "isDefaultContainer": {
              "description": "<code>true</code> if the app is a default container; otherwise, <code>false</code>. Read-only.",
              "type": "boolean",
              "readOnly": true
            },
            "defaultHostName": {
              "description": "Default hostname of the app. Read-only.",
              "type": "string",
              "readOnly": true
            },
            "slotSwapStatus": {
              "$ref": "#/definitions/SlotSwapStatus",
              "description": "Status of the last deployment slot swap operation.",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "SiteCloneabilityCriterion": {
      "description": "An app cloneability criterion.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of criterion.",
          "type": "string"
        },
        "description": {
          "description": "Description of criterion.",
          "type": "string"
        }
      }
    },
    "SiteConfig": {
      "description": "Configuration of an App Service app.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "numberOfWorkers": {
              "format": "int32",
              "description": "Number of workers.",
              "type": "integer"
            },
            "defaultDocuments": {
              "description": "Default documents.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "netFrameworkVersion": {
              "description": ".NET Framework version.",
              "default": "v4.6",
              "type": "string"
            },
            "phpVersion": {
              "description": "Version of PHP.",
              "type": "string"
            },
            "pythonVersion": {
              "description": "Version of Python.",
              "type": "string"
            },
            "nodeVersion": {
              "description": "Version of Node.js.",
              "type": "string"
            },
            "requestTracingEnabled": {
              "description": "<code>true</code> if request tracing is enabled; otherwise, <code>false</code>.",
              "type": "boolean"
            },
            "requestTracingExpirationTime": {
              "format": "date-time",
              "description": "Request tracing expiration time.",
              "type": "string"
            },
            "remoteDebuggingEnabled": {
              "description": "<code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.",
              "type": "boolean"
            },
            "remoteDebuggingVersion": {
              "description": "Remote debugging version.",
              "type": "string"
            },
            "httpLoggingEnabled": {
              "description": "<code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.",
              "type": "boolean"
            },
            "logsDirectorySizeLimit": {
              "format": "int32",
              "description": "HTTP logs directory size limit.",
              "type": "integer"
            },
            "detailedErrorLoggingEnabled": {
              "description": "<code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.",
              "type": "boolean"
            },
            "publishingUsername": {
              "description": "Publishing user name.",
              "type": "string"
            },
            "machineKey": {
              "$ref": "#/definitions/SiteMachineKey",
              "description": "Site MachineKey.",
              "readOnly": true
            },
            "handlerMappings": {
              "description": "Handler mappings.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HandlerMapping"
              }
            },
            "documentRoot": {
              "description": "Document root.",
              "type": "string"
            },
            "scmType": {
              "description": "SCM type.",
              "type": "string",
              "readOnly": true
            },
            "use32BitWorkerProcess": {
              "description": "<code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.",
              "type": "boolean"
            },
            "webSocketsEnabled": {
              "description": "<code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.",
              "type": "boolean"
            },
            "alwaysOn": {
              "description": "<code>true</code> if Always On is enabled; otherwise, <code>false</code>.",
              "type": "boolean"
            },
            "javaVersion": {
              "description": "Java version.",
              "type": "string"
            },
            "javaContainer": {
              "description": "Java container.",
              "type": "string"
            },
            "javaContainerVersion": {
              "description": "Java container version.",
              "type": "string"
            },
            "appCommandLine": {
              "description": "App command line to launch.",
              "type": "string"
            },
            "managedPipelineMode": {
              "description": "Managed pipeline mode.",
              "enum": [
                "Integrated",
                "Classic"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "ManagedPipelineMode",
                "modelAsString": false
              }
            },
            "virtualApplications": {
              "description": "Virtual applications.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/VirtualApplication"
              }
            },
            "loadBalancing": {
              "description": "Site load balancing.",
              "enum": [
                "WeightedRoundRobin",
                "LeastRequests",
                "LeastResponseTime",
                "WeightedTotalTraffic",
                "RequestHash"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "SiteLoadBalancing",
                "modelAsString": false
              }
            },
            "experiments": {
              "$ref": "#/definitions/Experiments",
              "description": "This is work around for polymophic types."
            },
            "limits": {
              "$ref": "#/definitions/SiteLimits",
              "description": "Site limits."
            },
            "autoHealEnabled": {
              "description": "<code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.",
              "type": "boolean"
            },
            "autoHealRules": {
              "$ref": "#/definitions/AutoHealRules",
              "description": "Auto Heal rules."
            },
            "tracingOptions": {
              "description": "Tracing options.",
              "type": "string"
            },
            "vnetName": {
              "description": "Virtual Network name.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "cors": {
              "$ref": "#/definitions/CorsSettings",
              "description": "Cross-Origin Resource Sharing (CORS) settings."
            },
            "push": {
              "$ref": "#/definitions/PushSettings",
              "description": "Push endpoint settings."
            },
            "apiDefinition": {
              "$ref": "#/definitions/ApiDefinitionInfo",
              "description": "Information about the formal API definition for the app."
            },
            "autoSwapSlotName": {
              "description": "Auto-swap slot name.",
              "type": "string"
            },
            "localMySqlEnabled": {
              "description": "<code>true</code> to enable local MySQL; otherwise, <code>false</code>.",
              "default": false,
              "type": "boolean"
            },
            "ipSecurityRestrictions": {
              "description": "IP security restrictions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/IpSecurityRestriction"
              }
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "SiteInstance": {
      "description": "Instance of an app.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "name": {
              "description": "Name of instance.",
              "type": "string",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "SiteLimits": {
      "description": "Metric limits set on an app.",
      "type": "object",
      "properties": {
        "maxPercentageCpu": {
          "format": "double",
          "description": "Maximum allowed CPU usage percentage.",
          "type": "number"
        },
        "maxMemoryInMb": {
          "format": "int64",
          "description": "Maximum allowed memory usage in MB.",
          "type": "integer"
        },
        "maxDiskSizeInMb": {
          "format": "int64",
          "description": "Maximum allowed disk size usage in MB.",
          "type": "integer"
        }
      }
    },
    "SiteMachineKey": {
      "description": "MachineKey of an app.",
      "type": "object",
      "properties": {
        "validation": {
          "description": "MachineKey validation.",
          "type": "string"
        },
        "validationKey": {
          "description": "Validation key.",
          "type": "string"
        },
        "decryption": {
          "description": "Decryption.",
          "type": "string"
        },
        "decryptionKey": {
          "description": "Decryption key.",
          "type": "string"
        }
      }
    },
    "SkuCapacity": {
      "description": "Description of the App Service plan scale options.",
      "type": "object",
      "properties": {
        "minimum": {
          "format": "int32",
          "description": "Minimum number of workers for this App Service plan SKU.",
          "type": "integer"
        },
        "maximum": {
          "format": "int32",
          "description": "Maximum number of workers for this App Service plan SKU.",
          "type": "integer"
        },
        "default": {
          "format": "int32",
          "description": "Default number of workers for this App Service plan SKU.",
          "type": "integer"
        },
        "scaleType": {
          "description": "Available scale configurations for an App Service plan.",
          "type": "string"
        }
      }
    },
    "SkuDescription": {
      "description": "Description of a SKU for a scalable resource.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the resource SKU.",
          "type": "string"
        },
        "tier": {
          "description": "Service tier of the resource SKU.",
          "type": "string"
        },
        "size": {
          "description": "Size specifier of the resource SKU.",
          "type": "string"
        },
        "family": {
          "description": "Family code of the resource SKU.",
          "type": "string"
        },
        "capacity": {
          "format": "int32",
          "description": "Current number of instances assigned to the resource.",
          "type": "integer"
        },
        "skuCapacity": {
          "$ref": "#/definitions/SkuCapacity",
          "description": "Min, max, and default scale values of the SKU."
        },
        "locations": {
          "description": "Locations of the SKU.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "capabilities": {
          "description": "Capabilities of the SKU, e.g., is traffic manager enabled?",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Capability"
          }
        }
      }
    },
    "SkuInfo": {
      "description": "SKU discovery information.",
      "type": "object",
      "properties": {
        "resourceType": {
          "description": "Resource type that this SKU applies to.",
          "type": "string"
        },
        "sku": {
          "$ref": "#/definitions/SkuDescription",
          "description": "Name and tier of the SKU."
        },
        "capacity": {
          "$ref": "#/definitions/SkuCapacity",
          "description": "Min, max, and default scale values of the SKU."
        }
      }
    },
    "SlotDifference": {
      "description": "A setting difference between two deployment slots of an app.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "type": {
              "description": "Type of the difference: Information, Warning or Error.",
              "type": "string",
              "readOnly": true
            },
            "settingType": {
              "description": "The type of the setting: General, AppSetting or ConnectionString.",
              "type": "string",
              "readOnly": true
            },
            "diffRule": {
              "description": "Rule that describes how to process the setting difference during a slot swap.",
              "type": "string",
              "readOnly": true
            },
            "settingName": {
              "description": "Name of the setting.",
              "type": "string",
              "readOnly": true
            },
            "valueInCurrentSlot": {
              "description": "Value of the setting in the current slot.",
              "type": "string",
              "readOnly": true
            },
            "valueInTargetSlot": {
              "description": "Value of the setting in the target slot.",
              "type": "string",
              "readOnly": true
            },
            "description": {
              "description": "Description of the setting difference.",
              "type": "string",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "SlotSwapStatus": {
      "description": "The status of the last successfull slot swap operation.",
      "type": "object",
      "properties": {
        "timestampUtc": {
          "format": "date-time",
          "description": "The time the last successful slot swap completed.",
          "type": "string",
          "readOnly": true
        },
        "sourceSlotName": {
          "description": "The source slot of the last swap operation.",
          "type": "string",
          "readOnly": true
        },
        "destinationSlotName": {
          "description": "The destination slot of the last swap operation.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SlowRequestsBasedTrigger": {
      "description": "Trigger based on request execution time.",
      "type": "object",
      "properties": {
        "timeTaken": {
          "description": "Time taken.",
          "type": "string"
        },
        "count": {
          "format": "int32",
          "description": "Count.",
          "type": "integer"
        },
        "timeInterval": {
          "description": "Time interval.",
          "type": "string"
        }
      }
    },
    "Snapshot": {
      "description": "A snapshot of an app.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "time": {
              "format": "date-time",
              "description": "The time the snapshot was taken.",
              "type": "string",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "SourceControl": {
      "description": "The source control OAuth token.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "name": {
              "description": "Name or source control type.",
              "type": "string"
            },
            "token": {
              "description": "OAuth access token.",
              "type": "string"
            },
            "tokenSecret": {
              "description": "OAuth access token secret.",
              "type": "string"
            },
            "refreshToken": {
              "description": "OAuth refresh token.",
              "type": "string"
            },
            "expirationTime": {
              "format": "date-time",
              "description": "OAuth token expiration.",
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "StampCapacity": {
      "description": "Stamp capacity information.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the stamp.",
          "type": "string"
        },
        "availableCapacity": {
          "format": "int64",
          "description": "Available capacity (# of machines, bytes of storage etc...).",
          "type": "integer"
        },
        "totalCapacity": {
          "format": "int64",
          "description": "Total capacity (# of machines, bytes of storage etc...).",
          "type": "integer"
        },
        "unit": {
          "description": "Name of the unit.",
          "type": "string"
        },
        "computeMode": {
          "description": "Shared/dedicated workers.",
          "enum": [
            "Shared",
            "Dedicated",
            "Dynamic"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ComputeModeOptions",
            "modelAsString": false
          }
        },
        "workerSize": {
          "description": "Size of the machines.",
          "enum": [
            "Default",
            "Small",
            "Medium",
            "Large"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "WorkerSizeOptions",
            "modelAsString": false
          }
        },
        "workerSizeId": {
          "format": "int32",
          "description": "Size ID of machines: \r\n            0 - Small\r\n            1 - Medium\r\n            2 - Large",
          "type": "integer"
        },
        "excludeFromCapacityAllocation": {
          "description": "If <code>true</code>, it includes basic apps.\r\n            Basic apps are not used for capacity allocation.",
          "type": "boolean"
        },
        "isApplicableForAllComputeModes": {
          "description": "<code>true</code> if capacity is applicable for all apps; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "siteMode": {
          "description": "Shared or Dedicated.",
          "type": "string"
        }
      }
    },
    "StatusCodesBasedTrigger": {
      "description": "Trigger based on status code.",
      "type": "object",
      "properties": {
        "status": {
          "format": "int32",
          "description": "HTTP status code.",
          "type": "integer"
        },
        "subStatus": {
          "format": "int32",
          "description": "SubStatus.",
          "type": "integer"
        },
        "win32Status": {
          "format": "int32",
          "description": "Win32 error code.",
          "type": "integer"
        },
        "count": {
          "format": "int32",
          "description": "Count.",
          "type": "integer"
        },
        "timeInterval": {
          "description": "Time interval.",
          "type": "string"
        }
      }
    },
    "TldLegalAgreement": {
      "description": "Legal agreement for a top level domain.",
      "type": "object",
      "properties": {
        "agreementKey": {
          "description": "Unique identifier for the agreement.",
          "type": "string"
        },
        "title": {
          "description": "Agreement title.",
          "type": "string"
        },
        "content": {
          "description": "Agreement details.",
          "type": "string"
        },
        "url": {
          "description": "URL where a copy of the agreement details is hosted.",
          "type": "string"
        }
      }
    },
    "TopLevelDomain": {
      "description": "A top level domain object.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "name": {
              "description": "Name of the top level domain.",
              "type": "string",
              "readOnly": true
            },
            "privacy": {
              "description": "If <code>true</code>, then the top level domain supports domain privacy; otherwise, <code>false</code>.",
              "type": "boolean",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "Usage": {
      "description": "Usage of the quota resource.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "displayName": {
              "description": "Friendly name shown in the UI.",
              "type": "string",
              "readOnly": true
            },
            "name": {
              "description": "Name of the quota.",
              "type": "string",
              "readOnly": true
            },
            "resourceName": {
              "description": "Name of the quota resource.",
              "type": "string",
              "readOnly": true
            },
            "unit": {
              "description": "Units of measurement for the quota resource.",
              "type": "string",
              "readOnly": true
            },
            "currentValue": {
              "format": "int64",
              "description": "The current value of the resource counter.",
              "type": "integer",
              "readOnly": true
            },
            "limit": {
              "format": "int64",
              "description": "The resource limit.",
              "type": "integer",
              "readOnly": true
            },
            "nextResetTime": {
              "format": "date-time",
              "description": "Next reset time for the resource counter.",
              "type": "string",
              "readOnly": true
            },
            "computeMode": {
              "description": "Compute mode used for this usage.",
              "enum": [
                "Shared",
                "Dedicated",
                "Dynamic"
              ],
              "type": "string",
              "readOnly": true,
              "x-ms-enum": {
                "name": "ComputeModeOptions",
                "modelAsString": false
              }
            },
            "siteMode": {
              "description": "Site mode used for this usage.",
              "type": "string",
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "ValidateProperties": {
      "description": "App properties used for validation.",
      "type": "object",
      "properties": {
        "serverFarmId": {
          "description": "ARM resource ID of an App Service plan that would host the app.",
          "type": "string"
        },
        "skuName": {
          "description": "Name of the target SKU for the App Service plan.",
          "type": "string"
        },
        "needLinuxWorkers": {
          "description": "<code>true</code> if App Service plan is for Linux workers; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "capacity": {
          "format": "int32",
          "description": "Target capacity of the App Service plan (number of VM's).",
          "type": "integer"
        },
        "hostingEnvironment": {
          "description": "Name of App Service Environment where app or App Service plan should be created.",
          "type": "string"
        }
      }
    },
    "ValidateResponseError": {
      "description": "Error details for when validation fails.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Validation error code.",
          "type": "string"
        },
        "message": {
          "description": "Validation error message.",
          "type": "string"
        }
      }
    },
    "VirtualApplication": {
      "description": "Virtual application in an app.",
      "type": "object",
      "properties": {
        "virtualPath": {
          "description": "Virtual path.",
          "type": "string"
        },
        "physicalPath": {
          "description": "Physical path.",
          "type": "string"
        },
        "preloadEnabled": {
          "description": "<code>true</code> if preloading is enabled; otherwise, <code>false</code>.",
          "type": "boolean"
        },
        "virtualDirectories": {
          "description": "Virtual directories for virtual application.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualDirectory"
          }
        }
      }
    },
    "VirtualDirectory": {
      "description": "Directory for virtual application.",
      "type": "object",
      "properties": {
        "virtualPath": {
          "description": "Path to virtual application.",
          "type": "string"
        },
        "physicalPath": {
          "description": "Physical path.",
          "type": "string"
        }
      }
    },
    "VirtualIPMapping": {
      "description": "Virtual IP mapping.",
      "type": "object",
      "properties": {
        "virtualIP": {
          "description": "Virtual IP address.",
          "type": "string"
        },
        "internalHttpPort": {
          "format": "int32",
          "description": "Internal HTTP port.",
          "type": "integer"
        },
        "internalHttpsPort": {
          "format": "int32",
          "description": "Internal HTTPS port.",
          "type": "integer"
        },
        "inUse": {
          "description": "Is virtual IP mapping in use.",
          "type": "boolean"
        }
      }
    },
    "VirtualNetworkProfile": {
      "description": "Specification for using a Virtual Network.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Resource id of the Virtual Network.",
          "type": "string"
        },
        "name": {
          "description": "Name of the Virtual Network (read-only).",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "Resource type of the Virtual Network (read-only).",
          "type": "string",
          "readOnly": true
        },
        "subnet": {
          "description": "Subnet within the Virtual Network.",
          "type": "string"
        }
      }
    },
    "VnetInfo": {
      "description": "Virtual Network information contract.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "vnetResourceId": {
              "description": "The Virtual Network's resource ID.",
              "type": "string"
            },
            "certThumbprint": {
              "description": "The client certificate thumbprint.",
              "type": "string",
              "readOnly": true
            },
            "certBlob": {
              "description": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \r\n            Point-To-Site VPN connection.",
              "type": "string"
            },
            "routes": {
              "description": "The routes that this Virtual Network connection uses.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/VnetRoute"
              },
              "readOnly": true
            },
            "resyncRequired": {
              "description": "<code>true</code> if a resync is required; otherwise, <code>false</code>.",
              "type": "boolean",
              "readOnly": true
            },
            "dnsServers": {
              "description": "DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.",
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "VnetRoute": {
      "description": "Virtual Network route contract used to pass routing information for a Virtual Network.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "name": {
              "description": "The name of this route. This is only returned by the server and does not need to be set by the client.",
              "type": "string",
              "x-ms-mutability": [
                "create",
                "read"
              ]
            },
            "startAddress": {
              "description": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
              "type": "string"
            },
            "endAddress": {
              "description": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
              "type": "string"
            },
            "routeType": {
              "description": "The type of route this is:\r\n            DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918\r\n            INHERITED - Routes inherited from the real Virtual Network routes\r\n            STATIC - Static route set on the app only\r\n            \r\n            These values will be used for syncing an app's routes with those from a Virtual Network. This operation will clear all DEFAULT and INHERITED routes and replace them\r\n            with new INHERITED routes.",
              "type": "string"
            }
          },
          "x-ms-client-flatten": true
        }
      }
    },
    "WorkerPool": {
      "description": "Worker pool of an App Service Environment.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "properties": {
        "properties": {
          "description": "ARM envelope properties",
          "properties": {
            "workerSizeId": {
              "format": "int32",
              "description": "Worker size ID for referencing this worker pool.",
              "type": "integer"
            },
            "computeMode": {
              "description": "Shared or dedicated app hosting.",
              "enum": [
                "Shared",
                "Dedicated",
                "Dynamic"
              ],
              "type": "string",
              "x-ms-enum": {
                "name": "ComputeModeOptions",
                "modelAsString": false
              }
            },
            "workerSize": {
              "description": "VM size of the worker pool instances.",
              "type": "string"
            },
            "workerCount": {
              "format": "int32",
              "description": "Number of instances in the worker pool.",
              "type": "integer"
            },
            "instanceNames": {
              "description": "Names of all instances in the worker pool (read only).",
              "type": "array",
              "items": {
                "type": "string"
              },
              "readOnly": true
            }
          },
          "x-ms-client-flatten": true
        },
        "sku": {
          "$ref": "#/definitions/SkuDescription"
        }
      }
    }
  },
  "parameters": {
    "subscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "description": "Your Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).",
      "required": true,
      "type": "string"
    },
    "resourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "description": "Name of the resource group to which the resource belongs.",
      "required": true,
      "type": "string",
      "maxLength": 90,
      "minLength": 1,
      "pattern": "^[-\\\\w\\\\._\\\\(\\\\)]+[^\\\\.]$"
    },
    "apiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "API Version",
      "required": true,
      "type": "string"
    }
  },
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "description": "Azure Active Directory OAuth2 Flow",
      "flow": "implicit",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ]
}