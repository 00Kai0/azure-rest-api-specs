{
    "swagger": "2.0",
    "info": {
        "title": "MobileEngagementClient",
        "description": "The wrapper for the Mobile Engagement REST APIs.",
        "version": "2014-12-01"
    },
    "host": "management.azure.com",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices": {
            "get": {
                "tags": [
                    "Device"
                ],
                "operationId": "Devices_QueryDevice",
                "description": "Query the information associated to the devices running an application.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    },
                    {
                        "$ref": "#/parameters/AppNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Number of devices to return with each call. Defaults to 100 and cannot return more. Passing a greater value is ignored.\nThe response contains a `nextLink` property describing the URI path to get the next page of results if not all results could be returned at once."
                    },
                    {
                        "name": "$select",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "By default all `meta` and `appInfo` properties are returned, this property is used to restrict the output to the desired properties.\nIt also excludes all devices from the output that have none of the selected properties.\nIn other terms, only devices having at least one of the selected property being set is part of the results.\nExamples:\n- `$select=appInfo` : select all devices having at least 1 appInfo, return them all and donâ€™t return any meta property.\n- `$select=meta` : return only meta properties in the output.\n- `$select=appInfo,meta/firstSeen,meta/lastSeen` : return all `appInfo`, plus meta object containing only firstSeen and lastSeen properties.\nThe format is thus a comma separated list of properties to select.\nUse `appInfo` to select all appInfo properties, `meta` to select all meta properties.\nUse `appInfo/{key}` and `meta/{key}` to select specific appInfo and meta properties."
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Filter can be used to reduce the number of results.\nFilter is a boolean expression that can look like the following examples:\n* `$filter=deviceId gt 'abcdef0123456789abcdef0123456789'`\n* `$filter=lastModified le 1447284263690L`\n* `$filter=(deviceId ge 'abcdef0123456789abcdef0123456789') and (deviceId lt 'bacdef0123456789abcdef0123456789') and (lastModified gt 1447284263690L)`\nThe first example is used automatically for paging when returning the `nextLink` property.\nThe filter expression is a combination of checks on some properties that can be compared to their value.\nThe available operators are:\n* `gt`  : greater than * `ge`  : greater than or equals * `lt`  : less than * `le`  : less than or equals * `and` : to add multiple checks (all checks must pass), optional parentheses can be used.\nThe properties that can be used in the expression are the following:\n* `deviceId {operator} '{deviceIdValue}'` : a lexicographical comparison is made on the deviceId value, use single quotes for the value. * `lastModified {operator} {number}L` : returns only meta properties or appInfo properties whose last value modification timestamp compared to the specified value is matching (value is milliseconds since January 1st, 1970 UTC).\nPlease note the `L` character after the number of milliseconds, its required when the number of milliseconds exceeds `2^31 - 1` (which is always the case for recent timestamps).\nUsing `lastModified` excludes all devices from the output that have no property matching the timestamp criteria, like `$select`.\nPlease note that the internal value of `lastModified` timestamp for a given property is never part of the results."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "If successful, the response has a 200 status code and a JSON object describing a collection of devices in the body.",
                        "schema": {
                            "$ref": "#/definitions/DevicesQueryResult"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled. Check response body for details.\n* `401`: Authentication error.",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/{deviceid}": {
            "get": {
                "tags": [
                    "Device"
                ],
                "operationId": "Devices_GetByDeviceId",
                "description": "Get the information associated to a device running an application.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    },
                    {
                        "$ref": "#/parameters/AppNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "name": "deviceid",
                        "in": "path",
                        "description": "Device identifier.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, device is returned.",
                        "schema": {
                            "$ref": "#/definitions/Device"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled. Check response body for details.\n* `401`: Authentication error.\n* `404`: Device not found.\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/users/{userid}": {
            "get": {
                "tags": [
                    "Device"
                ],
                "operationId": "Devices_GetByUserId",
                "description": "Get the information associated to a device running an application using the `userId`.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    },
                    {
                        "$ref": "#/parameters/AppNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "name": "userid",
                        "in": "path",
                        "description": "User identifier.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, device is returned.",
                        "schema": {
                            "$ref": "#/definitions/Device"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled. Check response body for details.\n* `401`: Authentication error.\n* `404`: User not found.\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.MobileEngagement/appCollections": {
            "get": {
                "tags": [
                    "AppCollections",
                    "List"
                ],
                "operationId": "AppCollections_List",
                "description": "Lists app collections in a subscription.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AppCollectionListResult"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps": {
            "get": {
                "operationId": "Apps_List",
                "description": "Lists apps in an appCollection.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AppListResult"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.MobileEngagement/supportedPlatforms": {
            "get": {
                "tags": [
                    "List"
                ],
                "operationId": "SupportedPlatforms_List",
                "description": "Lists supported platforms for Engagement applications.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/SupportedPlatformsListResult"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/providers/Microsoft.MobileEngagement/checkAppCollectionNameAvailability": {
            "post": {
                "operationId": "CheckAppCollectionNameAvailability",
                "description": "Checks DNS availability of a name in the Engagement domain.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "name": "parameters",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AppCollectionNameAvailability"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/AppCollectionNameAvailability"
                        }
                    },
                    "default": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}": {
            "get": {
                "tags": [
                    "Campaign",
                    "List"
                ],
                "operationId": "Campaigns_List",
                "description": "Get the list of campaigns.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    },
                    {
                        "$ref": "#/parameters/AppNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "name": "kind",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "announcements",
                            "polls",
                            "dataPushes",
                            "nativePushes"
                        ],
                        "description": "Campaign kind."
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Control paging of campaigns, start results at the given offset, defaults to 0 (1st page of data)."
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "required": false,
                        "type": "integer",
                        "description": "Control paging of campaigns, number of campaigns to return with each call. It returns all campaigns by default.\nWhen specifying $top parameter, the response contains a `nextLink` property describing the path to get the next page if there are more results."
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Filter can be used to restrict the results to campaigns matching a specific state.\nThe syntax is `$filter=state eq 'draft'`.\nValid state values are: draft, scheduled, in-progress, and finished.\nOnly the eq operator and the state property are supported."
                    },
                    {
                        "name": "$orderby",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Sort results by an expression which looks like `$orderby=id asc` (this example is actually the default behavior).\nThe syntax is orderby={property} {direction} or just orderby={property}.\nThe available sorting properties are id, name, state, activatedDate, and finishedDate.\nThe available directions are asc (for ascending order) and desc (for descending order).\nWhen not specified the asc direction is used.\nOnly one property at a time can be used for sorting."
                    },
                    {
                        "name": "$search",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "description": "Restrict results to campaigns matching the optional `search` expression.\nThis currently performs the search based on the name on the campaign only, case insensitive.\nIf the campaign contains the value of the `search` parameter anywhere in the name, it matches."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, campaigns are returned as JSON.",
                        "schema": {
                            "$ref": "#/definitions/CampaignsListResult"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled. Check response body for details.\n* `401`: Authentication error.",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Campaign",
                    "CRUD"
                ],
                "operationId": "Campaigns_Create",
                "description": "Create a Reach campaign (announcement, poll, data push or native push).",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    },
                    {
                        "$ref": "#/parameters/AppNameParameter"
                    },
                    {
                        "name": "kind",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "announcements",
                            "polls",
                            "dataPushes",
                            "nativePushes"
                        ],
                        "description": "Campaign kind."
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "name": "parameters",
                        "in": "body",
                        "description": "Parameters supplied to the Update Campaign operation.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Campaign"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Success, campaign is returned.",
                        "schema": {
                            "$ref": "#/definitions/CampaignStateResult"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "URL path to get the created campaign."
                            }
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled. Check response body for details.\n* `401`: Authentication error.\n* `409`: Another campaign with the same name already exists.\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}": {
            "parameters": [
                {
                    "$ref": "#/parameters/SubscriptionIdParameter"
                },
                {
                    "$ref": "#/parameters/ResourceGroupNameParameter"
                },
                {
                    "$ref": "#/parameters/AppCollectionParameter"
                },
                {
                    "$ref": "#/parameters/AppNameParameter"
                },
                {
                    "$ref": "#/parameters/ApiVersionParameter"
                }
            ],
            "get": {
                "tags": [
                    "Campaign",
                    "CRUD"
                ],
                "operationId": "Campaigns_Get",
                "description": "The Get campaign operation retrieves information about a previously created campaign.",
                "parameters": [
                    {
                        "name": "kind",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "announcements",
                            "polls",
                            "dataPushes",
                            "nativePushes"
                        ],
                        "description": "Campaign kind."
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "Campaign identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, campaign is returned.",
                        "schema": {
                            "$ref": "#/definitions/CampaignResult"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled. Check response body for details.\n* `401`: Authentication error.\n* `404`: Campaign not found.\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Campaign",
                    "CRUD"
                ],
                "operationId": "Campaigns_Update",
                "description": "Update an existing Reach campaign (announcement, poll, data push or native push).",
                "parameters": [
                    {
                        "name": "kind",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "announcements",
                            "polls",
                            "dataPushes",
                            "nativePushes"
                        ],
                        "description": "Campaign kind."
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "Campaign identifier."
                    },
                    {
                        "name": "parameters",
                        "in": "body",
                        "description": "Parameters supplied to the Update Campaign operation.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Campaign"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated successfully.",
                        "schema": {
                            "$ref": "#/definitions/CampaignStateResult"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled or campaign is not in `draft` state.\n* `401`: Authentication error.\n* `404`: Campaign not found.\n* `409`: Another campaign with the same name already exists.\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Campaign",
                    "CRUD"
                ],
                "operationId": "Campaigns_Delete",
                "description": "Delete a campaign previously created by a call to Create campaign.",
                "parameters": [
                    {
                        "name": "kind",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "announcements",
                            "polls",
                            "dataPushes",
                            "nativePushes"
                        ],
                        "description": "Campaign kind."
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "Campaign identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted successfully."
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled or campaign is not in `finished` state.\n* `401`: Authentication error.\n* `404`: Campaign not found.\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaignsByName/{kind}/{name}": {
            "get": {
                "tags": [
                    "Campaign",
                    "CRUD"
                ],
                "operationId": "Campaigns_GetByName",
                "description": "The Get campaign operation retrieves information about a previously created campaign.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    },
                    {
                        "$ref": "#/parameters/AppNameParameter"
                    },
                    {
                        "name": "kind",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "announcements",
                            "polls",
                            "dataPushes",
                            "nativePushes"
                        ],
                        "description": "Campaign kind."
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Campaign name.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, campaign is returned.",
                        "schema": {
                            "$ref": "#/definitions/CampaignResult"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled. Check response body for details.\n* `401`: Authentication error.\n* `404`: Campaign not found.\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/test": {
            "post": {
                "tags": [
                    "Campaign",
                    "Test"
                ],
                "operationId": "Campaigns_TestSaved",
                "description": "Test an existing campaign (created with Create campaign) on a set of devices.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    },
                    {
                        "$ref": "#/parameters/AppNameParameter"
                    },
                    {
                        "name": "kind",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "announcements",
                            "polls",
                            "dataPushes",
                            "nativePushes"
                        ],
                        "description": "Campaign kind."
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "Campaign identifier."
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "name": "parameters",
                        "in": "body",
                        "description": "Parameters supplied to the Test Campaign operation.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CampaignTestSavedParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test campaign queued successfully.",
                        "schema": {
                            "$ref": "#/definitions/CampaignStateResult"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled. Check response body for details.\n* `401`: Authentication error.\n* `404`: Campaign not found.\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/test": {
            "post": {
                "tags": [
                    "Campaign",
                    "Test"
                ],
                "operationId": "Campaigns_TestNew",
                "description": "Test a new campaign on a set of devices.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    },
                    {
                        "$ref": "#/parameters/AppNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "name": "kind",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "announcements",
                            "polls",
                            "dataPushes",
                            "nativePushes"
                        ],
                        "description": "Campaign kind."
                    },
                    {
                        "name": "parameters",
                        "in": "body",
                        "description": "Parameters supplied to the Test Campaign operation.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CampaignTestNewParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Test campaign queued successfully.",
                        "schema": {
                            "$ref": "#/definitions/CampaignState"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled. Check response body for details.\n* `401`: Authentication error.\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/activate": {
            "post": {
                "tags": [
                    "Campaign",
                    "Action"
                ],
                "operationId": "Campaigns_Activate",
                "description": "Activate a campaign previously created by a call to Create campaign.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    },
                    {
                        "$ref": "#/parameters/AppNameParameter"
                    },
                    {
                        "name": "kind",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "announcements",
                            "polls",
                            "dataPushes",
                            "nativePushes"
                        ],
                        "description": "Campaign kind."
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "Campaign identifier."
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Activated successfully.",
                        "schema": {
                            "$ref": "#/definitions/CampaignStateResult"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled or campaign not in `draft` state.\n* `401`: Authentication error.\n* `404`: Campaign not found.\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/suspend": {
            "post": {
                "tags": [
                    "Campaign",
                    "Action"
                ],
                "operationId": "Campaigns_Suspend",
                "description": "Suspend a Reach campaign previously activated by a call to Activate campaign.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    },
                    {
                        "$ref": "#/parameters/AppNameParameter"
                    },
                    {
                        "name": "kind",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "announcements",
                            "polls",
                            "dataPushes",
                            "nativePushes"
                        ],
                        "description": "Campaign kind."
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "Campaign identifier."
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Suspended successfully.",
                        "schema": {
                            "$ref": "#/definitions/CampaignStateResult"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled or campaign not in `scheduled` state.\n* `401`: Authentication error.\n* `404`: Campaign not found.\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/push": {
            "post": {
                "tags": [
                    "Campaign",
                    "Action"
                ],
                "operationId": "Campaigns_Push",
                "description": "Push a previously saved campaign (created with Create campaign) to a set of devices.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    },
                    {
                        "$ref": "#/parameters/AppNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "name": "kind",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "announcements",
                            "polls",
                            "dataPushes",
                            "nativePushes"
                        ],
                        "description": "Campaign kind."
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "Campaign identifier."
                    },
                    {
                        "name": "parameters",
                        "in": "body",
                        "description": "Parameters supplied to the Push Campaign operation.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CampaignPushParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK, response body includes rejected devices.",
                        "schema": {
                            "$ref": "#/definitions/CampaignPushResult"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled or campaign not in `in progress` state or `pushMode` is not `manual`.\n* `401`: Authentication error.\n* `404`: Campaign not found.\n* `413`: Too many device identifiers (current limit is 1000), or request body too large.\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/statistics": {
            "parameters": [
                {
                    "$ref": "#/parameters/SubscriptionIdParameter"
                },
                {
                    "$ref": "#/parameters/ResourceGroupNameParameter"
                },
                {
                    "$ref": "#/parameters/AppCollectionParameter"
                },
                {
                    "$ref": "#/parameters/AppNameParameter"
                },
                {
                    "$ref": "#/parameters/ApiVersionParameter"
                }
            ],
            "get": {
                "tags": [
                    "Campaign"
                ],
                "operationId": "Campaigns_GetStatistics",
                "description": "Get all the campaign statistics.",
                "parameters": [
                    {
                        "name": "kind",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "announcements",
                            "polls",
                            "dataPushes",
                            "nativePushes"
                        ],
                        "description": "Campaign kind."
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "Campaign identifier."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, statistics are returned as JSON.",
                        "schema": {
                            "$ref": "#/definitions/CampaignStatisticsResult"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled. Check response body for details.\n* `401`: Authentication error.\n* `404`: Campaign not found.\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/campaigns/{kind}/{id}/finish": {
            "post": {
                "tags": [
                    "Campaign",
                    "Action"
                ],
                "operationId": "Campaigns_Finish",
                "description": "Finish a Reach campaign previously activated by a call to Activate campaign.",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    },
                    {
                        "$ref": "#/parameters/AppNameParameter"
                    },
                    {
                        "name": "kind",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "announcements",
                            "polls",
                            "dataPushes",
                            "nativePushes"
                        ],
                        "description": "Campaign kind."
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "integer",
                        "description": "Campaign identifier."
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Finished successfully.",
                        "schema": {
                            "$ref": "#/definitions/CampaignStateResult"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled or campaign not in `in progress` state.\n* `401`: Authentication error.\n* `404`: Campaign not found.\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/devices/tag": {
            "post": {
                "tags": [
                    "Device"
                ],
                "operationId": "Devices_TagByDeviceId",
                "description": "Update the tags registered for a set of devices running an application.\nUpdates are performed asynchronously, meaning that a few seconds are needed before the modifications appear in the results of the Get device command.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    },
                    {
                        "$ref": "#/parameters/AppNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "name": "parameters",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeviceTagsParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, invalid device identifiers are returned.",
                        "schema": {
                            "$ref": "#/definitions/DeviceTagsResult"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled. Check response body for details.\n* `401`: Authentication error.\n* `413`: Can be caused by having too many device identifiers (current limit is 1000).\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileEngagement/appcollections/{appCollection}/apps/{appName}/users/tag": {
            "post": {
                "tags": [
                    "Device"
                ],
                "operationId": "Devices_TagByUserId",
                "description": "Update the tags registered for a set of users running an application.\nUpdates are performed asynchronously, meaning that a few seconds are needed before the modifications appear in the results of the Get device command.\n",
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionIdParameter"
                    },
                    {
                        "$ref": "#/parameters/ResourceGroupNameParameter"
                    },
                    {
                        "$ref": "#/parameters/AppCollectionParameter"
                    },
                    {
                        "$ref": "#/parameters/AppNameParameter"
                    },
                    {
                        "$ref": "#/parameters/ApiVersionParameter"
                    },
                    {
                        "name": "parameters",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeviceTagsParameters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success, invalid user identifiers are returned.",
                        "schema": {
                            "$ref": "#/definitions/DeviceTagsResult"
                        }
                    },
                    "default": {
                        "description": "* `400`: Invalid parameters or application is disabled. Check response body for details.\n* `401`: Authentication error.\n* `413`: Can be caused by having too many user identifiers (current limit is 1000).\n",
                        "schema": {
                            "$ref": "#/definitions/ApiError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ApiError": {
            "properties": {
                "error": {
                    "type": "object",
                    "properties": {
                        "code": {
                            "type": "string"
                        },
                        "message": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "AppListResult": {
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/App"
                    },
                    "description": "The list of Apps and their properties."
                }
            },
            "description": "The list Apps operation response."
        },
        "App": {
            "properties": {
                "properties": {
                    "$ref": "#/definitions/AppProperties"
                }
            },
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                }
            ],
            "description": "The Mobile Engagement App resource."
        },
        "AppProperties": {
            "properties": {
                "backendId": {
                    "type": "string",
                    "description": "The application unique identifier."
                },
                "platform": {
                    "type": "string",
                    "description": "The platform of the app."
                },
                "appState": {
                    "type": "string",
                    "description": "The state of the application."
                }
            }
        },
        "AppCollectionListResult": {
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AppCollection"
                    },
                    "description": "The list of AppCollections and their properties."
                }
            },
            "description": "The list AppCollections operation response."
        },
        "AppCollection": {
            "properties": {
                "properties": {
                    "$ref": "#/definitions/AppCollectionProperties"
                }
            },
            "allOf": [
                {
                    "$ref": "#/definitions/Resource"
                }
            ],
            "description": "The AppCollection resource."
        },
        "AppCollectionProperties": {
            "properties": {
                "provisioningState": {
                    "type": "string",
                    "description": "Mobile Engagement AppCollection Properties.",
                    "enum": [
                        "Creating",
                        "Succeeded"
                    ],
                    "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": "True"
                    }
                }
            }
        },
        "AppCollectionNameAvailability": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name."
                },
                "available": {
                    "type": "boolean",
                    "description": "Available."
                },
                "unavailabilityReason": {
                    "type": "string",
                    "description": "UnavailabilityReason."
                }
            }
        },
        "SupportedPlatformsListResult": {
            "properties": {
                "platforms": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of supported platforms."
                }
            }
        },
        "Resource": {
            "properties": {
                "id": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Resource Id"
                },
                "name": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Resource name"
                },
                "type": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Resource type"
                },
                "location": {
                    "type": "string",
                    "description": "Resource location"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Resource tags"
                }
            },
            "required": [
                "location"
            ],
            "x-ms-azure-resource": true
        },
        "CampaignTestSavedParameters": {
            "required": [
                "deviceId"
            ],
            "properties": {
                "deviceId": {
                    "type": "string",
                    "description": "Device identifier (as returned by the SDK)."
                },
                "lang": {
                    "type": "string",
                    "description": "The language to test expressed using ISO 639-1 code. The default language of the campaign will be used if the parameter is not provided."
                }
            }
        },
        "CampaignTestNewParameters": {
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "$ref": "#/definitions/Campaign"
                }
            },
            "allOf": [
                {
                    "$ref": "#/definitions/CampaignTestSavedParameters"
                }
            ]
        },
        "CampaignPushParameters": {
            "required": [
                "deviceIds"
            ],
            "properties": {
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Device identifiers to push as a JSON array of strings.\nNote that if you want to push the same campaign several times to the same device, you need to make several API calls.\n"
                },
                "data": {
                    "$ref": "#/definitions/Campaign",
                    "description": "Alternative campaign's content to use instead of the referenced campaign.\nAll campaign's properties can be overridden except for the following: `name`, `manualPush`, `audience`, `startTime` and `timezone`.\n`endTime` can be overridden while keeping original `timezone` parameter. The effect is to change the client side expiration of the received campaign for the specific devices.\nIf your campaign is a *poll*, the provided data should contain the same number of questions and choices that the one you created with the create command.\nPlease note that all the push messages created using this parameter will expire after 4 weeks at maximum (`endTime` property of the campaign will be used if lower than 4 weeks in the future)."
                }
            }
        },
        "CampaignState": {
            "properties": {
                "state": {
                    "type": "string",
                    "description": "New state of the campaign, or 'queued' when testing a campaign.",
                    "enum": [
                        "draft",
                        "scheduled",
                        "in-progress",
                        "finished",
                        "queued"
                    ]
                }
            }
        },
        "CampaignStateResult": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Campaign identifier."
                }
            },
            "allOf": [
                {
                    "$ref": "#/definitions/CampaignState"
                }
            ]
        },
        "NotificationOptions": {
            "properties": {
                "bigText": {
                    "type": "string",
                    "description": "Android 4.1+ only.\nMulti line message shown in expanded notifications on Android 4.1+ devices.\nThe `notificationType` property must be set to `system`.\n",
                    "maxLength": 4000
                },
                "bigPicture": {
                    "type": "string",
                    "description": "URL of a remote image displayed in expanded notifications on\nAndroid 4.1+ devices with the following constraints:\n* The URL length is limited to 2000 characters.\n* The image size must be less than 4 MiB.\n* The following MIME types are supported:\n** image/png\n** image/jpeg\n** image/gif\n** image/webp\n** image/bmp\n** image/x-bmp\n** image/x-ms-bmp\n* URL scheme must be HTTP or HTTPS (with valid SSL certificate).\n* Incompatible with `bigText`, only one of the fields can be set.\n* The `notificationType` property must be set to `system`.\n",
                    "maxLength": 2000
                },
                "sound": {
                    "type": "string",
                    "description": "iOS only.\nThe name of a sound file in the application bundle.\nThe sound in this file is played as an alert.\nIf the sound file doesnâ€™t exist or default is specified as the value, the default alert sound is played.\nThe audio must be in one of the audio data formats that are compatible with system sounds.\nThe `deliveryTime` property must be set to `any` or `background`.\n"
                },
                "actionText": {
                    "type": "string",
                    "description": "The action text is the title of the right button of the alert or the value of the unlock slider, where the value replaces 'unlock' in 'slide to unlock'.\n'View' (localized to the preferred language) is used as the default value.\nThe `deliveryTime` property must be set to `any` or `background`.\n"
                }
            }
        },
        "PollQuestionChoiceLocalization": {
            "properties": {
                "title": {
                    "type": "string",
                    "description": "Title of the choice.",
                    "maxLength": 256
                }
            }
        },
        "PollQuestionChoice": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Unique identifier of the choice."
                },
                "localization": {
                    "type": "object",
                    "description": "Poll choices can be localized using an optional JSON object. The JSON key is a two-character language code as specified by the ISO 639-1 standard. The corresponding value is an object containing the localizable property title.\n",
                    "additionalProperties": {
                        "$ref": "#/definitions/PollQuestionChoiceLocalization"
                    }
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "A flag indicating if this choice is the default choice for the associated question. Only one choice in the array can have this value set to true.",
                    "default": false
                }
            },
            "allOf": [
                {
                    "$ref": "#/definitions/PollQuestionChoiceLocalization"
                }
            ]
        },
        "PollQuestionLocalization": {
            "properties": {
                "title": {
                    "type": "string",
                    "description": "Title of the question.",
                    "maxLength": 256
                }
            }
        },
        "PollQuestion": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Unique identifier of the question."
                },
                "localization": {
                    "type": "object",
                    "description": "Poll questions can be localized using an optional JSON object. The JSON key is a two-character language code as specified by the ISO 639-1 standard. The corresponding value is an object containing the localizable property title.\n",
                    "additionalProperties": {
                        "$ref": "#/definitions/PollQuestionLocalization"
                    }
                },
                "choices": {
                    "type": "array",
                    "description": "List of possible choices for this question.",
                    "items": {
                        "$ref": "#/definitions/PollQuestionChoice"
                    }
                }
            },
            "allOf": [
                {
                    "$ref": "#/definitions/PollQuestionLocalization"
                }
            ]
        },
        "CampaignLocalization": {
            "properties": {
                "notificationTitle": {
                    "type": "string",
                    "description": "Title of the notification. This field supports appInfo markers.",
                    "maxLength": 2000
                },
                "notificationMessage": {
                    "type": "string",
                    "description": "Message of the notification. This field supports appInfo markers.",
                    "maxLength": 4000
                },
                "notificationImage": {
                    "type": "string",
                    "format": "byte",
                    "description": "Optional image encoded in base 64.\nUsually included in the right part of in app notifications (or as a banner if there is neither text nor content icon).\nFor Android system notifications, the image is used as the large icon (displayed only on Android 3+).\n",
                    "maxLength": 65535
                },
                "notificationOptions": {
                    "$ref": "#/definitions/NotificationOptions",
                    "description": "Additional platform specific options."
                },
                "title": {
                    "type": "string",
                    "description": "Title of the announcement or poll. This field supports appInfo markers.",
                    "maxLength": 128
                },
                "body": {
                    "type": "string",
                    "description": "Body of the text/web announcement, poll or data push. This field supports appInfo markers.",
                    "maxLength": 65535
                },
                "actionButtonText": {
                    "type": "string",
                    "description": "Text of the action button for text/web announcements and polls (answer button).",
                    "maxLength": 64
                },
                "exitButtonText": {
                    "type": "string",
                    "description": "Text of the exit button for text/web announcements and polls.",
                    "maxLength": 64
                },
                "actionUrl": {
                    "type": "string",
                    "description": "URL to launch when the announcement is actioned.",
                    "maxLength": 2000
                },
                "payload": {
                    "type": "object",
                    "description": "Native push payload."
                }
            }
        },
        "Criterion": {
            "type": "object",
            "discriminator": "type",
            "properties": {
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "carrier-name": {
            "description": "Used to target devices based on their carrier name.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Carrier name value."
                        }
                    }
                }
            ]
        },
        "carrier-country": {
            "description": "Used to target devices based on their carrier country.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Two-characters country code (ISO 3166-1)."
                        }
                    }
                }
            ]
        },
        "firmware-version": {
            "description": "Used to target devices based on their firmware version.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Firmware version."
                        }
                    }
                }
            ]
        },
        "device-manufacturer": {
            "description": "Used to target devices based on the device manufacturer.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "The device manufacturer."
                        }
                    }
                }
            ]
        },
        "device-model": {
            "description": "Used to target devices based on the device model.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "The device model."
                        }
                    }
                }
            ]
        },
        "application-version": {
            "description": "Used to target devices based on the version of the application they are using.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "The application version."
                        }
                    }
                }
            ]
        },
        "network-type": {
            "description": "Used to target devices based their network type.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "The network type (Wifi, Mobile...)."
                        }
                    }
                }
            ]
        },
        "language": {
            "description": "Used to target devices based on the language of their device.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Two character language code (ISO 639-1)."
                        }
                    }
                }
            ]
        },
        "screen-size": {
            "description": "Used to target devices based on the screen resolution of their device.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Screen size using the following format WIDTH**x**HEIGHT."
                        }
                    }
                }
            ]
        },
        "location": {
            "description": "Used to target devices based on their last know area.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "country": {
                            "type": "string",
                            "description": "Two character country code where the user is located (ISO 3166-1)."
                        },
                        "region": {
                            "type": "string",
                            "description": "An administrative region of the country, such as a state or province."
                        },
                        "locality": {
                            "type": "string",
                            "description": "A locality within the administrative region, such as a town or city."
                        }
                    },
                    "required": [
                        "country"
                    ]
                }
            ]
        },
        "geo-fencing": {
            "description": "Used to target devices based on a specific region. A center point (defined by a latitude and longitude) and a radius form the boundary for the region. This criterion will be met when the user crosses the boundaries of the region.\n",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "lat": {
                            "type": "number",
                            "description": "The latitude of the central point of the region."
                        },
                        "lon": {
                            "type": "number",
                            "description": "The longitude of the central point of the region."
                        },
                        "radius": {
                            "type": "integer",
                            "description": "The radius of the central point of the region, in meters."
                        },
                        "expiration": {
                            "type": "integer",
                            "description": "Number of minutes before device location is considered to be expired."
                        }
                    }
                }
            ]
        },
        "announcement-feedback": {
            "description": "Used to target devices who received an announcement.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "content-id": {
                            "type": "integer",
                            "description": "The unique identifier of the announcement."
                        },
                        "action": {
                            "type": "string",
                            "description": "Action that was performed on the announcement.",
                            "enum": [
                                "pushed",
                                "replied",
                                "actioned",
                                "exited"
                            ]
                        }
                    }
                }
            ]
        },
        "poll-feedback": {
            "description": "Used to target devices who received a poll.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "content-id": {
                            "type": "integer",
                            "description": "The unique identifier of the poll."
                        },
                        "action": {
                            "type": "string",
                            "description": "Action that was performed on the poll.",
                            "enum": [
                                "pushed",
                                "replied",
                                "actioned",
                                "exited"
                            ]
                        }
                    }
                }
            ]
        },
        "poll-answer-feedback": {
            "description": "Used to target devices who answered X to a given question.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "content-id": {
                            "type": "integer",
                            "description": "The unique identifier of the poll."
                        },
                        "choice-id": {
                            "type": "integer",
                            "description": "The unique identifier of the choice."
                        }
                    }
                }
            ]
        },
        "datapush-feedback": {
            "description": "Used to target devices who received a data push.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "content-id": {
                            "type": "integer",
                            "description": "The unique identifier of the data push."
                        },
                        "action": {
                            "type": "string",
                            "description": "Action that was performed on the data push (action depends on the return value in the callbacks you declared in the client code).\n",
                            "enum": [
                                "pushed",
                                "replied",
                                "actioned",
                                "exited"
                            ]
                        }
                    }
                }
            ]
        },
        "segment": {
            "description": "Target devices based on an existing segment.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "description": "Segment identifier."
                        },
                        "exclude": {
                            "type": "boolean",
                            "description": "If value is true, the criterion will target users that are NOT part of the segment."
                        }
                    }
                }
            ]
        },
        "Filter": {
            "type": "object",
            "discriminator": "type",
            "properties": {
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "type"
            ]
        },
        "engage-subset": {
            "description": "Send only to a maximum of max users.",
            "allOf": [
                {
                    "$ref": "#/definitions/Filter"
                },
                {
                    "type": "object",
                    "properties": {
                        "max": {
                            "type": "integer",
                            "description": "An integer value representing the maximum users that should be pushed."
                        }
                    }
                }
            ]
        },
        "engage-old-users": {
            "description": "Send only to users whose first app use is more than {threshold} days old.",
            "allOf": [
                {
                    "$ref": "#/definitions/Filter"
                },
                {
                    "type": "object",
                    "properties": {
                        "threshold": {
                            "type": "integer",
                            "description": "An integer value representing the threshold to apply on this filter."
                        }
                    }
                }
            ]
        },
        "engage-new-users": {
            "description": "Send only to users whose first app use is less than {threshold} days old.",
            "allOf": [
                {
                    "$ref": "#/definitions/Filter"
                },
                {
                    "type": "object",
                    "properties": {
                        "threshold": {
                            "type": "integer",
                            "description": "An integer value representing the threshold to apply on this filter."
                        }
                    }
                }
            ]
        },
        "engage-active-users": {
            "description": "Send only to users who have used the app in the last {threshold} days.",
            "allOf": [
                {
                    "$ref": "#/definitions/Filter"
                },
                {
                    "type": "object",
                    "properties": {
                        "threshold": {
                            "type": "integer",
                            "description": "An integer value representing the threshold to apply on this filter."
                        }
                    }
                }
            ]
        },
        "engage-idle-users": {
            "description": "Send only to users who haven't used the app in the last {threshold} days.",
            "allOf": [
                {
                    "$ref": "#/definitions/Filter"
                },
                {
                    "type": "object",
                    "properties": {
                        "threshold": {
                            "type": "integer",
                            "description": "An integer value representing the threshold to apply on this filter."
                        }
                    }
                }
            ]
        },
        "native-push-enabled": {
            "description": "Engage only users with native push enabled.",
            "allOf": [
                {
                    "$ref": "#/definitions/Filter"
                }
            ]
        },
        "push-quota": {
            "description": "Engage only users for whom the push quota is not reached.",
            "allOf": [
                {
                    "$ref": "#/definitions/Filter"
                }
            ]
        },
        "app-info": {
            "description": "Send only to users who have some app info set. This is a special filter that is automatically added if your campaign contains appInfo parameters. It is not intended to be public and should not be used as it could be removed or replaced by the API.\n",
            "allOf": [
                {
                    "$ref": "#/definitions/Filter"
                },
                {
                    "type": "object",
                    "properties": {
                        "appInfo": {
                            "type": "array",
                            "description": "An array containing all the required appInfo.",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            ]
        },
        "string-tag": {
            "description": "Target devices based on a string tag value.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "The name of the custom tag."
                        },
                        "value": {
                            "type": "string",
                            "description": "A custom string to match for tag value (? and * characters can be used to perform wildcard matching)."
                        }
                    }
                }
            ]
        },
        "date-tag": {
            "description": "Target devices based on a date tag value.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "The name of the custom tag."
                        },
                        "value": {
                            "type": "string",
                            "description": "It can be either:\n* an absolute date using CCYY-MM-DD format (e.g. 1969-12-07 stands for 7 Dec 1969). * an offset in days relative to the current day (`TODAY` + `value`).\n"
                        },
                        "op": {
                            "type": "string",
                            "description": "comparison operator: `EQ` (equal to), `LT` (less than), `GT` (greater than), `LE` (less than or equal to) or `GE` (greater than or equal to).",
                            "enum": [
                                "EQ",
                                "LT",
                                "GT",
                                "LE",
                                "GE"
                            ]
                        }
                    }
                }
            ]
        },
        "integer-tag": {
            "description": "Target devices based on an integer tag value.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "The name of the custom tag."
                        },
                        "value": {
                            "type": "integer",
                            "description": "A custom integer value to match."
                        },
                        "op": {
                            "type": "string",
                            "description": "comparison operator: `EQ` (equal to), `LT` (less than), `GT` (greater than), `LE` (less than or equal to) or `GE` (greater than or equal to).",
                            "enum": [
                                "EQ",
                                "LT",
                                "GT",
                                "LE",
                                "GE"
                            ]
                        }
                    }
                }
            ]
        },
        "boolean-tag": {
            "description": "Target devices based on a boolean tag value.",
            "allOf": [
                {
                    "$ref": "#/definitions/Criterion"
                },
                {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "The name of the custom tag."
                        },
                        "value": {
                            "type": "boolean",
                            "description": "A custom boolean value to match."
                        }
                    }
                }
            ]
        },
        "Campaign": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique name of the campaign.",
                    "maxLength": 64
                },
                "audience": {
                    "type": "object",
                    "description": "Specify which users will be targeted by this campaign. By default, all users will be targeted.\nIf you set `pushMode` property to `manual`, the only thing you can specify in the audience is the push quota filter.\nAn audience is a boolean expression made of criteria (variables) operators (`not`, `and` or `or`) and parenthesis. Additionally, a set of filters can be added to an audience.\n65535 bytes max as per JSON encoding.\n",
                    "properties": {
                        "expression": {
                            "type": "string",
                            "description": "Boolean expression made of criteria (variables) operators (`not`, `and` or `or`) and parenthesis.\nCriterion names in the audience expression must start with a capital letter and can only contain alphanumeric (A-Z,a-z,0-9) and underscore (_) characters.\n"
                        },
                        "criteria": {
                            "description": "Criteria by name.",
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/Criterion"
                            }
                        },
                        "filters": {
                            "type": "array",
                            "description": "Global filters applied to all devices.",
                            "items": {
                                "$ref": "#/definitions/Filter"
                            }
                        }
                    }
                },
                "category": {
                    "type": "string",
                    "description": "Category of the campaign. Categories can be used on the application side to customize campaigns.",
                    "maxLength": 64
                },
                "pushMode": {
                    "type": "string",
                    "description": "Announcements/polls only.\nDefines how the campaign is pushed. Valid values are:\n* `real-time`: Never ending campaign, the campaign will be delivered  to your existing users and also to your new users.\n* `one-shot`: In this mode, the campaign will be delivered only to your existing users (campaign will stop after that).\n* `manual`: In this mode, the campaign will not be pushed automatically to devices.\nYou will have to use the Push campaign command to push the campaign to your end-users.\nCampaigns can be pushed multiple times to the same device.\n",
                    "enum": [
                        "real-time",
                        "one-shot",
                        "manual"
                    ],
                    "default": "real-time"
                },
                "type": {
                    "type": "string",
                    "description": "Applicable only to announcements and data pushes.\nType of announcement. Valid values are:\n* `text/plain`: Text-only announcement: `body` property should only contain plain text.\n* `text/html`: HTML announcement: `body` attribute can contain HTML code.\n* `only_notif`: Notification-only announcement. With this kind of announcements, the `body`, `title`, `actionButtonText` and `exitButtonText` are ignored.\nType of data push. Valid values are:\n* `text/plain`: Text only data push: `body` property must be plain text.\n* `text/base64`: Base 64 data push: `body` property must be encoded in base 64.\n",
                    "enum": [
                        "text/plain",
                        "text/html",
                        "only_notif",
                        "text/base64"
                    ]
                },
                "deliveryTime": {
                    "type": "string",
                    "description": "Announcements/polls only.\nDefines when the campaign should be delivered. Valid values are:\n* `any`: Campaign will be delivered as soon as possible.\n* `background`: iOS only. Campaign will be only delivered when the application is in background (out of app).\n* `session`: Campaign will be delivered when the application is running.\n",
                    "enum": [
                        "any",
                        "background",
                        "session"
                    ]
                },
                "deliveryActivities": {
                    "type": "array",
                    "description": "Announcements/polls only.\nArray containing the list of activities in which the campaign can be delivered.\ndeliveryTime must be set to session.\nIf the platform is iOS, this option can also be set if deliveryTime is set to any.\nIn that case, if the campaign is received when the application is launched, it will be delivered only in the specified list of activities.\n",
                    "items": {
                        "type": "string"
                    }
                },
                "startTime": {
                    "type": "string",
                    "description": "The date at which the campaign should be started.\nThe date shall conform to the following format: `yyyy-MM-dd HH:mm'Z'`.\n* If you set pushMode property to manual, this attribute will be ignored.\n* If you set pushMode property to one-shot, then the timezone attribute must be specified.\nExample: `2011-11-21 15:23Z`\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "The date at which the campaign should be finished.\nThe date shall conform to the following format: `yyyy-MM-dd HH:mm'Z'`.\nExample: `2011-11-21 15:23Z`\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The id of the time zone to use for the startTime and endTime dates.\nIf not provided, the two date attributes will be expressed using the device timezone.\nExample: America/Los_Angeles\n"
                },
                "notificationType": {
                    "type": "string",
                    "description": "Android only.\nDefines how the notification should be displayed. Valid values are:\n* `system`: Display the notification using a standard system notification.\n* `popup`: Display the notification using a in-app banner notification.\n",
                    "enum": [
                        "system",
                        "popup"
                    ],
                    "default": "popup"
                },
                "notificationIcon": {
                    "type": "boolean",
                    "description": "A flag indicating whether or not you want to display the resource icon in notification content.",
                    "default": true
                },
                "notificationCloseable": {
                    "type": "boolean",
                    "description": "A flag indicating whether or not you want the notification to be closeable.",
                    "default": true
                },
                "notificationVibrate": {
                    "type": "boolean",
                    "description": "Android only. A flag indicating whether or not you want the system notification to make a vibration. The notificationType property must be set to system.",
                    "default": false
                },
                "notificationSound": {
                    "type": "boolean",
                    "description": "* `Android`: A flag indicating whether or not you want the system notification to make a sound. The `notificationType` property must be set to `system`.\n* `iOS`: A flag indicating whether or not you want the native Apple Push notification to make a sound. The `deliveryTime` property must be set to `any` or `background`. This will play the 'default' sound. If you want to play a custom sound, see the `notificationOptions` property.\n* `Windows`: A flag indicating whether or not you want the native Windows Notification Service to make a sound. The `deliveryTime` property must be set to `any`.\n",
                    "default": false
                },
                "notificationBadge": {
                    "type": "boolean",
                    "description": "A flag indicating whether or not you want the native Apple Push notification to update the badge icon to the number of unread messages.\nThe `deliveryTime` property must be set to `any` or `background`.\n",
                    "default": false
                },
                "localization": {
                    "type": "object",
                    "description": "Reach campaigns can be localized using an optional JSON object. The JSON key is a two-character language code as specified by the ISO 639-1 standard.\nThe corresponding value is an object containing the localizable properties.\n",
                    "additionalProperties": {
                        "$ref": "#/definitions/CampaignLocalization"
                    }
                },
                "questions": {
                    "type": "array",
                    "description": "Poll questions.",
                    "items": {
                        "$ref": "#/definitions/PollQuestion"
                    }
                }
            },
            "allOf": [
                {
                    "$ref": "#/definitions/CampaignLocalization"
                }
            ]
        },
        "CampaignListResult": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Unique identifier of the campaign."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the campaign."
                },
                "state": {
                    "type": "string",
                    "description": "The current state of the campaign.",
                    "enum": [
                        "draft",
                        "scheduled",
                        "in-progress",
                        "finished"
                    ]
                },
                "activatedDate": {
                    "type": "string",
                    "description": "The date at which the campaign was activated (Not present if not yet activated).\nThe date conforms to the following format: `yyyy-MM-dd HH:mm'Z'` as specified by the ISO 8601 standard.\n"
                },
                "finishedDate": {
                    "type": "string",
                    "description": "The date at which the campaign was finished (Not present if not yet finished).\nThe date conforms to the following format: `yyyy-MM-dd HH:mm'Z'` as specified by the ISO 8601 standard.\n"
                },
                "startDate": {
                    "type": "string",
                    "description": "The date at which the campaign should be started if specified. The date conforms to the following format: `yyyy-MM-dd HH:mm'Z'` as specified by the ISO 8601 standard. Applicable only to announcements and polls.\n"
                },
                "endDate": {
                    "type": "string",
                    "description": "The date at which the campaign should be finished if specified. The date conforms to the following format: `yyyy-MM-dd HH:mm'Z'` as specified by the ISO 8601 standard. Applicable only to announcements and polls.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The id of the time zone to use for the `startTime` and `endTime` dates. If not provided, the two date attributes are referencing to the device timezone. Applicable only to announcements and polls.\n"
                }
            }
        },
        "CampaignResult": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Unique identifier of the campaign."
                },
                "state": {
                    "type": "string",
                    "description": "The current state of the campaign.",
                    "enum": [
                        "draft",
                        "scheduled",
                        "in-progress",
                        "finished"
                    ]
                },
                "activatedDate": {
                    "type": "string",
                    "description": "The date at which the campaign was activated (Not present if not yet activated).\nThe date conforms to the following format: yyyy-MM-dd HH:mm'Z' as specified by the ISO 8601 standard.\n"
                },
                "finishedDate": {
                    "type": "string",
                    "description": "The date at which the campaign was finished (Not present if not yet finished).\nThe date conforms to the following format: yyyy-MM-dd HH:mm'Z' as specified by the ISO 8601 standard.\n"
                }
            },
            "allOf": [
                {
                    "$ref": "#/definitions/Campaign"
                }
            ]
        },
        "CampaignPushResult": {
            "properties": {
                "invalidDeviceIds": {
                    "type": "array",
                    "description": "A JSON array containing all identifiers that have been rejected.\nA device can be rejected for the following reasons:\n* The device hasnâ€™t reported any session yet. * The device is over quota (if a push quota filter is applied on your campaign).\nPlease note that if the request parameters are valid but all the specified devices are rejected, the status code is still `200` with a response including all the devices as being rejected.\n",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "CampaignStatisticsResult": {
            "properties": {
                "queued": {
                    "type": "integer",
                    "description": "Number of times the campaign was registered to be pushed."
                },
                "pushed": {
                    "type": "integer",
                    "description": "Number of pushes performed."
                },
                "pushed-native": {
                    "type": "integer",
                    "description": "Total number of native pushes. Information only available on Android, iOS, Windows Phone and Windows applications."
                },
                "pushed-native-google": {
                    "type": "integer",
                    "description": "Number of C2DM/GCM pushes (available only on Android applications)."
                },
                "pushed-native-adm": {
                    "type": "integer",
                    "description": "Number of ADM pushes (available only on Android applications)."
                },
                "delivered": {
                    "type": "integer",
                    "description": "Number of times the campaign was received by the application (Not present in case of a native-push)."
                },
                "dropped": {
                    "type": "integer",
                    "description": "Number of times the campaign was dropped by the application. It can happen if the SDK failed to parse the campaign payload or if an error occurred while trying to notify the end-user (Not present in case of a native-push)."
                },
                "system-notification-displayed": {
                    "type": "integer",
                    "description": "Number of times the system notification was displayed (Not present in case of a data-push or a native-push). On Android it corresponds to a status bar notification."
                },
                "in-app-notification-displayed": {
                    "type": "integer",
                    "description": "Number of times the in-app notification was displayed (Not present in case of a data-push or a native-push)."
                },
                "content-displayed": {
                    "type": "integer",
                    "description": "Number of times the campaignâ€™s content view was displayed (Not present in case of a notification-only announcement, a data-push or a native-push)."
                },
                "system-notification-actioned": {
                    "type": "integer",
                    "description": "Number of times the system notification (On Android it corresponds to a status bar notification. On iOS, it is the Apple Push notification) was actioned."
                },
                "system-notification-exited": {
                    "type": "integer",
                    "description": "Number of times the system notification was exited (Not present in case of a data-push or a native-push)."
                },
                "in-app-notification-actioned": {
                    "type": "integer",
                    "description": "Number of times the in-app notification was actioned (Not present in case of a data-push or a native-push)."
                },
                "in-app-notification-exited": {
                    "type": "integer",
                    "description": "Number of times the in-app notification was exited (Not present in case of a data-push or a native-push)."
                },
                "content-actioned": {
                    "type": "integer",
                    "description": "Number of times the campaignâ€™s content view was actioned (Not present in case of a notification-only announcement or a native-push)."
                },
                "content-exited": {
                    "type": "integer",
                    "description": "Number of times the campaignâ€™s content view was exited (Not present in case of a notification-only announcement or a native-push)."
                },
                "answers": {
                    "type": "object",
                    "description": "Poll specific statistics.",
                    "additionalProperties": {
                        "type": "object"
                    }
                }
            }
        },
        "CampaignsListResult": {
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CampaignListResult"
                    },
                    "description": "The list of campaigns."
                },
                "nextLink": {
                    "type": "string",
                    "description": "When using `top` parameter and if partial results are returned, this property describes a URI path to get the next results. This property is not set when reaching the last page."
                }
            },
            "description": "The campaigns list result."
        },
        "DevicesQueryResult": {
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeviceQueryResult"
                    },
                    "description": "The list of devices."
                },
                "nextLink": {
                    "type": "string",
                    "description": "If partial results are returned, this property describes a URI path to get the next result page."
                }
            },
            "description": "The campaigns list result."
        },
        "DeviceQueryResult": {
            "required": [
                "deviceId"
            ],
            "properties": {
                "deviceId": {
                    "type": "string",
                    "description": "The device result."
                },
                "meta": {
                    "description": "Application usage data.",
                    "$ref": "#/definitions/DeviceMeta"
                },
                "appInfo": {
                    "type": "object",
                    "description": "Also known as tags, a key-value set as a JSON object.",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "DeviceMeta": {
            "properties": {
                "firstSeen": {
                    "type": "integer",
                    "format": "int64",
                    "description": "First time the device used the application in milliseconds since January 1st, 1970 UTC."
                },
                "lastSeen": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Last time the device used the application in milliseconds since January 1st, 1970 UTC."
                },
                "lastInfo": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Timestamp corresponding to the info object in milliseconds since January 1st, 1970 UTC."
                },
                "lastLocation": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Timestamp corresponding to the location object in milliseconds since January 1st, 1970 UTC."
                },
                "nativePushEnabled": {
                    "type": "boolean",
                    "description": "Boolean indicating if native push notifications (like Androidâ€™s GCM or Appleâ€™s APNS) are enabled for the application. This boolean is set to true when the application registers successfully to the native push service, and set to false when the native push service reports to Mobile Engagement that the application can no longer be pushed (which means that it has been uninstalled). This report is performed a few hours after Mobile Engagement has tried to perform a native push to a device on which the application has been uninstalled."
                }
            }
        },
        "DeviceInfo": {
            "properties": {
                "phoneModel": {
                    "type": "string",
                    "description": "Phone model."
                },
                "phoneManufacturer": {
                    "type": "string",
                    "description": "Phone manufacturer"
                },
                "firmwareVersion": {
                    "type": "string",
                    "description": "Firmware version."
                },
                "firmwareName": {
                    "type": "string",
                    "description": "Firmware name."
                },
                "androidAPILevel": {
                    "type": "integer",
                    "description": "Android API level."
                },
                "carrierCountry": {
                    "type": "string",
                    "description": "Carrier country."
                },
                "locale": {
                    "type": "string",
                    "description": "Locale code."
                },
                "carrierName": {
                    "type": "string",
                    "description": "Carrier name."
                },
                "networkType": {
                    "type": "string",
                    "description": "Network type."
                },
                "networkSubtype": {
                    "type": "string",
                    "description": "Network sub-type."
                },
                "applicationVersionName": {
                    "type": "string",
                    "description": "Application version name."
                },
                "applicationVersionCode": {
                    "type": "integer",
                    "description": "Application version code."
                },
                "timeZoneOffset": {
                    "type": "integer",
                    "description": "The offset in minutes from UTC for the device time zone, including daylight savings time."
                },
                "serviceVersion": {
                    "type": "string",
                    "description": "SDK version."
                }
            }
        },
        "DeviceLocation": {
            "properties": {
                "countrycode": {
                    "type": "string",
                    "description": "The ISO 3166 two-letter country code."
                },
                "region": {
                    "type": "string",
                    "description": "An administrative region of the nation, such as a state or province."
                },
                "locality": {
                    "type": "string",
                    "description": "A locality within the administrative region, such as a town or city."
                }
            }
        },
        "Device": {
            "required": [
                "deviceId"
            ],
            "properties": {
                "deviceId": {
                    "type": "string",
                    "description": "The device result."
                },
                "meta": {
                    "description": "Application usage data.",
                    "$ref": "#/definitions/DeviceMeta"
                },
                "info": {
                    "description": "Last technical data received (concerning device, system, network and application identification).",
                    "$ref": "#/definitions/DeviceInfo"
                },
                "location": {
                    "description": "Last geo-location data received.",
                    "$ref": "#/definitions/DeviceLocation"
                },
                "appInfo": {
                    "type": "object",
                    "description": "Also known as tags, a key-value set as a JSON object.",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "DeviceTagsParameters": {
            "required": [
                "tags"
            ],
            "properties": {
                "tags": {
                    "description": "A JSON object describing the set of tags to record for a set of users.\nEach key is a device/user identifier, each value is itself a key/value set: the tags to set for the specified device/user identifier.\n",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "deleteOnNull": {
                    "type": "boolean",
                    "description": "If this parameter is `true`, tags with a null value will be deleted.",
                    "default": false
                }
            }
        },
        "DeviceTagsResult": {
            "required": [
                "invalidIds"
            ],
            "properties": {
                "invalidIds": {
                    "type": "array",
                    "description": "A JSON array containing all identifiers that have been rejected.\nPlease note that if the request parameters are valid but all the specified devices are rejected, the status code is still `200` with a response including all the devices as being rejected.\n",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "parameters": {
        "SubscriptionIdParameter": {
            "name": "subscriptionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
        },
        "ApiVersionParameter": {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
                "2014-12-01"
            ],
            "description": "Client Api Version."
        },
        "ResourceGroupNameParameter": {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the resource group."
        },
        "AppCollectionParameter": {
            "name": "appCollection",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Application collection."
        },
        "AppNameParameter": {
            "name": "appName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Application resource name."
        }
    }
}