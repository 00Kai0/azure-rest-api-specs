{
  "swagger": "2.0",
  "info": {
    "title": "ApiManagementClient",
    "description": "Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.",
    "version": "2016-10-10"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow.",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_ListByService",
        "description": "Lists a collection of products in the specified service instance.",
        "externalDocs": {
          "url": "https://msdn.microsoft.com/en-us/library/azure/dn776336.aspx"
        },
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions                         |\n|-------------|------------------------|---------------------------------------------|\n| id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| terms       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| state       | eq                     |                                             |"
          },
          {
            "$ref": "#/parameters/TopQueryParameter"
          },
          {
            "$ref": "#/parameters/SkipQueryParameter"
          },
          {
            "name": "expandGroups",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When set to true, the response contains an array of groups that have visibility to the product. The default is false."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "A Collection of the Product entities for the specified API Management service instance.",
            "schema": {
              "$ref": "#/definitions/ProductCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ProductContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}": {
      "get": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_Get",
        "description": "Gets the details of the product specified by its identifier.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains the specified Product entity.",
            "schema": {
              "$ref": "#/definitions/ProductContract"
            },
            "headers": {              
              "ETag": {
                "description": "Current entity state version. Should be treated as opaque and used to make conditional HTTP requests.",
                "type": "string"
              }              
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_CreateOrUpdate",
        "description": "Creates or Updates a product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductContract"
            },
            "description": "Create or update parameters."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Product was successfully created."
          },
          "204": {
            "description": "Product was successfully updated."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_Update",
        "description": "Update product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProductUpdateParameters"
            },
            "description": "Update parameters."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the Product Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content in case of Update Successfull."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "operationId": "Products_Delete",
        "description": "Delete product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "deleteSubscriptions",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Delete existing subscriptions to the product or not."
          },
          {
            "name": "If-Match",
            "in": "header",
            "required": true,
            "description": "ETag of the Product Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The product was successfully deleted."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/apis": {
      "get": {
        "tags": [
          "ProductApis"
        ],
        "operationId": "Apis_ListByProducts",
        "description": "Lists a collection of the APIs associated with a product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions                         |\n|-------------|------------------------|---------------------------------------------|\n| id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| serviceUrl  | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| path        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n"
          },
          {
            "$ref": "#/parameters/TopQueryParameter"
          },
          {
            "$ref": "#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The response body contains a collection of Api entities in the product.",
            "schema": {
              "$ref": "#/definitions/ApiCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/ApiContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/apis/{apiId}": {
      "put": {
        "tags": [
          "ProductApis"
        ],
        "operationId": "ProductApis_Create",
        "description": "Adds an API to the specified product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "The API was successfully added to the product."
          },
          "204": {
            "description": "The specified API is already added to the product."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProductApis"
        ],
        "operationId": "ProductApis_Delete",
        "description": "Deletes the specified API from the specified product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "#/parameters/ApiIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The API was successfully removed from the product."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/groups": {
      "get": {
        "tags": [
          "ProductGroups"
        ],
        "operationId": "Groups_ListByProducts",
        "description": "Lists the collection of developer groups associated with the specified product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field       | Supported operators    | Supported functions                         |\n|-------------|------------------------|---------------------------------------------|\n| id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| type        | eq, ne                 | N/A                                         |"
          },
          {
            "$ref": "#/parameters/TopQueryParameter"
          },
          {
            "$ref": "#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists a collection of Group entities.",
            "schema": {
              "$ref": "#/definitions/GroupCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/GroupContract"
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/groups/{groupId}": {
      "put": {
        "tags": [
          "ProductGroups"
        ],
        "operationId": "ProductGroups_Create",
        "description": "Adds the association between the specified developer group with the specified product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "#/parameters/GroupIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "The group was successfully associated with the product.."
          },
          "204": {
            "description": "The specified group is already associated with the product."
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProductGroups"
        ],
        "operationId": "ProductGroups_Delete",
        "description": "Deletes the association between the specified group and product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "$ref": "#/parameters/GroupIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "The group was successfully disassociated with the product."
          },
          "400": {
            "description": "Request validation failed.This is typically caused by an invalid product or group id.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"              
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/products/{productId}/subscriptions": {
      "get": {
        "tags": [
          "ProductSubscriptions"
        ],
        "operationId": "ProductSubscriptions_ListByProduct",
        "description": "Lists the collection of subscriptions to the specified product.",
        "parameters": [
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ServiceNameParameter"
          },
          {
            "$ref": "#/parameters/ProductIdParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "| Field        | Supported operators    | Supported functions                         |\n|--------------|------------------------|---------------------------------------------|\n| id           | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| name         | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| stateComment | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| userId       | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| productId    | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith |\n| state        | eq                     |                                             |"
          },
          {
            "$ref": "#/parameters/TopQueryParameter"
          },
          {
            "$ref": "#/parameters/SkipQueryParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists a collection of subscription entities.",
            "schema": {
              "$ref": "#/definitions/SubscriptionCollection"
            }
          },
          "default": {
            "description": "Error response describing why the operation failed.",
            "schema": {
              "$ref": "./apimanagement.json#/definitions/ErrorBodyContract"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-odata": "#/definitions/SubscriptionContract"
      }
    }
  },
  "definitions": {    
		"ApiCollection": {
		  "properties": {
			"value": {
			  "type": "array",
			  "items": {
				"$ref": "#/definitions/ApiContract"
			  },
			  "description": "Page values."
			},
			"count": {
			  "type": "integer",
			  "format": "int64",
			  "description": "Total record count number across all pages."
			},
			"nextLink": {
			  "type": "string",
			  "description": "Next page link if any."
			}
		  },
		  "description": "Paged Api list representation."
		},
		"ApiContract": {
		  "properties": {
			"id": {
			  "type": "string",
			  "description": "API identifier path: /apis/{apiId}",
			  "readOnly": true
			},
			"name": {
			  "type": "string",
			  "description": "API name.",
			  "minLength": 1,
			  "maxLength": 300
			},
			"serviceUrl": {
			  "type": "string",
			  "description": "Absolute URL of the backend service implementing this API.",
			  "minLength": 1,
			  "maxLength": 2000
			},
			"path": {
			  "type": "string",
			  "description": "Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.",
			  "minLength": 0,
			  "maxLength": 400
			},
			"protocols": {
			  "type": "array",
			  "items": {
				"type": "string",
				"enum": [
				  "Http",
				  "Https"
				],
				"x-ms-enum": {
				  "name": "ApiProtocolContract",
				  "modelAsString": false
				}
			  },
			  "description": "Describes on which protocols the operations in this API can be invoked."
			}
		  },
		  "allOf": [
			{
			  "$ref": "#/definitions/ApiEntityBaseContract"
			}
		  ],
		  "required": [
			"name",
			"serviceUrl",
			"path",
			"protocols"
		  ],
		  "description": "API details."
		},
		"ApiEntityBaseContract": {
		  "properties": {
			"description": {
			  "type": "string",
			  "description": "Description of the API. May include HTML formatting tags."
			},
			"authenticationSettings": {
			  "$ref": "#/definitions/AuthenticationSettingsContract",
			  "description": "Collection of authentication settings included into this API."
			},
			"subscriptionKeyParameterNames": {
			  "$ref": "#/definitions/SubscriptionKeyParameterNamesContract",
			  "description": "Protocols over which API is made available."
			},
			"type": {
			  "type": "string",
			  "description": "Type of API.",
			  "enum": [
				"Http",
				"Soap"
			  ],
			  "x-ms-enum": {
				"name": "ApiTypeContract",
				"modelAsString": false
			  }
			}
		  },
		  "description": "API base contract details."
		},
		"AuthenticationSettingsContract": {
		  "properties": {
			"oAuth2": {
			  "$ref": "#/definitions/OAuth2AuthenticationSettingsContract"
			}
		  },
		  "description": "API Authentication Settings."
		},
		"GroupCollection": {
		  "properties": {
			"value": {
			  "type": "array",
			  "items": {
				"$ref": "#/definitions/GroupContract"
			  },
			  "description": "Page values."
			},
			"count": {
			  "type": "integer",
			  "format": "int64",
			  "description": "Total record count number across all pages."
			},
			"nextLink": {
			  "type": "string",
			  "description": "Next page link if any."
			}
		  },
		  "description": "Paged Group list representation."
		},
		"GroupContract": {
		  "properties": {
			"id": {
			  "type": "string",
			  "description": "Uniquely identifies the group within the current API Management service instance. The value is a valid relative URL in the format of /groups/{groupid} where {groupid} is a group identifier.",
			  "readOnly": true
			},
			"name": {
			  "type": "string",
			  "description": "Group name.",
			  "maxLength": 300,
			  "minLength": 1
			},
			"description": {
			  "type": "string",
			  "description": "Group description. Can contain HTML formatting tags.",
			  "maxLength": 1000
			},
			"builtIn": {
			  "readOnly": true,
			  "type": "boolean",
			  "description": "true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false."
			},
			"type": {
			  "type": "string",
			  "description": "Group type.",
			  "readOnly": true,
			  "enum": [
				"Custom",
				"System",
				"External"
			  ],
			  "x-ms-enum": {
				"name": "GroupTypeContract",
				"modelAsString": false
			  }
			},
			"externalId": {
			  "type": "string",
			  "description": "For external groups, this property contains the id of the group from the external identity provider, e.g. Azure Active Directory; otherwise the value is null.",
			  "readOnly": true
			}
		  },
		  "required": [
			"name"
		  ],
		  "description": "Developer group."
		},
		"OAuth2AuthenticationSettingsContract": {
		  "properties": {
			"authorizationServerId": {
			  "type": "string",
			  "description": "OAuth authorization server identifier."
			},
			"scope": {
			  "type": "string",
			  "description": "operations scope."
			}
		  },
		  "description": "API OAuth2 Authentication settings details."
		},
		"ProductCollection": {
		  "properties": {
			"value": {
			  "type": "array",
			  "items": {
				"$ref": "#/definitions/ProductContract"
			  },
			  "description": "Page values."
			},
			"count": {
			  "type": "integer",
			  "format": "int64",
			  "description": "Total record count number across all pages."
			},
			"nextLink": {
			  "type": "string",
			  "description": "Next page link if any."
			}
		  },
		  "description": "Paged Products list representation."
		},
		"ProductContract": {
		  "properties": {
			"id": {
			  "type": "string",
			  "description": "Uniquely identifies the product within the current API Management service instance. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.",
			  "readOnly": true
			},
			"name": {
			  "type": "string",
			  "description": "Product name.",
			  "minLength": 1,
			  "maxLength": 300
			},
			"description": {
			  "type": "string",
			  "description": "Product description. May include HTML formatting tags.",
			  "minLength": 1,
			  "maxLength": 1000
			},
			"terms": {
			  "type": "string",
			  "description": "Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process."
			},
			"subscriptionRequired": {
			  "type": "boolean",
			  "description": "Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.",
			  "default": true
			},
			"approvalRequired": {
			  "type": "boolean",
			  "description": "whether subscription approval is required. IfÂ false, new subscriptions will be approved automatically enabling developers to call the productâ€™s APIs immediately after subscribing. IfÂ true, administrators must manually approve the subscription before the developer can any of the productâ€™s APIs. Can be present only if subscriptionRequired property is present and has a value of false."
			},
			"subscriptionsLimit": {
			  "type": "integer",
			  "format": "int32",
			  "description": "Whether the number of subscriptions a user can have to this product at the same time. Set toÂ nullÂ or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false."
			},
			"state": {
			  "type": "string",
			  "description": "whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is NotPublished.",
			  "enum": [
				"NotPublished",
				"Published"
			  ],
			  "default": "NotPublished",
			  "x-ms-enum": {
				"name": "ProductStateContract",
				"modelAsString": false
			  }
			}
		  },
		  "required": [
			"name"
		  ],
		  "description": "Product profile."
		},
		"ProductUpdateParameters": {
		  "properties": {
			"name": {
			  "type": "string",
			  "description": "Product name.",
			  "maxLength": 300,
			  "minLength": 1
			},
			"description": {
			  "type": "string",
			  "description": "Product description.",
			  "maxLength": 500,
			  "minLength": 1
			},
			"terms": {
			  "type": "string",
			  "description": "Product terms and conditions. Developer will have to accept these terms before he's allowed to call product API."
			},
			"subscriptionRequired": {
			  "type": "boolean",
			  "description": "whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true."
			},
			"approvalRequired": {
			  "type": "boolean",
			  "description": "whether subscription approval is required. IfÂ false, new subscriptions will be approved automatically enabling developers to call the productâ€™s APIs immediately after subscribing. IfÂ true, administrators must manually approve the subscription before the developer can any of the productâ€™s APIs. Can be present only if subscriptionRequired property is present and has a value of false."
			},
			"subscriptionsLimit": {
			  "type": "integer",
			  "format": "int32",
			  "description": "whether the number of subscriptions a user can have to this product at the same time. Set toÂ nullÂ or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false."
			},
			"state": {
			  "type": "string",
			  "description": "whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators.",
			  "enum": [
				"NotPublished",
				"Published"
			  ],
			  "x-ms-enum": {
				"name": "ProductStateContract",
				"modelAsString": false
			  }
			}
		  },
		  "description": "Parameters supplied to the CreateOrUpdate Product operation."
		},
		"SubscriptionCollection": {
		  "properties": {
			"value": {
			  "type": "array",
			  "items": {
				"$ref": "#/definitions/SubscriptionContract"
			  },
			  "description": "Page values."
			},
			"count": {
			  "type": "integer",
			  "format": "int64",
			  "description": "Total record count number across all pages."
			},
			"nextLink": {
			  "type": "string",
			  "description": "Next page link if any."
			}
		  },
		  "description": "Paged Subscriptions list representation."
		},
		"SubscriptionContract": {
		  "properties": {
			"id": {
			  "type": "string",
			  "description": "Uniquely identifies the subscription within the current API Management service instance. The value is a valid relative URL in the format of /subscriptions/{sid} where {sid} is a subscription identifier.",
			  "readOnly": true
			},
			"userId": {
			  "type": "string",
			  "description": "The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{uid} where {uid} is a user identifier."
			},
			"productId": {
			  "type": "string",
			  "description": "The product resource identifier of the subscribed product. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier."
			},
			"name": {
			  "type": "string",
			  "description": "The name of the subscription, or null if the subscription has no name.",
			  "minLength": 0,
			  "maxLength": 100
			},
			"state": {
			  "type": "string",
			  "description": "Subscription state. Possible states are * active â€“ the subscription is active, * suspended â€“ the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted â€“ the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected â€“ the subscription request has been denied by an administrator, * cancelled â€“ the subscription has been cancelled by the developer or administrator, * expired â€“ the subscription reached its expiration date and was deactivated.",
			  "enum": [
				"Suspended",
				"Active",
				"Expired",
				"Submitted",
				"Rejected",
				"Cancelled"
			  ],
			  "x-ms-enum": {
				"name": "SubscriptionStateContract",
				"modelAsString": false
			  }
			},
			"createdDate": {
			  "type": "string",
			  "format": "date-time",
			  "description": "Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n",
			  "readOnly": true
			},
			"startDate": {
			  "type": "string",
			  "format": "date-time",
			  "description": "Subscription activation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
			},
			"expirationDate": {
			  "type": "string",
			  "format": "date-time",
			  "description": "Subscription expiration date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
			},
			"endDate": {
			  "type": "string",
			  "format": "date-time",
			  "description": "Date when subscription was cancelled or expired. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
			},
			"notificationDate": {
			  "type": "string",
			  "format": "date-time",
			  "description": "Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.\n"
			},
			"primaryKey": {
			  "type": "string",
			  "description": "Subscription primary key.",
			  "minLength": 1,
			  "maxLength": 256
			},
			"secondaryKey": {
			  "type": "string",
			  "description": "Subscription secondary key.",
			  "minLength": 1,
			  "maxLength": 256
			},
			"stateComment": {
			  "type": "string",
			  "description": "Optional subscription comment added by an administrator."
			}
		  },
		  "description": "Subscription details."
		},
		"SubscriptionKeyParameterNamesContract": {
		  "properties": {
			"header": {
			  "type": "string",
			  "description": "Subscription key header name."
			},
			"query": {
			  "type": "string",
			  "description": "Subscription key query string parameter name."
			}
		  },
		  "description": "Subscription key parameter names details.",
		  "example": {
			"subscriptionKeyParameterNames": {
			  "query": "customQueryParameterName",
			  "header": "customHeaderParameterName"
			}
		  }
		}
  },
  "parameters": {
		"ApiIdParameter": {
		  "name": "apiId",
		  "in": "path",
		  "required": true,
		  "type": "string",
		  "description": "API identifier. Must be unique in the current API Management service instance.",
		  "minLength": 1,
		  "maxLength": 256,
		  "pattern": "^[^*#&+:<>?]+$",
		  "x-ms-parameter-location": "method"
		},
		"ApiVersionParameter": {
		  "name": "api-version",
		  "in": "query",
		  "required": true,
		  "type": "string",
		  "description": "Version of the API to be used with the client request."
		},
		"GroupIdParameter": {
		  "name": "groupId",
		  "in": "path",
		  "required": true,
		  "type": "string",
		  "description": "Group identifier. Must be unique in the current API Management service instance.",
		  "minLength": 1,
		  "maxLength": 256,
		  "pattern": "^[^*#&+:<>?]+$",
		  "x-ms-parameter-location": "method"
		},
		"ProductIdParameter": {
		  "name": "productId",
		  "in": "path",
		  "required": true,
		  "type": "string",
		  "description": "Product identifier. Must be unique in the current API Management service instance.",
		  "minLength": 1,
		  "maxLength": 256,
		  "pattern": "^[^*#&+:<>?]+$",
		  "x-ms-parameter-location": "method"
		},
		"ResourceGroupNameParameter": {
		  "name": "resourceGroupName",
		  "in": "path",
		  "required": true,
		  "type": "string",
		  "description": "The name of the resource group.",
		  "x-ms-parameter-location": "method"
		},
		"ServiceNameParameter": {
		  "name": "serviceName",
		  "in": "path",
		  "required": true,
		  "type": "string",
		  "description": "The name of the API Management service.",
		  "minLength": 1,
		  "maxLength": 50,
		  "pattern": "^[a-zA-Z](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$",
		  "x-ms-parameter-location": "method"
		},
		"SkipQueryParameter": {
		  "name": "$skip",
		  "in": "query",
		  "required": false,
		  "type": "integer",
		  "format": "int32",
		  "description": "Number of records to skip.",
		  "minimum": 0,
		  "x-ms-parameter-location": "method"
		},
		"SubscriptionIdParameter": {
		  "name": "subscriptionId",
		  "in": "path",
		  "required": true,
		  "type": "string",
		  "description": "Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
		},
		"TopQueryParameter": {
		  "name": "$top",
		  "in": "query",
		  "required": false,
		  "type": "integer",
		  "format": "int32",
		  "description": "Number of records to return.",
		  "minimum": 1,
		  "x-ms-parameter-location": "method"
		}
  }
}