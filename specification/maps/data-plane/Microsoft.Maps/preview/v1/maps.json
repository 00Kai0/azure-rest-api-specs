{
    "swagger": "2.0",
    "info": {
        "title": "Azure Maps",
        "version": "1.0",
        "description": "Azure Maps REST APIs"
    },
    "host": "atlas.microsoft.com",
    "schemes": [
        "https"
    ],
    "consumes": [],
    "produces": [
        "application/json",
        "application/xml"
    ],
    "securityDefinitions": {
        "apiKeyHeader": {
            "type": "apiKey",
            "name": "Ocp-Apim-Subscription-Key",
            "in": "header"
        },
        "apiKeyQuery": {
            "type": "apiKey",
            "name": "subscription-key",
            "in": "query"
        }
    },
    "security": [
        {
            "apiKeyHeader": []
        },
        {
            "apiKeyQuery": []
        }
    ],
    "parameters": {
        "SubscriptionKey": {
            "name": "subscription-key",
            "description": "Azure Maps subscription key",
            "type": "string",
            "in": "query",
            "required": true,
            "x-ms-parameter-location": "client"
        },
        "ApiVersion": {
            "name": "api-version",
            "description": "Version number of Azure Maps API. Current version is 1.0",
            "type": "string",
            "in": "query",
            "required": true,
            "default": "1.0",
            "x-ms-parameter-location": "client"
        },
        "AcceptLanguage": {
            "name": "Accept-Language",
            "in": "header",
            "description": "Specifies the list of acceptable ISO 639-1 language codes in which the timezone names should be returned.",
            "required": false,
            "type": "string",
            "x-ms-parameter-location": "method"
        },
        "TimezoneOptions": {
            "name": "options",
            "in": "query",
            "description": "Alternatively, use alias \"o\". Options available for types of information returned in the result.",
            "required": false,
            "type": "string",
            "enum": [
                "none",
                "zoneInfo",
                "transitions",
                "all"
            ],
            "x-ms-enum": {
                "name": "options",
                "modelAsString": false,
                "values": [
                    {
                        "value": "none",
                        "description": "Do not include zoneinfo or transitions in the result."
                    },
                    {
                        "value": "zoneInfo",
                        "description": "Include additional time zone info in the result."
                    },
                    {
                        "value": "transitions",
                        "description": "Include transition information in the result (The number of transitions is currently capped at 250)."
                    },
                    {
                        "value": "all",
                        "description": "Include both zoneinfo and transitions in the result."
                    }
                ]
            },
            "x-ms-parameter-location": "method"
        },
        "TimezoneTimeStamp": {
            "name": "timeStamp",
            "in": "query",
            "description": "Alternatively, use alias \"stamp\", or \"s\". Reference time, if omitted, the API will use the machine time serving the request.",
            "required": false,
            "type": "string",
            "x-ms-parameter-location": "method",
            "format": "date-time"
        },
        "TimezoneTransitionsFrom": {
            "name": "transitionsFrom",
            "in": "query",
            "description": "Alternatively, use alias \"tf\". The start date from which daylight savings time (DST) transitions are requested, only applies when \"options\" = all or \"options\" = transitions.",
            "required": false,
            "type": "string",
            "x-ms-parameter-location": "method",
            "format": "date-time"
        },
        "TimezoneTransitionsYears": {
            "name": "transitionsYears",
            "in": "query",
            "description": "Alternatively, use alias \"ty\". The number of years from \"transitionsFrom\" for which DST transitions are requested, only applies when \"options\" = all or \"options\" = transitions.",
            "required": false,
            "type": "integer",
            "x-ms-parameter-location": "method"
        },
        "TextFormat": {
            "name": "format",
            "description": "Desired format of the response. Possible values are json \u0026 xml.",
            "type": "string",
            "in": "path",
            "required": true,
            "enum": [
                "json",
                "xml"
            ],
            "x-ms-parameter-location": "method"
        },
        "TimeZoneFormat": {
            "name": "format",
            "description": "Desired format of the response. Possible value: json.",
            "type": "string",
            "in": "path",
            "required": true,
            "enum": [
                "json"
            ],
            "x-ms-parameter-location": "method"
        },
        "RasterTileFormat": {
            "name": "format",
            "description": "Desired format of the response. Possible value: png.",
            "type": "string",
            "in": "path",
            "required": true,
            "enum": [
                "png"
            ],
            "x-ms-enum": {
                "name": "format",
                "modelAsString": false,
                "values": [
                    {
                        "value": "png",
                        "description": "An image in the png format. Supports zoom levels 0 through 18."
                    }
                ]
            },
            "x-ms-parameter-location": "method"
        },
        "TileFormat": {
            "name": "format",
            "description": "Desired format of the response. Possible values are png \u0026 pbf.",
            "type": "string",
            "in": "path",
            "required": true,
            "enum": [
                "png",
                "pbf"
            ],
            "x-ms-enum": {
                "name": "format",
                "modelAsString": false,
                "values": [
                    {
                        "value": "png",
                        "description": "An image in the png format. Supports zoom levels 0 through 18."
                    },
                    {
                        "value": "pbf",
                        "description": "Vector graphic in the pbf format. Supports zoom levels 0 through 20."
                    }
                ]
            },
            "x-ms-parameter-location": "method"
        },
        "xTileIndex": {
            "name": "x",
            "x-ms-client-name": "xTileIndex",
            "in": "query",
            "description": "X index for the desired tile, based on Spherical Mercator projection coordinate system (EPSG:3857) ",
            "required": true,
            "type": "integer",
            "x-ms-parameter-location": "method"
        },
        "yTileIndex": {
            "name": "y",
            "x-ms-client-name": "yTileIndex",
            "in": "query",
            "description": "Y index for the desired tile, based on Spherical Mercator projection coordinate system (EPSG:3857)",
            "required": true,
            "type": "integer",
            "x-ms-parameter-location": "method"
        },
        "Zoom": {
            "name": "zoom",
            "in": "query",
            "description": "Zoom level for desired tile.",
            "required": true,
            "type": "integer",
            "x-ms-parameter-location": "method"
        },
        "Text": {
            "name": "text",
            "in": "query",
            "description": "Yes/no value to exclude textual data from response. Only images and country names will be in response.",
            "required": false,
            "type": "string",
            "enum": [
                "yes",
                "no"
            ],
            "default": "yes",
            "x-ms-parameter-location": "method"
        },
        "Language": {
            "name": "language",
            "in": "query",
            "description": "Language in which search results should be returned. Should be one of supported IETF language tags, case insensitive. When data in specified language is not available for a specific field, default language is used",
            "required": false,
            "type": "string",
            "x-ms-parameter-location": "method"
        },
        "OptionalBiasLat": {
            "name": "lat",
            "in": "query",
            "description": "Latitude where results should be biased. E.g. 37.337",
            "required": false,
            "type": "number",
            "x-ms-parameter-location": "method"
        },
        "OptionalBiasLon": {
            "name": "lon",
            "in": "query",
            "description": "Longitude where results should be biased. E.g. -121.89",
            "required": false,
            "type": "number",
            "x-ms-parameter-location": "method"
        },
        "RequiredBiasLat": {
            "name": "lat",
            "in": "query",
            "description": "Latitude where results should be biased. E.g. 37.337",
            "required": true,
            "type": "number",
            "x-ms-parameter-location": "method"
        },
        "RequiredBiasLon": {
            "name": "lon",
            "in": "query",
            "description": "Longitude where results should be biased. E.g. -121.89",
            "required": true,
            "type": "number",
            "x-ms-parameter-location": "method"
        },
        "Typeahead": {
            "name": "typeahead",
            "in": "query",
            "description": "Boolean. If the typeahead flag is set, the query will be interpreted as a partial input and the search will enter predictive mode",
            "required": false,
            "type": "boolean",
            "default": false,
            "x-ms-parameter-location": "method"
        },
        "Limit": {
            "name": "limit",
            "in": "query",
            "description": "Maximum number of responses that will be returned.",
            "required": false,
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 100,
            "x-ms-parameter-location": "method"
        },
        "CountrySet": {
            "name": "countrySet",
            "in": "query",
            "description": "Comma separated string of country codes, e.g. FR, ES. This will limit the search to the specified countries",
            "required": false,
            "type": "array",
            "items": {
                "type": "string"
            },
            "collectionFormat": "csv",
            "x-ms-parameter-location": "method"
        },
        "Radius": {
            "name": "radius",
            "in": "query",
            "description": "The radius in meters to for the results to be constrained to the defined area",
            "required": false,
            "type": "number",
            "x-ms-parameter-location": "method"
        },
        "Query": {
            "name": "query",
            "in": "query",
            "description": "The applicable query string and/or coordinates",
            "required": true,
            "type": "string",
            "x-ms-parameter-location": "method"
        },
        "SearchResultIndexSet": {
            "name": "idxSet",
            "in": "query",
            "description": "A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are: Addr = Address range interpolation, Geo = Geographies, PAD = Point Addresses, POI = Points of interest, Str = Streets, Xstr = Cross Streets (intersections)",
            "required": false,
            "type": "array",
            "items": {
                "type": "string",
                "enum": [
                    "Addr",
                    "Geo",
                    "PAD",
                    "POI",
                    "Str",
                    "Xstr"
                ],
                "x-ms-enum": {
                    "name": "idxSet",
                    "modelAsString": false,
                    "values": [
                        {
                            "value": "Addr",
                            "description": "Address range interpolation"
                        },
                        {
                            "value": "Geo",
                            "description": "Geographies"
                        },
                        {
                            "value": "PAD",
                            "description": "Point Addresses"
                        },
                        {
                            "value": "POI",
                            "description": "Points of interest"
                        },
                        {
                            "value": "Str",
                            "description": "Streets"
                        },
                        {
                            "value": "Xstr",
                            "description": "Cross Streets (Intersections)"
                        }
                    ]
                }
            },
            "collectionFormat": "csv",
            "x-ms-parameter-location": "method"
        },
        "BoundingBoxTopLeft": {
            "x-client-name": "BoundingBoxTopLeft",
            "name": "topLeft",
            "in": "query",
            "description": "Top left position of the bounding box. E.g. 37.553,-122.453",
            "required": false,
            "type": "string",
            "x-ms-parameter-location": "method"
        },
        "BoundingBoxBottomRight": {
            "x-client-name": "BoundingBoxBottomRight",
            "name": "btmRight",
            "in": "query",
            "description": "Bottom right position of the bounding box. E.g. 37.553,-122.453",
            "required": false,
            "type": "string",
            "x-ms-parameter-location": "method"
        },
        "VehicleLoadType": {
            "name": "vehicleLoadType",
            "in": "query",
            "description": "Types of cargo that may be classified as hazardous materials and restricted from some roads. Available vehicleLoadType values are US Hazmat classes 1 through 9, plus generic classifications for use in other countries. Values beginning with USHazmat are for US routing while otherHazmat should be used for all other countries. vehicleLoadType can be specified multiple times. This parameter is currently only considered for travelMode=truck.",
            "required": false,
            "type": "string",
            "enum": [
                "USHazmatClass1",
                "USHazmatClass2",
                "USHazmatClass3",
                "USHazmatClass4",
                "USHazmatClass5",
                "USHazmatClass6",
                "USHazmatClass7",
                "USHazmatClass8",
                "USHazmatClass9",
                "otherHazmatExplosive",
                "otherHazmatGeneral",
                "otherHazmatHarmfulToWater"
            ],
            "x-ms-enum": {
                "name": "vehicleLoadType",
                "modelAsString": false,
                "values": [
                    {
                        "value": "USHazmatClass1",
                        "description": "Explosives"
                    },
                    {
                        "value": "USHazmatClass2",
                        "description": "Compressed gas"
                    },
                    {
                        "value": "USHazmatClass3",
                        "description": "Flammable liquids"
                    },
                    {
                        "value": "USHazmatClass4",
                        "description": "Flammable solids"
                    },
                    {
                        "value": "USHazmatClass5",
                        "description": "Oxidizers"
                    },
                    {
                        "value": "USHazmatClass6",
                        "description": "Poisons"
                    },
                    {
                        "value": "USHazmatClass7",
                        "description": "Radioactive"
                    },
                    {
                        "value": "USHazmatClass8",
                        "description": "Corrosives"
                    },
                    {
                        "value": "USHazmatClass9",
                        "description": "Miscellaneous"
                    },
                    {
                        "value": "otherHazmatExplosive",
                        "description": "Explosives"
                    },
                    {
                        "value": "otherHazmatGeneral",
                        "description": "Miscellaneous"
                    },
                    {
                        "value": "otherHazmatHarmfulToWater",
                        "description": "Harmful to water"
                    }
                ]
            },
            "x-ms-parameter-location": "method"
        },
        "RouteType": {
            "name": "routeType",
            "in": "query",
            "description": "The type of route requested.",
            "required": false,
            "type": "string",
            "default": "fastest",
            "enum": [
                "fastest",
                "shortest",
                "eco",
                "thrilling"
            ],
            "x-ms-enum": {
                "name": "routeType",
                "modelAsString": false,
                "values": [
                    {
                        "value": "fastest",
                        "description": "The fastest route."
                    },
                    {
                        "value": "shortest",
                        "description": "The shortest route by distance."
                    },
                    {
                        "value": "eco",
                        "description": "A route balanced by economy and speed."
                    },
                    {
                        "value": "thrilling",
                        "description": "Includes interesting or challenging roads and uses as few motorways as possible. You can choose the level of turns included and also the degree of hilliness. See the hilliness and windingness parameters for how to set this. There is a limit of 900 km on routes planned with routeType=thrilling"
                    }
                ]
            },
            "x-ms-parameter-location": "method"
        },
        "Windingness": {
            "name": "windingness",
            "in": "query",
            "description": "Level of turns for thrilling route. This parameter can only be used in conjunction with routeType=thrilling.",
            "required": false,
            "type": "string",
            "default": "normal",
            "enum": [
                "low",
                "normal",
                "high"
            ],
            "x-ms-enum": {
                "name": "windingness",
                "modelAsString": false
            },
            "x-ms-parameter-location": "method"
        },
        "Hilliness": {
            "name": "hilliness",
            "in": "query",
            "description": "Degree of hilliness for thrilling route. This parameter can only be used in conjunction with routeType=thrilling.",
            "required": false,
            "type": "string",
            "default": "normal",
            "enum": [
                "low",
                "normal",
                "high"
            ],
            "x-ms-enum": {
                "name": "hilliness",
                "modelAsString": false
            },
            "x-ms-parameter-location": "method"
        },
        "TravelMode": {
            "name": "travelMode",
            "in": "query",
            "description": "The mode of travel for the requested route. Note that the requested travelMode may not be available for the entire route. Where the requested travelMode is not available for a particular section, the travelMode element of the response for that section will be other. Note that travel modes bus, motorcycle, taxi and van are BETA functionality. Full restriction data is not available in all areas. In calculateReachableRange requests, the values bicycle and pedestrian must not be used",
            "required": false,
            "type": "string",
            "default": "car",
            "enum": [
                "car",
                "truck",
                "taxi",
                "bus",
                "van",
                "motorcycle",
                "bicycle",
                "pedestrian"
            ],
            "x-ms-enum": {
                "name": "travelMode",
                "modelAsString": false
            },
            "x-ms-parameter-location": "method"
        },
        "Avoid": {
            "name": "avoid",
            "in": "query",
            "description": "Specifies something that the route calculation should try to avoid when determining the route. Can be specified multiple times. Possible values: (tollRoads avoids toll roads), (motorways avoids motorways), (ferries avoids ferries), (unpavedRoads avoids unpaved roads), (carpools avoids routes that require use of carpool (HOV/ High Occupancy Vehicle) lanes), (alreadyUsedRoads avoids using the same road multiple times. Most useful in conjunction with routeType=thrilling). In calculateReachableRange requests, the value alreadyUsedRoads must not be used.",
            "required": false,
            "type": "string",
            "enum": [
                "tollRoads",
                "motorways",
                "ferries",
                "unpavedRoads",
                "carpools",
                "alreadyUsedRoads"
            ],
            "x-ms-enum": {
                "name": "avoid",
                "modelAsString": false
            },
            "x-ms-parameter-location": "method"
        },
        "VehicleWeight": {
            "name": "vehicleWeight",
            "in": "query",
            "description": "Weight of the vehicle in kilograms.",
            "required": false,
            "type": "integer",
            "default": 0,
            "x-ms-parameter-location": "method"
        },
        "VehicleMaxSpeed": {
            "name": "vehicleMaxSpeed",
            "in": "query",
            "description": "Maximum speed of the vehicle in km/hour. A value of 0 means that an appropriate value for the vehicle will be determined and applied during route planning. A non-zero value may be overridden during route planning.",
            "required": false,
            "type": "integer",
            "default": 0,
            "x-ms-parameter-location": "method"
        },
        "VehicleLength": {
            "name": "vehicleLength",
            "in": "query",
            "description": "Length of the vehicle in meters. A value of 0 means that length restrictions are not considered.",
            "required": false,
            "type": "number",
            "format": "float",
            "default": 0,
            "x-ms-parameter-location": "method"
        },
        "VehicleHeight": {
            "name": "vehicleHeight",
            "in": "query",
            "description": "Height of the vehicle in meters. A value of 0 means that height restrictions are not considered.",
            "required": false,
            "type": "number",
            "format": "float",
            "default": 0,
            "x-ms-parameter-location": "method"
        },
        "VehicleWidth": {
            "name": "vehicleWidth",
            "in": "query",
            "description": "Width of the vehicle in meters. A value of 0 means that width restrictions are not considered.",
            "required": false,
            "type": "number",
            "format": "float",
            "default": 0,
            "x-ms-parameter-location": "method"
        },
        "VehicleAxleWeight": {
            "name": "vehicleAxleWeight",
            "in": "query",
            "description": "Weight per axle of the vehicle in kg. A value of 0 means that weight restrictions per axle are not considered.",
            "required": false,
            "type": "integer",
            "default": 0,
            "x-ms-parameter-location": "method"
        },
        "DepartAt": {
            "name": "departAt",
            "in": "query",
            "description": "The date and time of departure from the origin point. Departure times apart from now must be specified as a dateTime. When a time zone offset is not specified, it will be assumed to be that of the origin point. The departAt value must be in the future in the date-time format (1996-12-19T16:39:57-08:00).",
            "type": "string",
            "format": "date-time",
            "required": false,
            "x-ms-parameter-location": "method"
        },
        "ArriveAt": {
            "name": "arriveAt",
            "in": "query",
            "description": "The date and time of arrival at the destination point. It must be specified as a dateTime. When a time zone offset is not specified it will be assumed to be that of the destination point. The arriveAt value must be in the future. The arriveAt parameter cannot be used in conjunction with departAt, minDeviationDistance or minDeviationTime.",
            "type": "string",
            "format": "date-time",
            "required": false,
            "x-ms-parameter-location": "method"
        },
        "SectionType": {
            "name": "sectionType",
            "in": "query",
            "description": "Specifies which of the section types is reported in the route response.\n\nFor example if sectionType = pedestrian the sections which are suited for pedestrians only are returned. Multiple types can be used. The default sectionType refers to the travelMode input. By default travelMode is set to car",
            "required": false,
            "type": "string",
            "default": "travelMode",
            "enum": [
                "carTrain",
                "country",
                "ferry",
                "motorway",
                "pedestrian",
                "tollRoad",
                "tollVignette",
                "traffic",
                "travelMode",
                "tunnel"
            ],
            "x-ms-enum": {
                "name": "sectionType",
                "modelAsString": false
            }
        },
        "ComputeBestOrder": {
            "name": "computeBestOrder",
            "in": "query",
            "description": "Re-order the route waypoints to reduce the route length. Yields best results when used in conjunction with routeType __shortest__. Possible values are true or false. True computes a better order if possible, but is not allowed to be used in conjunction with maxAlternatives value greater than 0 or in conjunction with circle waypoints. The response will include the optimized waypoint indices and can be used with a maximum of 20 route waypoints. False will use the locations in the given order and not allowed to be used in conjunction with routeRepresentation __none__.",
            "required": false,
            "type": "boolean",
            "default": false
        },
        "RouteRepresentation": {
            "name": "routeRepresentation",
            "in": "query",
            "description": "Specifies the representation of the set of routes provided as response. This parameter value can only be used in conjunction with computeBestOrder=true.",
            "required": false,
            "type": "string",
            "default": "polyline",
            "enum": [
                "polyline",
                "none"
            ],
            "x-ms-enum": {
                "name": "routeRepresentation",
                "modelAsString": false,
                "values": [
                    {
                        "value": "polyline",
                        "description": "Includes route geometry in the response."
                    },
                    {
                        "value": "none",
                        "description": "Includes only the optimized waypoint indices but does not include the route geometry in the response."
                    }
                ]
            }
        },
        "ComputeTravelTimeFor": {
            "name": "computeTravelTimeFor",
            "in": "query",
            "description": "Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.",
            "required": false,
            "type": "string",
            "default": "none",
            "enum": [
                "none",
                "all"
            ],
            "x-ms-enum": {
                "name": "computeTravelTimeFor",
                "modelAsString": false,
                "values": [
                    {
                        "value": "none",
                        "description": "Does not compute additional travel times."
                    },
                    {
                        "value": "all",
                        "description": "Computes travel times for all types of traffic information and specifies all results in the fields noTrafficTravelTimeInSeconds, historicTrafficTravelTimeInSeconds and liveTrafficIncidentsTravelTimeInSeconds being included in the summaries in the route response."
                    }
                ]
            }
        },
        "VehicleHeading": {
            "name": "vehicleHeading",
            "in": "query",
            "description": "The directional heading of the vehicle in degrees starting at true North and continuing in clockwise direction. North is 0 degrees, east is 90 degrees, south is 180 degrees, west is 270 degrees. Possible values 0-359",
            "required": false,
            "type": "integer",
            "minimum": 0,
            "maximum": 359
        },
        "Report": {
            "name": "report",
            "in": "query",
            "description": "Specifies which data should be reported for diagnosis purposes. The only possible value is __effectiveSettings__. Reports the effective parameters or data used when calling the API. In the case of defaulted parameters the default will be reflected where the parameter was not specified by the caller.",
            "required": false,
            "type": "string"
        },
        "Traffic": {
            "name": "traffic",
            "in": "query",
            "description": "Possible values: (true (do consider all available traffic information during routing)), (false (ignore current traffic data during routing). Note that although the current traffic data is ignored during routing, the effect of historic traffic on effective road speeds is still incorporated).",
            "required": false,
            "type": "boolean",
            "default": true,
            "x-ms-parameter-location": "method"
        }
    },
    "responses": {
        "202": {
            "description": "Request Accepted: The request has been accepted for processing. Please use the URL in the Location Header to retry or access the results.",
            "schema": {
                "$ref": "#/definitions/Redirect"
            }
        },
        "400": {
            "description": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive.",
            "schema": {
                "$ref": "#/definitions/Error"
            }
        },
        "401": {
            "description": "Access denied due to invalid subscription key. Make sure to provide a valid key for an active subscription.",
            "schema": {
                "$ref": "#/definitions/Error"
            }
        },
        "403": {
            "description": "Permission, capacity, or authentication issues.",
            "schema": {
                "$ref": "#/definitions/Error"
            }
        },
        "404": {
            "description": "Not Found: the requested resource could not be found, but it may be available again in the future.",
            "schema": {
                "$ref": "#/definitions/Error"
            }
        },
        "500": {
            "description": "An error occurred while processing the request. Please try again later.",
            "schema": {
                "$ref": "#/definitions/Error"
            }
        }
    },
    "paths": {
        "/map/copyright/bounding/{format}": {
            "get": {
                "description": "Returns the copyright information for a given bounding box",
                "operationId": "Render_GetCopyrightBounding",
                "x-ms-examples": {
                    "GetCopyrightBounding": {
                        "$ref": "./examples/GetCopyrightBounding.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "name": "mincoordinates",
                        "in": "query",
                        "description": "Minimum coordinates of bounding box in latitude longitude coordinate system. E.g. 52.41064,4.84228",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maxcoordinates",
                        "in": "query",
                        "description": "Maximum coordinates of bounding box in latitude longitude coordinate system. E.g. 52.41064,4.84228",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/Text"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CopyrightBoundingResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/map/copyright/caption/{format}": {
            "get": {
                "description": "Returns the copyright caption information",
                "operationId": "Render_GetCopyrightCaption",
                "x-ms-examples": {
                    "GetCopyrightCaption": {
                        "$ref": "./examples/GetCopyrightCaption.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CopyrightCaptionResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/map/copyright/world/{format}": {
            "get": {
                "description": "Returns the copyright information for the world",
                "operationId": "Render_GetCopyrightWorld",
                "x-ms-examples": {
                    "GetCopyrightWorld": {
                        "$ref": "./examples/GetCopyrightWorld.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "$ref": "#/parameters/Text"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CopyrightWorldResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/map/copyright/tile/{format}": {
            "get": {
                "description": "Returns the copyright information for a given tile",
                "operationId": "Render_GetCopyrightTile",
                "x-ms-examples": {
                    "GetCopyrightTile": {
                        "$ref": "./examples/GetCopyrightTile.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "$ref": "#/parameters/Zoom"
                    },
                    {
                        "$ref": "#/parameters/xTileIndex"
                    },
                    {
                        "$ref": "#/parameters/yTileIndex"
                    },
                    {
                        "$ref": "#/parameters/Text"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CopyrightTileResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/map/static/{format}": {
            "get": {
                "description": "The static image service renders a user-defined, rectangular image containing a map section using a zoom level from 0 to 20.\n\nThe supported resolution range for the map image is from 1x1 to 8192x8192.\n\nIf you are deciding when to use the static image service over the map tile service, you may want to consider how you would like to interact with the rendered map. If the map contents will be relatively unchanging, a static map is a good choice. If you want to support a lot of zooming, panning and changing of the map content, the map tile service would be a better choice.\n\n__Note__ : Either __center__ or __bbox__ parameter must be supplied to the API.",
                "operationId": "Render_GetMapStaticImage",
                "x-ms-examples": {
                    "GetMapStaticImage": {
                        "$ref": "./examples/GetMapStaticImage.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/RasterTileFormat"
                    },
                    {
                        "name": "layer",
                        "in": "query",
                        "description": "Map layer requested. If layer is set to labels or hybrid, the format should be png.",
                        "required": false,
                        "default": "basic",
                        "type": "string",
                        "enum": [
                            "basic",
                            "hybrid",
                            "labels"
                        ],
                        "x-ms-enum": {
                            "name": "layer",
                            "modelAsString": false,
                            "values": [
                                {
                                    "value": "basic",
                                    "description": "Returns an image containing all map features including polygons, borders, roads and labels."
                                },
                                {
                                    "value": "hybrid",
                                    "description": "Returns an image containing borders, roads, and labels, and can be overlaid on other tiles (such as satellite imagery) to produce hybrid tiles."
                                },
                                {
                                    "value": "labels",
                                    "description": "Returns an image of just the map\u0027s label information."
                                }
                            ]
                        }
                    },
                    {
                        "name": "style",
                        "in": "query",
                        "description": "Map style to be returned. Currently, only style available is main.",
                        "required": false,
                        "default": "main",
                        "type": "string",
                        "enum": [
                            "main"
                        ]
                    },
                    {
                        "name": "zoom",
                        "in": "query",
                        "description": "Zoom level of the map desired. Note: bbox may not be used in conjunction with center, height or width.",
                        "required": false,
                        "default": 12,
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 20
                    },
                    {
                        "name": "center",
                        "in": "query",
                        "description": "Coordinates of the center point. Format: \u0027lon,lat\u0027. Projection used - EPSG:3857. Longitude range: -180 to 180. Latitude range: -85 to 85. Note: Either center or bbox are required parameters. They are mutually exclusive.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "bbox",
                        "in": "query",
                        "description": "Bounding box. Projection used - EPSG:3857. Format : \u0027minLon, minLat, maxLon, maxLat\u0027. Note: Either bbox or center are required parameters. They are mutually exclusive. It shouldn�t be used with height or width.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "height",
                        "in": "query",
                        "description": "Height of the resulting image, in pixels. Range is 1 to 8192. Default is 512.",
                        "required": false,
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 8192,
                        "default": 512
                    },
                    {
                        "name": "width",
                        "in": "query",
                        "description": "Width of the resulting image, in pixels. Range is 1 to 8192. Default is 512.",
                        "required": false,
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 8192,
                        "default": 512
                    }
                ],
                "produces": [
                    "image/png",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MapStaticResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/map/tile/{format}": {
            "get": {
                "description": "Returns a raster or vector map tile",
                "operationId": "Render_GetMapTile",
                "x-ms-examples": {
                    "GetMapTile": {
                        "$ref": "./examples/GetMapTile.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TileFormat"
                    },
                    {
                        "name": "layer",
                        "in": "query",
                        "description": "Map layer requested. Possible values are basic,hybrid \u0026 labels.",
                        "required": true,
                        "enum": [
                            "basic",
                            "hybrid",
                            "labels"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                            "name": "layer",
                            "modelAsString": false,
                            "values": [
                                {
                                    "value": "basic",
                                    "description": "Returns a tile containing all map features including polygons, borders, roads and labels."
                                },
                                {
                                    "value": "hybrid",
                                    "description": "Returns a tile containing borders, roads, and labels, and can be overlaid on other tiles (such as satellite imagery) to produce hybrid tiles."
                                },
                                {
                                    "value": "labels",
                                    "description": "Returns a tile of just the map\u0027s label information."
                                }
                            ]
                        }
                    },
                    {
                        "name": "style",
                        "in": "query",
                        "description": "Map style to be returned. Currently there is only one style, e.g. main",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "main"
                        ],
                        "x-ms-enum": {
                            "name": "MapTileStyle",
                            "modelAsString": false,
                            "values": [
                                {
                                    "value": "main",
                                    "description": "Azure Maps main style"
                                }
                            ]
                        }
                    },
                    {
                        "$ref": "#/parameters/Zoom"
                    },
                    {
                        "$ref": "#/parameters/xTileIndex"
                    },
                    {
                        "$ref": "#/parameters/yTileIndex"
                    },
                    {
                        "name": "tileSize",
                        "in": "query",
                        "description": "The size of the returned map tile in pixels.",
                        "required": false,
                        "type": "integer",
                        "default": 256,
                        "enum": [
                            256,
                            512
                        ],
                        "x-ms-enum": {
                            "name": "tileSize",
                            "modelAsString": false,
                            "values": [
                                {
                                    "value": 256,
                                    "description": "Return a 256 by 256 pixel tile."
                                },
                                {
                                    "value": 512,
                                    "description": "Return a 512 by 512 pixel tile."
                                }
                            ]
                        }
                    },
                    {
                        "$ref": "#/parameters/Language"
                    }
                ],
                "produces": [
                    "image/png",
                    "image/pbf",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MapTileResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/search/fuzzy/{format}": {
            "get": {
                "description": "Returns the search results from a fuzzy search",
                "operationId": "Search_GetSearchFuzzy",
                "x-ms-examples": {
                    "GetSearchFuzzy": {
                        "$ref": "./examples/GetSearchFuzzy.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    },
                    {
                        "$ref": "#/parameters/Typeahead"
                    },
                    {
                        "$ref": "#/parameters/Limit"
                    },
                    {
                        "name": "ofs",
                        "in": "query",
                        "description": "Starting offset of the returned results within the full result set.",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "maximum": 1900
                    },
                    {
                        "$ref": "#/parameters/CountrySet"
                    },
                    {
                        "$ref": "#/parameters/OptionalBiasLat"
                    },
                    {
                        "$ref": "#/parameters/OptionalBiasLon"
                    },
                    {
                        "$ref": "#/parameters/Radius"
                    },
                    {
                        "$ref": "#/parameters/BoundingBoxTopLeft"
                    },
                    {
                        "$ref": "#/parameters/BoundingBoxBottomRight"
                    },
                    {
                        "$ref": "#/parameters/Language"
                    },
                    {
                        "name": "extendedPostalCodesFor",
                        "in": "query",
                        "description": "Indexes for which extended postal codes should be included in the results. Available indexes are: Addr = Address ranges, Geo = Geographies, PAD = Point Addresses, POI = Points of Interest, Str = Streets, XStr = Cross Streets (intersections)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "minFuzzyLevel",
                        "in": "query",
                        "description": "Minimum fuzzyness level to be used.",
                        "required": false,
                        "type": "integer",
                        "default": 1,
                        "minimum": 1,
                        "maximum": 4
                    },
                    {
                        "name": "maxFuzzyLevel",
                        "in": "query",
                        "description": "Maximum fuzzyness level to be used.",
                        "required": false,
                        "type": "integer",
                        "default": 2,
                        "minimum": 1,
                        "maximum": 4
                    },
                    {
                        "$ref": "#/parameters/SearchResultIndexSet"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SearchFuzzyResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/search/poi/{format}": {
            "get": {
                "description": "Returns the search results from a POI search",
                "operationId": "Search_GetSearchPOI",
                "x-ms-examples": {
                    "GetSearchPOI": {
                        "$ref": "./examples/GetSearchPOI.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    },
                    {
                        "$ref": "#/parameters/Typeahead"
                    },
                    {
                        "$ref": "#/parameters/Limit"
                    },
                    {
                        "name": "ofs",
                        "in": "query",
                        "description": "Starting offset of the returned results within the full result set.",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "maximum": 1900
                    },
                    {
                        "$ref": "#/parameters/CountrySet"
                    },
                    {
                        "$ref": "#/parameters/OptionalBiasLat"
                    },
                    {
                        "$ref": "#/parameters/OptionalBiasLon"
                    },
                    {
                        "$ref": "#/parameters/Radius"
                    },
                    {
                        "$ref": "#/parameters/BoundingBoxTopLeft"
                    },
                    {
                        "$ref": "#/parameters/BoundingBoxBottomRight"
                    },
                    {
                        "$ref": "#/parameters/Language"
                    },
                    {
                        "name": "extendedPostalCodesFor",
                        "in": "query",
                        "description": "Indexes for which extended postal codes should be included in the results. POI = Points of Interest",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SearchPoiResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/search/nearby/{format}": {
            "get": {
                "description": "Returns the nearby POIs around the given location.",
                "operationId": "Search_GetSearchNearby",
                "x-ms-examples": {
                    "GetSearchPOI": {
                        "$ref": "./examples/GetSearchNearby.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "$ref": "#/parameters/RequiredBiasLat"
                    },
                    {
                        "$ref": "#/parameters/RequiredBiasLon"
                    },
                    {
                        "$ref": "#/parameters/Limit"
                    },
                    {
                        "name": "ofs",
                        "in": "query",
                        "description": "Starting offset of returned results. Max value is 1900.",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "minimum": 0,
                        "maximum": 1900
                    },
                    {
                        "$ref": "#/parameters/CountrySet"
                    },
                    {
                        "$ref": "#/parameters/Radius"
                    },
                    {
                        "$ref": "#/parameters/Language"
                    },
                    {
                        "name": "extendedPostalCodesFor",
                        "in": "query",
                        "description": "Indexes for which extended postal codes should be included in the results. POI = Points of Interest",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SearchNearbyResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/search/poi/category/{format}": {
            "get": {
                "description": "Returns the search results from a POI Category search",
                "operationId": "Search_GetSearchPOICategory",
                "x-ms-examples": {
                    "GetSearchPOICategory": {
                        "$ref": "./examples/GetSearchPOICategory.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    },
                    {
                        "$ref": "#/parameters/Typeahead"
                    },
                    {
                        "$ref": "#/parameters/Limit"
                    },
                    {
                        "name": "multiplier",
                        "in": "query",
                        "description": "Multiplies the limit by this value to gather more candidate POIs, which will then be sorted by drive distance, returning only the top candidates according to the limit.",
                        "required": false,
                        "type": "integer",
                        "default": 2
                    },
                    {
                        "name": "routingTimeout",
                        "in": "query",
                        "description": "Number of milliseconds routing engine can take to give the results.",
                        "required": false,
                        "type": "integer",
                        "default": 4000
                    },
                    {
                        "$ref": "#/parameters/CountrySet"
                    },
                    {
                        "$ref": "#/parameters/OptionalBiasLat"
                    },
                    {
                        "$ref": "#/parameters/OptionalBiasLon"
                    },
                    {
                        "$ref": "#/parameters/Radius"
                    },
                    {
                        "$ref": "#/parameters/BoundingBoxTopLeft"
                    },
                    {
                        "$ref": "#/parameters/BoundingBoxBottomRight"
                    },
                    {
                        "$ref": "#/parameters/Language"
                    },
                    {
                        "name": "extendedPostalCodesFor",
                        "in": "query",
                        "description": "Indexes for which extended postal codes should be included in the results. Available indexes are: Addr = Address ranges, Geo = Geographies, PAD = Point Addresses, POI = Points of Interest, Str = Streets, XStr = Cross Streets (intersections)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SearchPoiCategoryResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/search/address/{format}": {
            "get": {
                "description": "In some cases, a fuzzy search might be too much. For example, if you are only interested in traditional geocoding, Address Search can be used for address look up exclusively. The geocoding is performed by hitting the endpoint with just the address or partial address in question. The search index will be queried for everything above the street level data and no POIs will be returned. Note that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact street addresses or street or intersections as well as higher level geographies such as city centers, counties, states etc.",
                "operationId": "Search_GetSearchAddress",
                "x-ms-examples": {
                    "GetSearchAddress": {
                        "$ref": "./examples/GetSearchAddress.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    },
                    {
                        "$ref": "#/parameters/Typeahead"
                    },
                    {
                        "$ref": "#/parameters/Limit"
                    },
                    {
                        "name": "ofs",
                        "in": "query",
                        "description": "Starting offset of the returned results within the full result set.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0,
                        "default": 0
                    },
                    {
                        "$ref": "#/parameters/CountrySet"
                    },
                    {
                        "$ref": "#/parameters/OptionalBiasLat"
                    },
                    {
                        "$ref": "#/parameters/OptionalBiasLon"
                    },
                    {
                        "$ref": "#/parameters/Radius"
                    },
                    {
                        "$ref": "#/parameters/BoundingBoxTopLeft"
                    },
                    {
                        "$ref": "#/parameters/BoundingBoxBottomRight"
                    },
                    {
                        "$ref": "#/parameters/Language"
                    },
                    {
                        "name": "extendedPostalCodesFor",
                        "in": "query",
                        "description": "Indexes for which extended postal codes should be included in the results. Available indexes are: Addr = Address ranges, Geo = Geographies, PAD = Point Addresses, POI = Points of Interest, Str = Streets, XStr = Cross Streets (intersections)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SearchAddressResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/search/address/reverse/{format}": {
            "get": {
                "description": "Returns the search results from a Reverse address search",
                "operationId": "Search_GetSearchAddressReverse",
                "x-ms-examples": {
                    "GetSearchAddressReverse": {
                        "$ref": "./examples/GetSearchAddressReverse.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    },
                    {
                        "name": "returnSpeedLimit",
                        "in": "query",
                        "description": "Boolean. To enable return of the posted speedlimit",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "heading",
                        "in": "query",
                        "description": "The directional heading of the vehicle in degrees, for travel along a segment of roadway. 0 is North, 90 is East and so on, values range from -360 to 360. The precision can include upto one decimal place",
                        "required": false,
                        "type": "number",
                        "minimum": -360.0,
                        "maximum": 360.0
                    },
                    {
                        "$ref": "#/parameters/Radius"
                    },
                    {
                        "name": "number",
                        "in": "query",
                        "description": "If a number is sent in along with the request, the response may include the side of the street (Left/Right) and also an offset position for that number",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "returnRoadUse",
                        "in": "query",
                        "description": "Boolean. To enable return of the road use array for reversegeocodes at street level",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "roadUse",
                        "in": "query",
                        "description": "To restrict reversegeocodes to a certain type of roaduse. The road use array for reversegeocodes can be one or more of LimitedAccess, Arterial, Terminal, Ramp, Rotary, LocalStreet",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SearchAddressReverseResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/search/address/reverse/crossStreet/{format}": {
            "get": {
                "description": "Returns the search results from a Cross Street address search",
                "operationId": "Search_GetSearchAddressReverseCrossStreet",
                "x-ms-examples": {
                    "GetSearchAddressReverseCrossStreet": {
                        "$ref": "./examples/GetSearchAddressReverseCrossStreet.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    },
                    {
                        "name": "heading",
                        "in": "query",
                        "description": "The directional heading of the vehicle in degrees, for travel along a segment of roadway. 0 is North, 90 is East and so on, values range from -360 to 360. The precision can include upto one decimal place",
                        "required": false,
                        "type": "number",
                        "minimum": -360.0,
                        "maximum": 360.0
                    },
                    {
                        "$ref": "#/parameters/Radius"
                    },
                    {
                        "$ref": "#/parameters/Language"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SearchAddressReverseCrossStreetResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/search/address/structured/{format}": {
            "get": {
                "description": "Returns the search results from a Structured address search",
                "operationId": "Search_GetSearchAddressStructured",
                "x-ms-examples": {
                    "GetSearchAddressStructured": {
                        "$ref": "./examples/GetSearchAddressStructured.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "name": "countryCode",
                        "in": "query",
                        "description": "The 2 or 3 letter country code portion of an address. E.g. US",
                        "required": true,
                        "default": "US",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "Maximum number of responses that will be returned",
                        "required": false,
                        "type": "integer",
                        "default": 10
                    },
                    {
                        "name": "ofs",
                        "in": "query",
                        "description": "Starting offset of the returned results within the full result set",
                        "required": false,
                        "type": "integer",
                        "default": 0
                    },
                    {
                        "name": "streetNumber",
                        "in": "query",
                        "description": "The street number portion of an address",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "streetName",
                        "in": "query",
                        "description": "The street name portion of an address",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "crossStreet",
                        "in": "query",
                        "description": "The cross street name for the structured address",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "municipality",
                        "in": "query",
                        "description": "The municipality portion of an address",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "municipalitySubdivision",
                        "in": "query",
                        "description": "The municipality subdivision (sub/super city) for the structured address",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "countryTertiarySubdivision",
                        "in": "query",
                        "description": "The named area for the structured address",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "countrySecondarySubdivision",
                        "in": "query",
                        "description": "The county for the structured address",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "countrySubdivision",
                        "in": "query",
                        "description": "The country subdividion portion of an address",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "postalCode",
                        "in": "query",
                        "description": "The postal code portion of an address",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "extendedPostalCodesFor",
                        "in": "query",
                        "description": "Indexes for which extended postal codes should be included in the results. Available indexes are: Addr = Address ranges, Geo = Geographies, PAD = Point Addresses, POI = Points of Interest, Str = Streets, XStr = Cross Streets (intersections)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SearchAddressStructuredResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/search/geometry/{format}": {
            "post": {
                "description": "The geometry search endpoint allows you to perform a free form search inside a single geometry or many of them. The search results that fall inside the geometry/geometries will be returned.\n\nAvailable geometry types are Polygon and Circle. The geometry should be provided as a GeoJSON FeatureCollection. The FeatureCollection can contain a Max of 50 GeoJSON Feature objects. Each Feature object should represent either a Polygon or a Circle. A Polygon geometry can have a max of 50 coordinates. A Feature object for the Circle geometry must contain the radius value (in meters) in the object\u0027s properties.\n\nTo send the geometry you will use a POST/GET request with the JSON as a string value for the geometryList parameter, POST is recommended for large datasets. POST requests require the \"Content-Type\" header to be set to \"application/json\"",
                "operationId": "Search_SearchInsideGeometry",
                "x-ms-examples": {
                    "SearchInsideGeometry": {
                        "$ref": "./examples/SearchInsideGeometry.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "$ref": "#/parameters/Limit"
                    },
                    {
                        "$ref": "#/parameters/Language"
                    },
                    {
                        "name": "extendedPostalCodesFor",
                        "description": "Indexes for which extended postal codes should be included in the results. Available indexes are: Addr = Address ranges, Geo = Geographies, PAD = Point Addresses, POI = Points of Interest, Str = Streets, XStr = Cross Streets (intersections)",
                        "required": false,
                        "type": "string",
                        "in": "query"
                    },
                    {
                        "$ref": "#/parameters/SearchResultIndexSet"
                    },
                    {
                        "name": "FeatureCollection",
                        "in": "body",
                        "description": "A GeoJSON FeatureCollection object representing the geometry to search in.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FeatureCollectionGeoJson"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SearchGeometryResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/search/alongRoute/{format}": {
            "post": {
                "description": "The Search Along Route endpoint allows you to perform a fuzzy search for POIs along a specified route. This search is constrained by specifying detour time limiting measure.\n\nTo send the route points you will use a POST request where the request body will contain the route parameter in JSON format. The minimum number of route points is 2. It is possible that original route will be altered, some of its points may be skipped. If the route that passes through the found point is faster than the original one, the detour time value is negative. POST requests require the \"Content-Type\" header to be set to \"application/json\"",
                "operationId": "Search_SearchAlongRoute",
                "x-ms-examples": {
                    "SearchAlongRoute": {
                        "$ref": "./examples/SearchAlongRoute.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "name": "maxDetourTime",
                        "description": "Maximum detour time of the point of interest in seconds. Max value is 3600 seconds.",
                        "required": true,
                        "type": "integer",
                        "in": "query"
                    },
                    {
                        "name": "limit",
                        "description": "Maximum number of responses that will be returned.",
                        "required": false,
                        "type": "integer",
                        "in": "query",
                        "default": 10,
                        "maximum": 20
                    },
                    {
                        "name": "Route",
                        "in": "body",
                        "description": "The route to search along represented by a GeoJSON LineString geometry object.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LineStringGeoJson"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SearchAlongRouteResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/route/directions/{format}": {
            "get": {
                "description": "Returns  a route between an origin and a destination, passing through waypoints if they are specified. The route will take into account factors such as current traffic and the typical road speeds on the requested day of the week and time of day.\n\nInformation returned includes the distance, estimated travel time, and a representation of the route geometry. Additional routing information such as optimized waypoint order or turn by turn instructions is also available, depending on the options selected.",
                "operationId": "Route_GetRouteDirections",
                "x-ms-examples": {
                    "GetRouteDirections": {
                        "$ref": "./examples/GetRouteDirections.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "The Coordinates through which the route is calculated. Needs two coordinates at least. Delimited by colon. First one is the origin and the last is the destination of the route. Optional coordinates in between act as WayPoints in the route.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maxAlternatives",
                        "in": "query",
                        "description": "Number of desired alternative routes to be calculated.",
                        "required": false,
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 5,
                        "default": 0
                    },
                    {
                        "name": "alternativeType",
                        "in": "query",
                        "description": "Controls the optimality, with respect to the given planning criteria. Controls the optimality, with respect to the given planning criteria, of the calculated alternatives compared to the reference route.",
                        "required": false,
                        "type": "string",
                        "default": "anyRoute",
                        "enum": [
                            "anyRoute",
                            "betterRoute"
                        ],
                        "x-ms-enum": {
                            "name": "alternativeType",
                            "modelAsString": false,
                            "values": [
                                {
                                    "value": "anyRoute",
                                    "description": "Allow any alternative route to be returned irrespective of how it compares to the reference route in terms of optimality."
                                },
                                {
                                    "value": "betterRoute",
                                    "description": "Return an alternative route only if it is better than the reference route according to the given planning criteria."
                                }
                            ]
                        }
                    },
                    {
                        "name": "minDeviationDistance",
                        "in": "query",
                        "description": "All alternative routes returned will follow the reference route (see section POST Requests) from the origin point of the calculateRoute request for at least this number of meters. Can only be used when reconstructing a route. The minDeviationDistance parameter cannot be used in conjunction with arriveAt",
                        "required": false,
                        "type": "integer",
                        "default": 0
                    },
                    {
                        "$ref": "#/parameters/ArriveAt"
                    },
                    {
                        "$ref": "#/parameters/DepartAt"
                    },
                    {
                        "name": "minDeviationTime",
                        "in": "query",
                        "description": "All alternative routes returned will follow the reference route (see section POST Requests) from the origin point of the calculateRoute request for at least this number of seconds. Can only be used when reconstructing a route. The minDeviationTime parameter cannot be used in conjunction with arriveAt",
                        "required": false,
                        "type": "integer",
                        "default": 0
                    },
                    {
                        "name": "instructionsType",
                        "in": "query",
                        "description": "If specified, guidance instructions will be returned. Note that the instructionsType parameter cannot be used in conjunction with routeRepresentation=none",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "coded",
                            "text",
                            "tagged"
                        ],
                        "x-ms-enum": {
                            "name": "instructionsType",
                            "modelAsString": false,
                            "values": [
                                {
                                    "value": "coded",
                                    "description": "Returns raw instruction data without human-readable messages."
                                },
                                {
                                    "value": "text",
                                    "description": "Returns raw instructions data with human-readable messages in plain text."
                                },
                                {
                                    "value": "tagged",
                                    "description": "Returns raw instruction data with tagged human-readable messages to permit formatting."
                                }
                            ]
                        }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language parameter determines the language of the guidance messages. It does not affect proper nouns (the names of streets, plazas, etc.) It has no effect when instructionsType=coded. Allowed values are (a subset of) the IETF language tags described",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "$ref": "#/parameters/ComputeBestOrder"
                    },
                    {
                        "$ref": "#/parameters/RouteRepresentation"
                    },
                    {
                        "$ref": "#/parameters/ComputeTravelTimeFor"
                    },
                    {
                        "$ref": "#/parameters/VehicleHeading"
                    },
                    {
                        "$ref": "#/parameters/Report"
                    },
                    {
                        "$ref": "#/parameters/SectionType"
                    },
                    {
                        "$ref": "#/parameters/VehicleAxleWeight"
                    },
                    {
                        "$ref": "#/parameters/VehicleWidth"
                    },
                    {
                        "$ref": "#/parameters/VehicleHeight"
                    },
                    {
                        "$ref": "#/parameters/VehicleLength"
                    },
                    {
                        "$ref": "#/parameters/VehicleMaxSpeed"
                    },
                    {
                        "$ref": "#/parameters/VehicleWeight"
                    },
                    {
                        "$ref": "#/parameters/Windingness"
                    },
                    {
                        "$ref": "#/parameters/Hilliness"
                    },
                    {
                        "$ref": "#/parameters/TravelMode"
                    },
                    {
                        "$ref": "#/parameters/Avoid"
                    },
                    {
                        "$ref": "#/parameters/Traffic"
                    },
                    {
                        "$ref": "#/parameters/RouteType"
                    },
                    {
                        "$ref": "#/parameters/VehicleLoadType"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RouteDirectionsResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/timezone/byId/{format}": {
            "get": {
                "description": "Returns the timezone info for an IANA ID",
                "operationId": "Timezone_GetTimezoneByID",
                "x-ms-examples": {
                    "GetTimezoneByID": {
                        "$ref": "./examples/GetTimezoneByID.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/AcceptLanguage"
                    },
                    {
                        "$ref": "#/parameters/TimezoneOptions"
                    },
                    {
                        "$ref": "#/parameters/TimezoneTimeStamp"
                    },
                    {
                        "$ref": "#/parameters/TimezoneTransitionsFrom"
                    },
                    {
                        "$ref": "#/parameters/TimezoneTransitionsYears"
                    },
                    {
                        "$ref": "#/parameters/TimeZoneFormat"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TimezoneByIdResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/timezone/byCoordinates/{format}": {
            "get": {
                "description": "Returns the timezone info for a coordinates",
                "operationId": "Timezone_GetTimezoneByCoordinates",
                "x-ms-examples": {
                    "GetTimezoneByCoordinates": {
                        "$ref": "./examples/GetTimezoneByCoordinates.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/AcceptLanguage"
                    },
                    {
                        "$ref": "#/parameters/TimezoneOptions"
                    },
                    {
                        "$ref": "#/parameters/TimezoneTimeStamp"
                    },
                    {
                        "$ref": "#/parameters/TimezoneTransitionsFrom"
                    },
                    {
                        "$ref": "#/parameters/TimezoneTransitionsYears"
                    },
                    {
                        "$ref": "#/parameters/TimeZoneFormat"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TimezoneByCoordinatesResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/timezone/enumWindows/{format}": {
            "get": {
                "description": "Returns all the Windows timezones",
                "operationId": "Timezone_GetTimezoneEnumWindows",
                "x-ms-examples": {
                    "GetTimezoneEnumWindows": {
                        "$ref": "./examples/GetTimezoneEnumWindows.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TimeZoneFormat"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TimezoneEnumWindowsResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/timezone/enumIana/{format}": {
            "get": {
                "description": "Returns all the IANA timezones",
                "operationId": "Timezone_GetTimezoneEnumIANA",
                "x-ms-examples": {
                    "GetTimezoneEnumIANA": {
                        "$ref": "./examples/GetTimezoneEnumIANA.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TimeZoneFormat"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TimezoneEnumIanaResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/timezone/ianaVersion/{format}": {
            "get": {
                "description": "Returns the current IANA version",
                "operationId": "Timezone_GetTimezoneIANAVersion",
                "x-ms-examples": {
                    "GetTimezoneIANAVersion": {
                        "$ref": "./examples/GetTimezoneIANAVersion.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TimeZoneFormat"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TimezoneIanaVersionResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/timezone/windowsToIana/{format}": {
            "get": {
                "description": "Get the IANA timezone from a Windows timezone",
                "operationId": "Timezone_GetTimezoneWindowsToIANA",
                "x-ms-examples": {
                    "GetTimezoneWindowsToIANA": {
                        "$ref": "./examples/GetTimezoneWindowsToIANA.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TimeZoneFormat"
                    },
                    {
                        "$ref": "#/parameters/Query"
                    },
                    {
                        "name": "territory",
                        "in": "query",
                        "description": "Windows Time Zone territory code.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TimezoneWindowToIanaResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                },
                "produces": [
                    "application/json"
                ]
            }
        },
        "/traffic/flow/tile/{format}": {
            "get": {
                "description": "Get the traffic flow tile for a given coordinates",
                "operationId": "Traffic_GetTrafficFlowTile",
                "x-ms-examples": {
                    "GetTrafficFlowTile": {
                        "$ref": "./examples/GetTrafficFlowTile.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/RasterTileFormat"
                    },
                    {
                        "name": "style",
                        "in": "query",
                        "description": "The style to be used to render the tile. Valid values are absolute which returns colors reflecting the absolute speed measured, relative which returns the speed relative to free-flow, Relative-delay which displays relative speeds only where they are different from the freeflow speeds",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "absolute",
                            "relative",
                            "relative-delay",
                            "reduced-sensitivity"
                        ],
                        "x-ms-enum": {
                            "name": "TrafficFlowTileStyle",
                            "modelAsString": false,
                            "values": [
                                {
                                    "value": "absolute",
                                    "description": "Colors will reflect the absolute speed measured."
                                },
                                {
                                    "value": "relative",
                                    "description": "Colors will reflect the speed relative to free-flow."
                                },
                                {
                                    "value": "relative-delay",
                                    "description": "Displays relative colors only where they are different from the freeflow speeds."
                                },
                                {
                                    "value": "reduced-sensitivity",
                                    "description": "Displays relative colors but a larger difference from freeflow is required for segments to change the color."
                                }
                            ]
                        }
                    },
                    {
                        "$ref": "#/parameters/Zoom"
                    },
                    {
                        "$ref": "#/parameters/xTileIndex"
                    },
                    {
                        "$ref": "#/parameters/yTileIndex"
                    },
                    {
                        "name": "thickness",
                        "in": "query",
                        "description": "The value of the width of the line representing traffic. This value is a multiplier and the accepted values range from 1 - 20. The default value is 10.",
                        "required": false,
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 20,
                        "default": 10
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TrafficFlowTileResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                },
                "produces": [
                    "image/png",
                    "application/json"
                ]
            }
        },
        "/traffic/flow/segment/{format}": {
            "get": {
                "description": "Get the traffic flow segment for the given coordinates",
                "operationId": "Traffic_GetTrafficFlowSegment",
                "x-ms-examples": {
                    "GetTrafficFlowSegment": {
                        "$ref": "./examples/GetTrafficFlowSegment.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "name": "style",
                        "in": "query",
                        "description": "The style to be used to render the tile. Valid values are absolute which returns colors reflecting the absolute speed measured, relative which returns the speed relative to free-flow, Relative-delay which displays relative speeds only where they are different from the freeflow speeds",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "absolute",
                            "relative",
                            "relative-delay"
                        ],
                        "x-ms-enum": {
                            "name": "TrafficFlowSegmentStyle",
                            "modelAsString": false
                        }
                    },
                    {
                        "$ref": "#/parameters/Zoom"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Coordinates of the point close to the road segment. They have to be comma-separated and calculated using EPSG4326 projection.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "unit",
                        "in": "query",
                        "description": "Unit of speed in KMPH or MPH",
                        "required": false,
                        "type": "string",
                        "default": "KMPH",
                        "enum": [
                            "KMPH",
                            "MPH"
                        ],
                        "x-ms-enum": {
                            "name": "unit",
                            "modelAsString": false,
                            "values": [
                                {
                                    "value": "KMPH",
                                    "description": "Kilometers Per Hour"
                                },
                                {
                                    "value": "MPH",
                                    "description": "Miles Per Hour"
                                }
                            ]
                        }
                    },
                    {
                        "name": "thickness",
                        "in": "query",
                        "description": "The segment width multiplier.",
                        "required": false,
                        "type": "integer",
                        "default": 10,
                        "minimum": 1,
                        "maximum": 20
                    },
                    {
                        "name": "openLr",
                        "in": "query",
                        "description": "Boolean on whether the response should include OpenLR code",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TrafficFlowSegmentResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/traffic/incident/tile/{format}": {
            "get": {
                "description": "Get the traffic incident tile for a given coordinates",
                "operationId": "Traffic_GetTrafficIncidentTile",
                "x-ms-examples": {
                    "GetTrafficIncidentTile": {
                        "$ref": "./examples/GetTrafficIncidentTile.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/RasterTileFormat"
                    },
                    {
                        "name": "style",
                        "in": "query",
                        "description": "The style to be used to render the tile.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "s1",
                            "s2",
                            "s3",
                            "night"
                        ],
                        "x-ms-enum": {
                            "name": "TrafficIncidentTileStyle",
                            "modelAsString": false,
                            "values": [
                                {
                                    "value": "s1",
                                    "description": "Creates traffic lines with colored chevrons indicating severity."
                                },
                                {
                                    "value": "s2",
                                    "description": "Creates plain lines with certain degree of glow."
                                },
                                {
                                    "value": "s3",
                                    "description": "Creates plain lines with certain degree of glow."
                                },
                                {
                                    "value": "night",
                                    "description": "Night style."
                                }
                            ]
                        }
                    },
                    {
                        "$ref": "#/parameters/Zoom"
                    },
                    {
                        "$ref": "#/parameters/xTileIndex"
                    },
                    {
                        "$ref": "#/parameters/yTileIndex"
                    },
                    {
                        "name": "t",
                        "x-ms-client-name": "trafficState",
                        "in": "query",
                        "description": "Reference value for the state of traffic at a particular time, obtained from the Viewport API call. It is updated every minute, and is valid for two minutes before it times out. Use -1 to get the most recent traffic information. Default: most recent traffic information",
                        "required": false,
                        "type": "string",
                        "default": "-1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TrafficIncidentTileResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/traffic/incident/detail/{format}": {
            "get": {
                "description": "Get the traffic incident detail for a given coordinates",
                "operationId": "Traffic_GetTrafficIncidentDetail",
                "x-ms-examples": {
                    "GetTrafficIncidentDetail": {
                        "$ref": "./examples/GetTrafficIncidentDetail.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "name": "style",
                        "in": "query",
                        "description": "The style that will be used to render the tile in Traffic Incident Tile API. This will have an effect on the coordinates of traffic incidents in the reply.",
                        "required": true,
                        "type": "string",
                        "enum": [
                            "s1",
                            "s2",
                            "s3",
                            "night"
                        ],
                        "x-ms-enum": {
                            "name": "TrafficIncidentDetailStyle",
                            "modelAsString": false,
                            "values": [
                                {
                                    "value": "s1",
                                    "description": "Creates traffic lines with colored chevrons indicating severity."
                                },
                                {
                                    "value": "s2",
                                    "description": "Creates plain lines with certain degree of glow."
                                },
                                {
                                    "value": "s3",
                                    "description": "Creates plain lines with certain degree of glow."
                                },
                                {
                                    "value": "night",
                                    "description": "Night style."
                                }
                            ]
                        }
                    },
                    {
                        "name": "boundingbox",
                        "in": "query",
                        "description": "The corners of the area to report on, expressed in the projection specified. These are two latitude-longitude pairs describing corners of the bounding box. First pair for lower left corner and second for upper right. All values should be separated by commas",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "boundingZoom",
                        "in": "query",
                        "description": "Zoom level for desired tile. 0 to 18 for raster tiles, 0 through 20 for vector tiles",
                        "required": true,
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 18
                    },
                    {
                        "name": "trafficmodelid",
                        "in": "query",
                        "description": "Number referencing traffic model. This can be obtained from the Viewport API. It is updated every minute, and is valid for two minutes before it times out. If the wrong Traffic Model ID is specified, the correct one will be returned by the interface. A value of -1 will always invoke the most recent traffic model",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "ISO 639-1 code for the output language. Supported languages are ar, ca, cs, da, de, el, en, en-GB, en-US, es, et, fi, fr, he, hu, id, in*, it, lt, lv, nb, nl, no, pl, pt, ro, ru, sk, sv, th, tr, zh",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "projection",
                        "in": "query",
                        "description": "The projection used to specify the coordinates in the request and response. EPSG900913 (default) or EPSG4326",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "EPSG900913",
                            "EPSG4326"
                        ]
                    },
                    {
                        "name": "geometries",
                        "in": "query",
                        "description": "The type of vector geometry added to incidents (returned in the \u003cv\u003e element of the response).",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "original",
                            "shifted"
                        ],
                        "x-ms-enum": {
                            "name": "geometries",
                            "modelAsString": false,
                            "values": [
                                {
                                    "value": "original",
                                    "description": "Places incidents precisely on the road."
                                },
                                {
                                    "value": "shifted",
                                    "description": "Moves the incident slightly (depending on zoom level) to indicate specific road lanes."
                                }
                            ]
                        }
                    },
                    {
                        "name": "expandCluster",
                        "in": "query",
                        "description": "Boolean to indicate whether to list all traffic incidents in a cluster separately",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    },
                    {
                        "name": "originalPosition",
                        "in": "query",
                        "description": "Boolean on whether to return the original position of the incident (\u003cop\u003e) as well as the one shifted to the beginning of the traffic tube (\u003cp\u003e)",
                        "required": false,
                        "type": "boolean",
                        "default": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TrafficIncidentDetailResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        },
        "/traffic/incident/viewport/{format}": {
            "get": {
                "description": "Get the traffic incident viewport for a given boundingbox",
                "operationId": "Traffic_GetTrafficIncidentViewport",
                "x-ms-examples": {
                    "GetTrafficIncidentViewport": {
                        "$ref": "./examples/GetTrafficIncidentViewport.json"
                    }
                },
                "parameters": [
                    {
                        "$ref": "#/parameters/SubscriptionKey"
                    },
                    {
                        "$ref": "#/parameters/ApiVersion"
                    },
                    {
                        "$ref": "#/parameters/TextFormat"
                    },
                    {
                        "name": "boundingbox",
                        "in": "query",
                        "description": "The maximum size of the bounding box that can be passed is dependent on the requested zoom level. The width and height cannot exceed 4092 pixels when rendered on the given zoom level. Bounding box overview map: http://docs.openlayers.org/library/spherical_mercator.html",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "boundingzoom",
                        "in": "query",
                        "description": "Zoom level of the map viewport. Used to determine whether the view can be zoomed in.",
                        "required": true,
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 18
                    },
                    {
                        "name": "overviewbox",
                        "in": "query",
                        "description": "Used in case the overview box/mini map has different copyright data than the main map. If there is no mini map, the same coordinates as boundingBox is used. Bounding box overview map: http://docs.openlayers.org/library/spherical_mercator.html",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "overviewzoom",
                        "in": "query",
                        "description": "Zoom level of the overview map. If there is no mini map, use the same zoom level as boundingZoom.",
                        "required": true,
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 18
                    },
                    {
                        "name": "copyright",
                        "in": "query",
                        "description": "Determines what copyright information to return. When true the copyright text is returned; when false only the copyright index is returned.",
                        "required": true,
                        "type": "boolean",
                        "default": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TrafficIncidentViewportResult"
                        }
                    },
                    "400": {
                        "$ref": "#/responses/400"
                    },
                    "401": {
                        "$ref": "#/responses/401"
                    },
                    "403": {
                        "$ref": "#/responses/403"
                    },
                    "404": {
                        "$ref": "#/responses/404"
                    },
                    "500": {
                        "$ref": "#/responses/500"
                    }
                }
            }
        }
    },
    "definitions": {
        "Redirect": {
            "type": "object",
            "description": "This object is returned when the request is accepted but the processing has not been completed. The location header in the response contains the new URL to retry.",
            "properties": {
                "Location": {
                    "type": "string",
                    "readOnly": true,
                    "description": "New URL to check for the results of the long running process."
                }
            }
        },
        "Error": {
            "type": "object",
            "description": "This object is returned when an error occurs in the Location Based Service API",
            "properties": {
                "statuscode": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Error code."
                },
                "message": {
                    "type": "string",
                    "readOnly": true,
                    "description": "If available, a human readable description of the error."
                }
            }
        },
        "Poi": {
            "description": "POI property",
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name property",
                    "type": "string",
                    "readOnly": true
                },
                "phone": {
                    "description": "Phone property",
                    "type": "string",
                    "readOnly": true
                },
                "url": {
                    "description": "URL property",
                    "type": "string",
                    "readOnly": true
                },
                "categories": {
                    "description": "Categories array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "classifications": {
                    "description": "Classification array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/Classification"
                    }
                }
            }
        },
        "Classification": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code property",
                    "type": "string",
                    "readOnly": true
                },
                "names": {
                    "description": "Names array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/ClassificationName"
                    }
                }
            }
        },
        "ClassificationName": {
            "type": "object",
            "properties": {
                "nameLocale": {
                    "description": "Name Locale property",
                    "type": "string",
                    "readOnly": true
                },
                "name": {
                    "description": "Name property",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "Address": {
            "description": "The address of the result",
            "type": "object",
            "properties": {
                "buildingNumber": {
                    "description": "Building Number property",
                    "type": "string",
                    "readOnly": true
                },
                "street": {
                    "description": "Street property",
                    "type": "string",
                    "readOnly": true
                },
                "crossStreet": {
                    "description": "Cross Street property",
                    "type": "string",
                    "readOnly": true
                },
                "streetNumber": {
                    "description": "Street Number property",
                    "type": "string",
                    "readOnly": true
                },
                "routeNumbers": {
                    "description": "number of routes",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "readOnly": true
                },
                "streetName": {
                    "description": "Street Name property",
                    "type": "string",
                    "readOnly": true
                },
                "streetNameAndNumber": {
                    "description": "Street Name and Number property",
                    "type": "string",
                    "readOnly": true
                },
                "municipality": {
                    "description": "Municipality property",
                    "type": "string",
                    "readOnly": true
                },
                "municipalitySubdivision": {
                    "description": "Municipality Subdivision property",
                    "type": "string",
                    "readOnly": true
                },
                "countryTertiarySubdivision": {
                    "description": "Country Tertiary Subdivision property",
                    "type": "string",
                    "readOnly": true
                },
                "countrySecondarySubdivision": {
                    "description": "Country Secondary Subdivision property",
                    "type": "string",
                    "readOnly": true
                },
                "countrySubdivision": {
                    "description": "Country Subdivision property",
                    "type": "string",
                    "readOnly": true
                },
                "postalCode": {
                    "description": "Postal Code property",
                    "type": "string",
                    "readOnly": true
                },
                "extendedPostalCode": {
                    "description": "Extended Postal Code property",
                    "type": "string",
                    "readOnly": true
                },
                "countryCode": {
                    "description": "Country Code property",
                    "type": "string",
                    "readOnly": true
                },
                "country": {
                    "description": "Country property",
                    "type": "string",
                    "readOnly": true
                },
                "countryCodeISO3": {
                    "description": "Country Code ISO3 property",
                    "type": "string",
                    "readOnly": true
                },
                "freeformAddress": {
                    "description": "Free form Address property",
                    "type": "string",
                    "readOnly": true
                },
                "countrySubdivisionName": {
                    "description": "Country Subdividion Name property",
                    "type": "string",
                    "readOnly": true
                },
                "boundingBox": {
                    "description": "Bounding Box for the address",
                    "type": "object",
                    "properties": {
                        "northEast": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The North East coordinates for the Bounding Box"
                        },
                        "southWest": {
                            "type": "string",
                            "readOnly": true,
                            "description": "The South West coordinates for the Bounding Box"
                        }
                    }
                }
            }
        },
        "Position": {
            "description": "Coordinates of the result",
            "type": "object",
            "properties": {
                "lat": {
                    "type": "number",
                    "readOnly": true,
                    "description": "Latitude property"
                },
                "lon": {
                    "type": "number",
                    "readOnly": true,
                    "description": "Longitude property"
                }
            }
        },
        "Viewport": {
            "description": "The viewport that covers the result",
            "type": "object",
            "properties": {
                "topLeftPoint": {
                    "description": "Top left of the viewport",
                    "type": "object",
                    "properties": {
                        "lat": {
                            "type": "number",
                            "readOnly": true,
                            "description": "Latitude"
                        },
                        "lon": {
                            "type": "number",
                            "readOnly": true,
                            "description": "Longitude"
                        }
                    }
                },
                "btmRightPoint": {
                    "description": "Bottom right of the viewport",
                    "type": "object",
                    "properties": {
                        "lat": {
                            "type": "number",
                            "readOnly": true,
                            "description": "Latitude"
                        },
                        "lon": {
                            "type": "number",
                            "readOnly": true,
                            "description": "Longitude"
                        }
                    }
                }
            }
        },
        "EntryPoints": {
            "description": "Entry Points array",
            "type": "array",
            "items": {
                "$ref": "#/definitions/EntryPoint"
            }
        },
        "EntryPoint": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "The entry point for the POI being returned.",
                    "type": "string",
                    "readOnly": true
                },
                "position": {
                    "description": "Name property",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "lat": {
                            "description": "Latitude property",
                            "type": "number",
                            "readOnly": true
                        },
                        "lon": {
                            "description": "Longitude property",
                            "type": "number",
                            "readOnly": true
                        }
                    }
                }
            }
        },
        "Route": {
            "description": "Route object",
            "type": "object",
            "properties": {
                "routeGeometry": {
                    "description": "Route geometry point(lat,lon) array",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "routeInstructions": {
                    "description": "RouteInstructions property",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "list": {
                            "description": "List of instructions",
                            "type": "array",
                            "readOnly": true,
                            "items": {
                                "$ref": "#/definitions/Instruction"
                            }
                        },
                        "language": {
                            "description": "Language property",
                            "type": "string",
                            "readOnly": true
                        }
                    }
                },
                "routeSummary": {
                    "description": "RouteSummary property",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "boundingBox": {
                            "description": "BoundingBox property",
                            "type": "object",
                            "readOnly": true,
                            "properties": {
                                "topLeftPoint": {
                                    "description": "TopLeftPoint property. Format : lat,lon",
                                    "type": "string",
                                    "readOnly": true
                                },
                                "btmRightPoint": {
                                    "description": "BottomRightPoint property. Format : lat,lon",
                                    "type": "string",
                                    "readOnly": true
                                }
                            }
                        },
                        "totalDistance": {
                            "description": "TotalDistance property",
                            "type": "object",
                            "readOnly": true,
                            "properties": {
                                "value": {
                                    "description": "Distance value property",
                                    "type": "number",
                                    "readOnly": true
                                },
                                "uom": {
                                    "description": "Unit of Measurement property",
                                    "type": "string",
                                    "readOnly": true
                                }
                            }
                        },
                        "totalTime": {
                            "description": "TotalTime property",
                            "type": "string",
                            "readOnly": true
                        },
                        "totalTravelTime": {
                            "description": "TotalTravelTime property",
                            "type": "string",
                            "readOnly": true
                        },
                        "totalWaitTime": {
                            "description": "TotalWaitTime property",
                            "type": "string",
                            "readOnly": true
                        }
                    }
                }
            }
        },
        "Instruction": {
            "type": "object",
            "readOnly": true,
            "properties": {
                "Instruction": {
                    "description": "Instruction property",
                    "type": "string",
                    "readOnly": true
                },
                "Point": {
                    "description": "Point property. Format: Lat,Lon",
                    "type": "string",
                    "readOnly": true
                },
                "description": {
                    "description": "Description  property",
                    "type": "string",
                    "readOnly": true
                },
                "distance": {
                    "description": "Distance property",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "value": {
                            "description": "Value  property",
                            "type": "number",
                            "readOnly": true
                        },
                        "uom": {
                            "description": "Unit of Measure  property",
                            "type": "string",
                            "readOnly": true
                        }
                    }
                },
                "duration": {
                    "description": "Duration property",
                    "type": "string",
                    "readOnly": true
                },
                "waitTime": {
                    "description": "WaitTime property",
                    "type": "string",
                    "readOnly": true
                },
                "turnAngle": {
                    "description": "TurnAngle property",
                    "type": "number",
                    "readOnly": true
                },
                "turn": {
                    "description": "Turn property",
                    "type": "string",
                    "readOnly": true
                },
                "tour": {
                    "description": "Tour property",
                    "type": "integer",
                    "readOnly": true
                },
                "sideOfStreet": {
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "CopyrightBoundingResult": {
            "description": "This object is returned from a successful Copyright Bounding call",
            "type": "object",
            "properties": {
                "formatVersion": {
                    "description": "Format Version property",
                    "type": "string",
                    "readOnly": true
                },
                "generalCopyrights": {
                    "description": "General Copyrights array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "regions": {
                    "description": "Regions array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/Region"
                    }
                }
            }
        },
        "Region": {
            "type": "object",
            "properties": {
                "copyrights": {
                    "description": "Copyrights array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "country": {
                    "description": "Country property",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "ISO3": {
                            "description": "ISO3 property",
                            "type": "string",
                            "readOnly": true
                        },
                        "label": {
                            "description": "Label property",
                            "type": "string",
                            "readOnly": true
                        }
                    }
                }
            }
        },
        "CopyrightCaptionResult": {
            "description": "This object is returned from a successful Copyright Caption call",
            "type": "object",
            "properties": {
                "formatVersion": {
                    "description": "Format Version property",
                    "type": "string",
                    "readOnly": true
                },
                "copyrightsCaption": {
                    "description": "Copyrights Caption property",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "CopyrightWorldResult": {
            "description": "This object is returned from a successful Copyright World call",
            "type": "object",
            "properties": {
                "formatVersion": {
                    "description": "Format Version property",
                    "type": "string",
                    "readOnly": true
                },
                "generalCopyrights": {
                    "description": "General Copyrights array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "regions": {
                    "description": "Regions array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/Region"
                    }
                }
            }
        },
        "CopyrightTileResult": {
            "description": "This object is returned from a successful Copyright Tile call",
            "type": "object",
            "properties": {
                "formatVersion": {
                    "description": "Format Version property",
                    "type": "string",
                    "readOnly": true
                },
                "generalCopyrights": {
                    "description": "General Copyrights array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "regions": {
                    "description": "Regions array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/Region"
                    }
                }
            }
        },
        "MapStaticResult": {
            "description": "This image is returned from a successful Map Static call",
            "type": "string",
            "format": "binary",
            "readOnly": true
        },
        "MapTileResult": {
            "description": "This image is returned from a successful Map Tile call",
            "type": "string",
            "format": "binary",
            "readOnly": true
        },
        "SearchFuzzyResult": {
            "description": "This object is returned from a successful Search Fuzzy call",
            "type": "object",
            "properties": {
                "summary": {
                    "description": "Summary object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "query": {
                            "description": "Query property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryType": {
                            "description": "QueryType property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryTime": {
                            "description": "QueryTime property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "numResults": {
                            "description": "NumResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "offset": {
                            "description": "Offset property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "totalResults": {
                            "description": "TotalResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "fuzzyLevel": {
                            "description": "FuzzyLevel property",
                            "type": "integer",
                            "readOnly": true
                        }
                    }
                },
                "results": {
                    "description": "Results array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/SearchFuzzyResultArray"
                    }
                }
            }
        },
        "SearchFuzzyResultArray": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type property",
                    "type": "string",
                    "readOnly": true
                },
                "id": {
                    "description": "Id property",
                    "type": "string",
                    "readOnly": true
                },
                "score": {
                    "description": "Score property",
                    "type": "number",
                    "readOnly": true
                },
                "info": {
                    "description": "Info property",
                    "type": "string",
                    "readOnly": true
                },
                "entityType": {
                    "description": "Entity Type property",
                    "type": "string",
                    "readOnly": true
                },
                "poi": {
                    "$ref": "#/definitions/Poi"
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "position": {
                    "$ref": "#/definitions/Position"
                },
                "viewport": {
                    "$ref": "#/definitions/Viewport"
                },
                "boundingBox": {
                    "description": "Bounding box of the result",
                    "type": "object",
                    "properties": {
                        "topLeftPoint": {
                            "description": "Top left of the viewport",
                            "type": "object",
                            "properties": {
                                "lat": {
                                    "type": "number",
                                    "readOnly": true,
                                    "description": "Latitude"
                                },
                                "lon": {
                                    "type": "number",
                                    "readOnly": true,
                                    "description": "Longitude"
                                }
                            }
                        },
                        "btmRightPoint": {
                            "description": "Bottom right of the viewport",
                            "type": "object",
                            "properties": {
                                "lat": {
                                    "type": "number",
                                    "readOnly": true,
                                    "description": "Latitude"
                                },
                                "lon": {
                                    "type": "number",
                                    "readOnly": true,
                                    "description": "Longitude"
                                }
                            }
                        }
                    }
                },
                "entryPoints": {
                    "$ref": "#/definitions/EntryPoints"
                }
            }
        },
        "SearchPoiResult": {
            "description": "This object is returned from a successful Search POI call",
            "type": "object",
            "properties": {
                "summary": {
                    "description": "Summary object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "query": {
                            "description": "Query property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryType": {
                            "description": "QueryType property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryTime": {
                            "description": "QueryTime property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "numResults": {
                            "description": "NumResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "offset": {
                            "description": "Offset property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "totalResults": {
                            "description": "TotalResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "fuzzyLevel": {
                            "description": "FuzzyLevel property",
                            "type": "integer",
                            "readOnly": true
                        }
                    }
                },
                "results": {
                    "description": "Results array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type property",
                                "type": "string",
                                "readOnly": true
                            },
                            "id": {
                                "description": "Id property",
                                "type": "string",
                                "readOnly": true
                            },
                            "score": {
                                "description": "Score property",
                                "type": "number",
                                "readOnly": true
                            },
                            "info": {
                                "description": "Info property",
                                "type": "string",
                                "readOnly": true
                            },
                            "entityType": {
                                "description": "Entity Type property",
                                "type": "string",
                                "readOnly": true
                            },
                            "poi": {
                                "$ref": "#/definitions/Poi"
                            },
                            "address": {
                                "$ref": "#/definitions/Address"
                            },
                            "position": {
                                "$ref": "#/definitions/Position"
                            },
                            "viewport": {
                                "$ref": "#/definitions/Viewport"
                            },
                            "entryPoints": {
                                "$ref": "#/definitions/EntryPoints"
                            }
                        }
                    }
                }
            }
        },
        "SearchRoutedResult": {
            "description": "This object is returned from a successful Routed Search call",
            "type": "object",
            "properties": {
                "summary": {
                    "description": "Summary object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "query": {
                            "description": "Query property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryType": {
                            "description": "QueryType property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryTime": {
                            "description": "QueryTime property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "numResults": {
                            "description": "NumResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "offset": {
                            "description": "Offset property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "totalResults": {
                            "description": "TotalResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "geoBias": {
                            "description": "GeoBias property",
                            "type": "object",
                            "readOnly": true,
                            "properties": {
                                "lat": {
                                    "description": "Latitude property",
                                    "type": "number",
                                    "readOnly": true
                                },
                                "lon": {
                                    "description": "Longitude property",
                                    "type": "number",
                                    "readOnly": true
                                }
                            }
                        },
                        "fuzzyLevel": {
                            "description": "FuzzyLevel property",
                            "type": "integer",
                            "readOnly": true
                        }
                    }
                },
                "results": {
                    "description": "Results array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/SearchRoutedResultArray"
                    }
                }
            }
        },
        "SearchRoutedResultArray": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type property",
                    "type": "string",
                    "readOnly": true
                },
                "id": {
                    "description": "Id property",
                    "type": "string",
                    "readOnly": true
                },
                "score": {
                    "description": "Score property",
                    "type": "number",
                    "readOnly": true
                },
                "dist": {
                    "description": "Distance property",
                    "type": "number",
                    "readOnly": true
                },
                "info": {
                    "description": "Info property",
                    "type": "string",
                    "readOnly": true
                },
                "poi": {
                    "$ref": "#/definitions/Poi"
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "position": {
                    "$ref": "#/definitions/Position"
                },
                "viewport": {
                    "$ref": "#/definitions/Viewport"
                },
                "entryPoints": {
                    "$ref": "#/definitions/EntryPoints"
                },
                "route": {
                    "$ref": "#/definitions/Route"
                }
            }
        },
        "SearchNearbyResult": {
            "description": "This object is returned from a successful Search Nearby call",
            "type": "object",
            "properties": {
                "summary": {
                    "description": "Summary object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "queryType": {
                            "description": "QueryType property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryTime": {
                            "description": "QueryTime property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "numResults": {
                            "description": "NumResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "offset": {
                            "description": "Offset property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "totalResults": {
                            "description": "TotalResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "fuzzyLevel": {
                            "description": "FuzzyLevel property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "geoBias": {
                            "description": "GeoBias property",
                            "type": "object",
                            "readOnly": true,
                            "properties": {
                                "lat": {
                                    "description": "Latitude property",
                                    "type": "number",
                                    "readOnly": true
                                },
                                "lon": {
                                    "description": "Longitude property",
                                    "type": "number",
                                    "readOnly": true
                                }
                            }
                        }
                    }
                },
                "results": {
                    "description": "Results array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type property",
                                "type": "string",
                                "readOnly": true
                            },
                            "id": {
                                "description": "Id property",
                                "type": "string",
                                "readOnly": true
                            },
                            "score": {
                                "description": "Score property",
                                "type": "number",
                                "readOnly": true
                            },
                            "dist": {
                                "description": "Distance property",
                                "type": "number",
                                "readOnly": true
                            },
                            "info": {
                                "description": "Info property",
                                "type": "string",
                                "readOnly": true
                            },
                            "poi": {
                                "$ref": "#/definitions/Poi"
                            },
                            "address": {
                                "$ref": "#/definitions/Address"
                            },
                            "position": {
                                "$ref": "#/definitions/Position"
                            },
                            "viewport": {
                                "$ref": "#/definitions/Viewport"
                            },
                            "entryPoints": {
                                "$ref": "#/definitions/EntryPoints"
                            }
                        }
                    }
                }
            }
        },
        "SearchPoiCategoryResult": {
            "description": "This object is returned from a successful Search POI Category call",
            "type": "object",
            "properties": {
                "summary": {
                    "description": "Summary object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "query": {
                            "description": "Query property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryType": {
                            "description": "QueryType property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryTime": {
                            "description": "QueryTime property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "numResults": {
                            "description": "NumResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "offset": {
                            "description": "Offset property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "totalResults": {
                            "description": "TotalResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "fuzzyLevel": {
                            "description": "FuzzyLevel property",
                            "type": "integer",
                            "readOnly": true
                        }
                    }
                },
                "results": {
                    "description": "Results array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/SearchPoiCategoryResultArray"
                    }
                }
            }
        },
        "SearchPoiCategoryResultArray": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type property",
                    "type": "string",
                    "readOnly": true
                },
                "id": {
                    "description": "Id property",
                    "type": "string",
                    "readOnly": true
                },
                "score": {
                    "description": "Score property",
                    "type": "number",
                    "readOnly": true
                },
                "info": {
                    "description": "Info property",
                    "type": "string",
                    "readOnly": true
                },
                "entityType": {
                    "description": "Entity Type property",
                    "type": "string",
                    "readOnly": true
                },
                "poi": {
                    "$ref": "#/definitions/Poi"
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "position": {
                    "$ref": "#/definitions/Position"
                },
                "viewport": {
                    "$ref": "#/definitions/Viewport"
                },
                "entryPoints": {
                    "$ref": "#/definitions/EntryPoints"
                }
            }
        },
        "SearchAddressResult": {
            "description": "This object is returned from a successful Search Address call",
            "type": "object",
            "properties": {
                "summary": {
                    "description": "Summary object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "query": {
                            "description": "Query property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryType": {
                            "description": "QueryType property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryTime": {
                            "description": "QueryTime property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "numResults": {
                            "description": "NumResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "offset": {
                            "description": "Offset property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "totalResults": {
                            "description": "TotalResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "fuzzyLevel": {
                            "description": "FuzzyLevel property",
                            "type": "integer",
                            "readOnly": true
                        }
                    }
                },
                "results": {
                    "description": "Results array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/SearchAddressResultArray"
                    }
                }
            }
        },
        "SearchAddressResultArray": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type property",
                    "type": "string",
                    "readOnly": true
                },
                "id": {
                    "description": "Id property",
                    "type": "string",
                    "readOnly": true
                },
                "score": {
                    "description": "Score property",
                    "type": "number",
                    "readOnly": true
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "position": {
                    "$ref": "#/definitions/Position"
                },
                "viewport": {
                    "$ref": "#/definitions/Viewport"
                },
                "entryPoints": {
                    "$ref": "#/definitions/EntryPoints"
                }
            }
        },
        "SearchAddressReverseResult": {
            "description": "This object is returned from a successful Search Address Reverse call",
            "type": "object",
            "properties": {
                "summary": {
                    "description": "Summary object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "queryTime": {
                            "description": "QueryTime property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "numResults": {
                            "description": "NumResults property",
                            "type": "integer",
                            "readOnly": true
                        }
                    }
                },
                "addresses": {
                    "description": "Addresses array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/AddressResult"
                    }
                }
            }
        },
        "SearchAddressReverseCrossStreetResult": {
            "description": "This object is returned from a successful Search Address Reverse CrossStreet call",
            "type": "object",
            "properties": {
                "summary": {
                    "description": "Summary object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "queryTime": {
                            "description": "QueryTime property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "numResults": {
                            "description": "NumResults property",
                            "type": "integer",
                            "readOnly": true
                        }
                    }
                },
                "addresses": {
                    "description": "Addresses array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/AddressResult"
                    }
                }
            }
        },
        "AddressResult": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "position": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Position property"
                }
            }
        },
        "SearchAddressStructuredResult": {
            "description": "This object is returned from a successful Search Address Structured call",
            "type": "object",
            "properties": {
                "summary": {
                    "description": "Summary object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "query": {
                            "description": "Query property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryType": {
                            "description": "QueryType property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryTime": {
                            "description": "QueryTime property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "numResults": {
                            "description": "NumResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "limit": {
                            "description": "Maximum number of responses that will be returned",
                            "readOnly": true,
                            "type": "integer"
                        },
                        "offset": {
                            "description": "Offset property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "totalResults": {
                            "description": "TotalResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "fuzzyLevel": {
                            "description": "FuzzyLevel property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "geoBias": {
                            "description": "Geo Bias of the result",
                            "type": "object",
                            "properties": {
                                "lat": {
                                    "type": "number",
                                    "readOnly": true,
                                    "description": "Latitude property"
                                },
                                "lon": {
                                    "type": "number",
                                    "readOnly": true,
                                    "description": "Longitude property"
                                }
                            }
                        }
                    }
                },
                "results": {
                    "description": "Results array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/SearchAddressStructuredResultArray"
                    }
                }
            }
        },
        "SearchAddressStructuredResultArray": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type property",
                    "type": "string",
                    "readOnly": true
                },
                "id": {
                    "description": "Id property",
                    "type": "string",
                    "readOnly": true
                },
                "score": {
                    "description": "Score property",
                    "type": "number",
                    "readOnly": true
                },
                "dist": {
                    "description": "Dist property",
                    "type": "number",
                    "readOnly": true
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "position": {
                    "$ref": "#/definitions/Position"
                },
                "viewport": {
                    "$ref": "#/definitions/Viewport"
                },
                "entryPoints": {
                    "$ref": "#/definitions/EntryPoints"
                },
                "addressRanges": {
                    "type": "object",
                    "properties": {
                        "rangeLeft": {
                            "type": "string"
                        },
                        "rangeRight": {
                            "type": "string"
                        },
                        "from": {
                            "description": "A postion of start point",
                            "type": "object",
                            "properties": {
                                "lon": {
                                    "description": "longitude of start point",
                                    "type": "number",
                                    "format": "double"
                                },
                                "lat": {
                                    "description": "latitude of start point",
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        },
                        "to": {
                            "description": "A postion of destination",
                            "type": "object",
                            "properties": {
                                "lon": {
                                    "description": "longitude of destination",
                                    "type": "number",
                                    "format": "double"
                                },
                                "lat": {
                                    "description": "latitude of destination",
                                    "type": "number",
                                    "format": "double"
                                }
                            }
                        }
                    }
                }
            }
        },
        "SearchGeometryResult": {
            "description": "This object is returned from a successful Search By Geometry call",
            "type": "object",
            "properties": {
                "summary": {
                    "description": "Summary object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "query": {
                            "description": "Query property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryType": {
                            "description": "QueryType property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryTime": {
                            "description": "QueryTime property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "numResults": {
                            "description": "NumResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "offset": {
                            "description": "Offset property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "totalResults": {
                            "description": "TotalResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "fuzzyLevel": {
                            "description": "FuzzyLevel property",
                            "type": "integer",
                            "readOnly": true
                        }
                    }
                },
                "results": {
                    "description": "Results array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/SearchGeometryResultArray"
                    }
                }
            }
        },
        "SearchGeometryResultArray": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type property",
                    "type": "string",
                    "readOnly": true
                },
                "id": {
                    "description": "Id property",
                    "type": "string",
                    "readOnly": true
                },
                "score": {
                    "description": "Score property",
                    "type": "number",
                    "readOnly": true
                },
                "info": {
                    "description": "Info property",
                    "type": "string",
                    "readOnly": true
                },
                "entityType": {
                    "description": "Entity Type property",
                    "type": "string",
                    "readOnly": true
                },
                "poi": {
                    "$ref": "#/definitions/Poi"
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "position": {
                    "$ref": "#/definitions/Position"
                },
                "viewport": {
                    "$ref": "#/definitions/Viewport"
                },
                "entryPoints": {
                    "$ref": "#/definitions/EntryPoints"
                }
            }
        },
        "SearchAlongRouteResult": {
            "description": "This object is returned from a successful Search Along Route call",
            "type": "object",
            "properties": {
                "summary": {
                    "description": "Summary object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "query": {
                            "description": "Query property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryType": {
                            "description": "QueryType property",
                            "type": "string",
                            "readOnly": true
                        },
                        "queryTime": {
                            "description": "QueryTime property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "numResults": {
                            "description": "NumResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "offset": {
                            "description": "Offset property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "totalResults": {
                            "description": "TotalResults property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "fuzzyLevel": {
                            "description": "FuzzyLevel property",
                            "type": "integer",
                            "readOnly": true
                        }
                    }
                },
                "results": {
                    "description": "Results array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/SearchAlongRouteResultArray"
                    }
                }
            }
        },
        "SearchAlongRouteResultArray": {
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type property",
                    "type": "string",
                    "readOnly": true
                },
                "id": {
                    "description": "Id property",
                    "type": "string",
                    "readOnly": true
                },
                "score": {
                    "description": "Score property",
                    "type": "number",
                    "readOnly": true
                },
                "info": {
                    "description": "Info property",
                    "type": "string",
                    "readOnly": true
                },
                "entityType": {
                    "description": "Entity Type property",
                    "type": "string",
                    "readOnly": true
                },
                "poi": {
                    "$ref": "#/definitions/Poi"
                },
                "address": {
                    "$ref": "#/definitions/Address"
                },
                "position": {
                    "$ref": "#/definitions/Position"
                },
                "viewport": {
                    "$ref": "#/definitions/Viewport"
                },
                "entryPoints": {
                    "$ref": "#/definitions/EntryPoints"
                },
                "dist": {
                    "type": "number",
                    "format": "double",
                    "readOnly": true
                },
                "detourTime": {
                    "type": "number",
                    "readOnly": true
                }
            }
        },
        "RouteDirectionsResult": {
            "description": "This object is returned from a successful Route Directions call",
            "type": "object",
            "properties": {
                "formatVersion": {
                    "description": "Format Version property",
                    "type": "string",
                    "readOnly": true
                },
                "copyright": {
                    "description": "Copyright property",
                    "type": "string",
                    "readOnly": true
                },
                "privacy": {
                    "description": "Privacy property",
                    "type": "string",
                    "readOnly": true
                },
                "routes": {
                    "description": "Routes array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/RouteDef"
                    }
                },
                "optimizedWaypoints": {
                    "description": "Optimized way points array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/OptimizedWaypoint"
                    }
                },
                "report": {
                    "$ref": "#/definitions/ReportInResponse"
                }
            }
        },
        "RouteDef": {
            "type": "object",
            "properties": {
                "summary": {
                    "description": "Summary object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "lengthInMeters": {
                            "description": "Length In Meters property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "travelTimeInSeconds": {
                            "description": "Travel Time In Seconds property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "trafficDelayInSeconds": {
                            "description": "Traffic Delay In Seconds property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "departureTime": {
                            "description": "Departure Time property",
                            "type": "string",
                            "readOnly": true
                        },
                        "arrivalTime": {
                            "description": "Arrival Time property",
                            "type": "string",
                            "readOnly": true
                        }
                    }
                },
                "legs": {
                    "description": "Legs array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/Leg"
                    }
                },
                "sections": {
                    "description": "Sections array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/Section"
                    }
                },
                "guidance": {
                    "description": "Contains guidance related elements. This field is present only when guidance was requested and is available.",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "instructions": {
                            "description": "A list of instructions describing maneuvers.",
                            "type": "array",
                            "readOnly": true,
                            "items": {
                                "$ref": "#/definitions/GuidanceInstruction"
                            }
                        },
                        "instructionGroups": {
                            "description": "xxxxx.",
                            "type": "array",
                            "readOnly": true,
                            "items": {
                                "$ref": "#/definitions/GuidanceInstructionGroup"
                            }
                        }
                    }
                }
            }
        },
        "Leg": {
            "type": "object",
            "properties": {
                "summary": {
                    "description": "Summary object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "lengthInMeters": {
                            "description": "Length In Meters property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "travelTimeInSeconds": {
                            "description": "Estimated travel Time In Seconds property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "trafficDelayInSeconds": {
                            "description": "Traffic Delay In Seconds property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "departureTime": {
                            "description": "Departure Time property",
                            "type": "string",
                            "readOnly": true
                        },
                        "arrivalTime": {
                            "description": "Arrival Time property",
                            "type": "string",
                            "readOnly": true
                        },
                        "noTrafficTravelTimeInSeconds": {
                            "description": "Estimated travel time calculated as if there are no delays on the route due to traffic conditions (e.g. congestion). Included only if computeTravelTimeFor = all is used in the query.",
                            "type": "integer",
                            "readOnly": true
                        },
                        "historicTrafficTravelTimeInSeconds": {
                            "description": "Estimated travel time calculated using time-dependent historic traffic data. Included only if computeTravelTimeFor = all is used in the query.",
                            "type": "integer",
                            "readOnly": true
                        },
                        "liveTrafficIncidentsTravelTimeInSeconds": {
                            "description": "Estimated travel time calculated using real-time speed data. Included only if computeTravelTimeFor = all is used in the query.",
                            "type": "integer",
                            "readOnly": true
                        },
                        "fuelConsumptionInLiters": {
                            "description": "Estimated fuel consumption in liters using the Combustion Consumption Model. Included if vehicleEngineType is set to __combustion__ and constantSpeedConsumptionInLitersPerHundredkm is specified. The value will be non-negative.",
                            "type": "number",
                            "format": "float",
                            "readOnly": true
                        },
                        "batteryConsumptionInkWh": {
                            "description": "Estimated electric energy consumption in kilowatt hours (kWh) using the Electric Consumption Model. Included if vehicleEngineType is set to electric and constantSpeedConsumptionInkWhPerHundredkm is specified. The value of batteryConsumptionInkWh includes the recuperated electric energy and can therefore be negative (which indicates gaining energy). If both maxChargeInkWh and currentChargeInkWh are specified, recuperation will be capped to ensure that the battery charge level never exceeds maxChargeInkWh. If neither maxChargeInkWh nor currentChargeInkWh are specified, unconstrained recuperation is assumed in the consumption calculation.",
                            "type": "number",
                            "format": "float",
                            "readOnly": true
                        }
                    }
                },
                "points": {
                    "description": "Points array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "object",
                        "properties": {
                            "latitude": {
                                "description": "Latitude property",
                                "type": "number",
                                "readOnly": true
                            },
                            "longitude": {
                                "description": "Longitude property",
                                "type": "number",
                                "readOnly": true
                            }
                        }
                    }
                }
            }
        },
        "Section": {
            "type": "object",
            "properties": {
                "startPointIndex": {
                    "description": "Start Point Index property",
                    "type": "integer",
                    "readOnly": true
                },
                "endPointIndex": {
                    "description": "End Point Index property",
                    "type": "integer",
                    "readOnly": true
                },
                "sectionType": {
                    "description": "Section Type property",
                    "type": "string",
                    "readOnly": true
                },
                "travelMode": {
                    "description": "Travel Mode property",
                    "type": "string",
                    "readOnly": true
                },
                "simpleCategory": {
                    "description": "Type of the incident. Can currently be JAM, ROAD_WORK, ROAD_CLOSURE, or OTHER. See \"tec\" for detailed information.",
                    "type": "string",
                    "readOnly": true
                },
                "effectiveSpeedInKmh": {
                    "description": "Effective speed of the incident in km/h, averaged over its entire length.",
                    "type": "integer",
                    "readOnly": true
                },
                "delayInSeconds": {
                    "description": "Delay in seconds caused by the incident.",
                    "type": "integer",
                    "readOnly": true
                },
                "magnitudeOfDelay": {
                    "description": "The magnitude of delay caused by the incident. These values correspond to the values of the response field \u003cty\u003e of the Get Traffic Incident Detail API. ",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4"
                    ],
                    "x-ms-enum": {
                        "name": "magnitudeOfDelay",
                        "modelAsString": false,
                        "values": [
                            {
                                "value": "0",
                                "description": "Unknown."
                            },
                            {
                                "value": "1",
                                "description": "Minor."
                            },
                            {
                                "value": "2",
                                "description": "Moderate."
                            },
                            {
                                "value": "3",
                                "description": "Major."
                            },
                            {
                                "value": "4",
                                "description": "Undefined, used for road closures and other indefinite delays."
                            }
                        ]
                    }
                },
                "tec": {
                    "description": "Details of the traffic event, using definitions in the TPEG2-TEC standard. Can contain \u003ceffectCode\u003e and \u003ccauses\u003e elements.",
                    "type": "object",
                    "properties": {
                        "effectCode": {
                            "description": "The effect on the traffic flow. Contains a value in the tec001:EffectCode table, as defined in the TPEG2-TEC standard. Can be used to color-code traffic events according to severity.",
                            "type": "integer",
                            "readOnly": true
                        },
                        "causes": {
                            "description": "List of \u003ccause\u003e elements.",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TecCause"
                            }
                        }
                    }
                }
            }
        },
        "TecCause": {
            "description": "The cause of the traffic event. Can contain \u003cmainCauseCode\u003e and \u003csubCauseCode\u003e elements. Can be used to define iconography and descriptions.",
            "type": "object",
            "properties": {
                "mainCauseCode": {
                    "description": "The main cause of the traffic event. Contains a value in the tec002:CauseCode table, as defined in the TPEG2-TEC standard.",
                    "type": "integer",
                    "readOnly": true
                },
                "subCauseCode": {
                    "description": "The subcause of the traffic event. Contains a value in the sub cause table defined by the mainCauseCode, as defined in the TPEG2-TEC standard.",
                    "type": "integer",
                    "readOnly": true
                }
            }
        },
        "ReportInResponse": {
            "description": "Reports the effective settings used in the current call.",
            "type": "object",
            "properties": {
                "effectiveSettings": {
                    "description": "Effective parameters or data used when calling this Route API.",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/EffectiveSetting"
                    }
                }
            }
        },
        "EffectiveSetting": {
            "description": "Effective parameter or data used when calling this Route API.",
            "type": "object",
            "properties": {
                "key": {
                    "description": "Name of the parameter used.",
                    "type": "string",
                    "readOnly": true
                },
                "value": {
                    "description": "Value of the parameter used.",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "GuidanceInstruction": {
            "description": "A set of attributes describing a maneuver, e.g. \u0027Turn right\u0027, \u0027Keep left\u0027, \u0027Take the ferry\u0027, \u0027Take the motorway\u0027, \u0027Arrive\u0027.",
            "type": "object",
            "properties": {
                "routeOffsetInMeters": {
                    "description": "Distance from the start of the route to the point of the instruction..",
                    "type": "integer",
                    "readOnly": true
                },
                "travelTimeInSeconds": {
                    "description": "Estimated travel time up to the point corresponding to routeOffsetInMeters.",
                    "type": "integer",
                    "readOnly": true
                },
                "point": {
                    "description": "A location of the maneuver defined as a latitude longitude pair. .",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "latitude": {
                            "description": "Latitude.",
                            "type": "number",
                            "readOnly": true
                        },
                        "longitude": {
                            "description": "Longitude.",
                            "type": "number",
                            "readOnly": true
                        }
                    }
                },
                "instructionType": {
                    "description": "Type of the instruction, e.g., turn or change of road form.",
                    "type": "string",
                    "enum": [
                        "TURN",
                        "ROAD_CHANGE",
                        "LOCATION_DEPARTURE",
                        "LOCATION_ARRIVAL",
                        "DIRECTION_INFO",
                        "LOCATION_WAYPOINT"
                    ],
                    "x-ms-enum": {
                        "name": "instructionType",
                        "modelAsString": false
                    }
                },
                "street": {
                    "description": "Street name of the next significant road segment after the maneuver, or of the street that should be followed.",
                    "type": "string",
                    "readOnly": true
                },
                "countryCode": {
                    "description": "3-character ISO 3166-1 alpha-3 country code.",
                    "type": "string",
                    "readOnly": true
                },
                "possibleCombineWithNext": {
                    "description": "It is possible to optionally combine the instruction with the next one. This can be used to build messages like \"Turn left and then turn right\".",
                    "type": "boolean",
                    "readOnly": true
                },
                "drivingSide": {
                    "description": "Indicates left-hand vs. right-hand side driving at the point of the maneuver.",
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "LEFT",
                        "RIGHT"
                    ],
                    "x-ms-enum": {
                        "name": "drivingSide",
                        "modelAsString": false
                    }
                },
                "maneuver": {
                    "description": "A code identifying the maneuver.",
                    "type": "string",
                    "readOnly": true,
                    "enum": [
                        "ARRIVE",
                        "ARRIVE_LEFT",
                        "ARRIVE_RIGHT",
                        "DEPART",
                        "STRAIGHT",
                        "KEEP_RIGHT",
                        "BEAR_RIGHT",
                        "TURN_RIGHT",
                        "SHARP_RIGHT",
                        "KEEP_LEFT",
                        "BEAR_LEFT",
                        "TURN_LEFT",
                        "SHARP_LEFT",
                        "MAKE_UTURN",
                        "ENTER_MOTORWAY",
                        "ENTER_FREEWAY",
                        "ENTER_HIGHWAY",
                        "TAKE_EXIT",
                        "MOTORWAY_EXIT_LEFT",
                        "MOTORWAY_EXIT_RIGHT",
                        "TAKE_FERRY",
                        "ROUNDABOUT_CROSS",
                        "ROUNDABOUT_RIGHT",
                        "ROUNDABOUT_LEFT",
                        "ROUNDABOUT_BACK",
                        "TRY_MAKE_UTURN",
                        "FOLLOW",
                        "SWITCH_PARALLEL_ROAD",
                        "SWITCH_MAIN_ROAD",
                        "ENTRANCE_RAMP",
                        "WAYPOINT_LEFT",
                        "WAYPOINT_RIGHT",
                        "WAYPOINT_REACHED"
                    ],
                    "x-ms-enum": {
                        "name": "maneuver",
                        "modelAsString": false,
                        "values": [
                            {
                                "value": "ARRIVE",
                                "description": "You have arrived."
                            },
                            {
                                "value": "ARRIVE_LEFT",
                                "description": "You have arrived. Your destination is on the left."
                            },
                            {
                                "value": "ARRIVE_RIGHT",
                                "description": "You have arrived. Your destination is on the right."
                            },
                            {
                                "value": "DEPART",
                                "description": "Leave."
                            },
                            {
                                "value": "STRAIGHT",
                                "description": "Keep straight on."
                            },
                            {
                                "value": "KEEP_RIGHT",
                                "description": "Keep right."
                            },
                            {
                                "value": "BEAR_RIGHT",
                                "description": "Bear right."
                            },
                            {
                                "value": "TURN_RIGHT",
                                "description": "Turn right."
                            },
                            {
                                "value": "SHARP_RIGHT",
                                "description": "Turn sharp right."
                            },
                            {
                                "value": "KEEP_LEFT",
                                "description": "Keep left."
                            },
                            {
                                "value": "BEAR_LEFT",
                                "description": "Bear left."
                            },
                            {
                                "value": "TURN_LEFT",
                                "description": "Turn left."
                            },
                            {
                                "value": "SHARP_LEFT",
                                "description": "Turn sharp left."
                            },
                            {
                                "value": "MAKE_UTURN",
                                "description": "Make a U-turn."
                            },
                            {
                                "value": "ENTER_MOTORWAY",
                                "description": "Take the motorway."
                            },
                            {
                                "value": "ENTER_FREEWAY",
                                "description": "Take the freeway."
                            },
                            {
                                "value": "ENTER_HIGHWAY",
                                "description": "Take the highway."
                            },
                            {
                                "value": "TAKE_EXIT",
                                "description": "Take the exit."
                            },
                            {
                                "value": "MOTORWAY_EXIT_LEFT",
                                "description": "Take the left exit."
                            },
                            {
                                "value": "MOTORWAY_EXIT_RIGHT",
                                "description": "Take the right exit."
                            },
                            {
                                "value": "TAKE_FERRY",
                                "description": "Take the ferry."
                            },
                            {
                                "value": "ROUNDABOUT_CROSS",
                                "description": "Cross the roundabout."
                            },
                            {
                                "value": "ROUNDABOUT_RIGHT",
                                "description": "At the roundabout take the exit on the right."
                            },
                            {
                                "value": "ROUNDABOUT_LEFT",
                                "description": "At the roundabout take the exit on the left."
                            },
                            {
                                "value": "ROUNDABOUT_BACK",
                                "description": "Go around the roundabout."
                            },
                            {
                                "value": "TRY_MAKE_UTURN",
                                "description": "Try to make a U-turn."
                            },
                            {
                                "value": "FOLLOW",
                                "description": "Follow."
                            },
                            {
                                "value": "SWITCH_PARALLEL_ROAD",
                                "description": "Switch to the parallel road."
                            },
                            {
                                "value": "SWITCH_MAIN_ROAD",
                                "description": "Switch to the main road."
                            },
                            {
                                "value": "ENTRANCE_RAMP",
                                "description": "Take the ramp."
                            },
                            {
                                "value": "WAYPOINT_LEFT",
                                "description": "You have reached the waypoint. It is on the left."
                            },
                            {
                                "value": "WAYPOINT_RIGHT",
                                "description": "You have reached the waypoint. It is on the right."
                            },
                            {
                                "value": "WAYPOINT_REACHED",
                                "description": "You have reached the waypoint."
                            }
                        ]
                    }
                },
                "message": {
                    "description": "A human-readable message for the maneuver.",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "GuidanceInstructionGroup": {
            "description": "Groups a sequence of instruction elements which are related to each other. The sequence range is constrained with firstInstructionIndex and lastInstructionIndex. When human-readable text messages are requested for guidance (instructionType=text or tagged), then the instructionGroup has a summary message returned when available.",
            "type": "object",
            "properties": {
                "firstInstructionIndex": {
                    "description": "Index of the first instruction.",
                    "type": "integer",
                    "readOnly": true
                },
                "lastInstructionIndex": {
                    "description": "Index of the last instruction.",
                    "type": "integer",
                    "readOnly": true
                },
                "groupLengthInMeters": {
                    "description": "Length of the group.",
                    "type": "integer",
                    "readOnly": true
                },
                "groupMessage": {
                    "description": "Summary message when human-readable text messages are requested for guidance (instructionType=text or tagged).",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "OptimizedWaypoint": {
            "description": "Optimized way point object.",
            "type": "object",
            "properties": {
                "providedIndex": {
                    "description": "Way point index provided by the user.",
                    "type": "integer",
                    "readOnly": true
                },
                "optimizedIndex": {
                    "description": "Optimized way point index from the system.",
                    "type": "integer",
                    "readOnly": true
                }
            }
        },
        "TimezoneByIdResult": {
            "description": "This object is returned from a successful Timezone By ID call",
            "type": "object",
            "properties": {
                "version": {
                    "description": "Version property",
                    "type": "string",
                    "readOnly": true
                },
                "referenceUtcTimestamp": {
                    "description": "Reference Utc Timestamp property",
                    "type": "string",
                    "readOnly": true,
                    "format": "date-time"
                },
                "timeZones": {
                    "$ref": "#/definitions/TimeZones"
                },
                "count": {
                    "description": "Count property",
                    "type": "number",
                    "readOnly": true
                }
            }
        },
        "TimezoneByCoordinatesResult": {
            "description": "This object is returned from a successful Timezone By Coordinates call",
            "type": "object",
            "properties": {
                "version": {
                    "description": "Version property",
                    "type": "string",
                    "readOnly": true
                },
                "referenceUtcTimestamp": {
                    "description": "Reference Utc Timestamp property",
                    "type": "string",
                    "readOnly": true,
                    "format": "date-time"
                },
                "timeZones": {
                    "$ref": "#/definitions/TimeZones"
                },
                "count": {
                    "description": "Count property",
                    "type": "number",
                    "readOnly": true
                }
            }
        },
        "TimezoneEnumWindowsResult": {
            "description": "This object is returned from a successful Timezone Enum Windows call",
            "type": "array",
            "items": {
                "$ref": "#/definitions/TimezoneEnumWindow"
            }
        },
        "TimezoneEnumWindow": {
            "type": "object",
            "properties": {
                "WindowsId": {
                    "description": "Windows Id property",
                    "type": "string",
                    "readOnly": true
                },
                "Territory": {
                    "description": "Territory property",
                    "type": "string",
                    "readOnly": true
                },
                "IanaIds": {
                    "description": "IanaIds array",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "readOnly": true
                    }
                }
            }
        },
        "TimezoneEnumIanaResult": {
            "description": "This object is returned from a successful Timezone Enum IANA call",
            "type": "array",
            "items": {
                "$ref": "#/definitions/IanaId"
            }
        },
        "TimezoneIanaVersionResult": {
            "description": "This object is returned from a successful Timezone IANA Version call",
            "type": "object",
            "properties": {
                "version": {
                    "description": "Version property",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "TimezoneWindowToIanaResult": {
            "description": "This object is returned from a successful Timezone Windows To IANA call",
            "type": "array",
            "items": {
                "$ref": "#/definitions/IanaId"
            }
        },
        "IanaId": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "Id property",
                    "type": "string",
                    "readOnly": true
                },
                "isAlias": {
                    "description": "IsAlias property",
                    "type": "boolean",
                    "readOnly": true
                },
                "aliasOf": {
                    "description": "AliasOf property",
                    "type": "string",
                    "readOnly": true
                },
                "hasZone1970Location": {
                    "description": "HasZone1970Location property",
                    "type": "boolean",
                    "readOnly": true
                }
            }
        },
        "TimeZones": {
            "description": "TimeZones array",
            "type": "array",
            "readOnly": true,
            "items": {
                "$ref": "#/definitions/Timezone"
            }
        },
        "Timezone": {
            "type": "object",
            "properties": {
                "Id": {
                    "description": "Id property",
                    "type": "string",
                    "readOnly": true
                },
                "Aliases": {
                    "description": "Aliases array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "type": "string",
                        "readOnly": true
                    }
                },
                "Countries": {
                    "description": "Countries array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/Country"
                    }
                },
                "Names": {
                    "type": "object",
                    "properties": {
                        "ISO6391LanguageCode": {
                            "description": "The ISO 639-1 language code of the Names",
                            "type": "string",
                            "readOnly": true
                        },
                        "Generic": {
                            "description": "Generic Name",
                            "type": "string",
                            "readOnly": true
                        },
                        "Standard": {
                            "description": "Standard Name",
                            "type": "string",
                            "readOnly": true
                        },
                        "Daylight": {
                            "description": "Daylight Name",
                            "type": "string",
                            "readOnly": true
                        }
                    }
                },
                "ReferenceTime": {
                    "description": "Reference Time object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "Tag": {
                            "description": "Tag property",
                            "type": "string",
                            "readOnly": true
                        },
                        "StandardOffset": {
                            "description": "Standard Offset property",
                            "type": "string",
                            "readOnly": true
                        },
                        "DaylightSavings": {
                            "description": "Daylight Savings property",
                            "type": "string",
                            "readOnly": true
                        },
                        "WallTime": {
                            "description": "Wall Time property",
                            "type": "string",
                            "readOnly": true
                        },
                        "PosixTimezoneValidYear": {
                            "description": "Posix Timezone Valid Year property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "PosixTimezone": {
                            "description": "Posix timezone property",
                            "type": "string",
                            "readOnly": true
                        }
                    }
                },
                "RepresentativePoint": {
                    "description": "Representative point property",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "Latitude": {
                            "description": "Latitude property",
                            "type": "number",
                            "readOnly": true
                        },
                        "Longitude": {
                            "description": "Longitude property",
                            "type": "number",
                            "readOnly": true
                        }
                    }
                },
                "TimeTransitions": {
                    "description": "TimeTransitions array",
                    "type": "array",
                    "readOnly": true,
                    "items": {
                        "$ref": "#/definitions/TimeTransition"
                    }
                }
            }
        },
        "Country": {
            "type": "object",
            "properties": {
                "Name": {
                    "description": "Country Name",
                    "type": "string",
                    "readOnly": true
                },
                "Code": {
                    "description": "Country Code",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "TimeTransition": {
            "type": "object",
            "readOnly": true,
            "properties": {
                "Tag": {
                    "description": "Tag property",
                    "type": "string",
                    "readOnly": true
                },
                "StandardOffset": {
                    "description": "StandardOffset property",
                    "type": "string",
                    "readOnly": true
                },
                "DaylightSavings": {
                    "description": "DaylightSavings property",
                    "type": "string",
                    "readOnly": true
                },
                "UtcStart": {
                    "description": "UtcStart property",
                    "type": "string",
                    "readOnly": true,
                    "format": "date-time"
                },
                "UtcEnd": {
                    "description": "UtcEnd property",
                    "type": "string",
                    "readOnly": true,
                    "format": "date-time"
                }
            }
        },
        "TrafficFlowTileResult": {
            "description": "This image is returned from a successful Traffic Flow Tile call",
            "type": "string",
            "format": "binary",
            "readOnly": true
        },
        "TrafficFlowSegmentResult": {
            "description": "This object is returned from a successful Traffic Flow Segment call",
            "type": "object",
            "properties": {
                "flowSegmentData": {
                    "description": "Flow Segment Data property",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "frc": {
                            "description": "FRC property",
                            "type": "string",
                            "readOnly": true
                        },
                        "currentSpeed": {
                            "description": "Current Speed property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "freeFlowSpeed": {
                            "description": "Free Flow Speed property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "currentTravelTime": {
                            "description": "Current Travel Time property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "freeFlowTravelTime": {
                            "description": "Free Flow Travel Time property",
                            "type": "integer",
                            "readOnly": true
                        },
                        "confidence": {
                            "description": "Confidence property",
                            "type": "number",
                            "readOnly": true
                        },
                        "coordinates": {
                            "description": "Coordinates of the result",
                            "type": "object",
                            "properties": {
                                "coordinate": {
                                    "description": "Coordinate array",
                                    "type": "array",
                                    "readOnly": true,
                                    "items": {
                                        "$ref": "#/definitions/Coordinate"
                                    }
                                }
                            }
                        },
                        "@version": {
                            "description": "@Version property",
                            "type": "string",
                            "readOnly": true
                        }
                    }
                }
            }
        },
        "Coordinate": {
            "type": "object",
            "properties": {
                "latitude": {
                    "description": "Latitude property",
                    "type": "number",
                    "readOnly": true
                },
                "longitude": {
                    "description": "Longitude property",
                    "type": "number",
                    "readOnly": true
                }
            }
        },
        "TrafficIncidentTileResult": {
            "description": "This object is returned from a successful Traffic Incident Tile call",
            "type": "object",
            "properties": {
                "image": {
                    "description": "Image property",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "TrafficIncidentDetailResult": {
            "description": "This object is returned from a successful Traffic incident Detail call",
            "type": "object",
            "properties": {
                "tm": {
                    "description": "Main response element",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "@id": {
                            "description": "ID of the traffic incident",
                            "type": "string",
                            "readOnly": true
                        },
                        "poi": {
                            "description": "A single traffic incident, or a cluster of traffic incidents",
                            "type": "array",
                            "readOnly": true,
                            "items": {
                                "$ref": "#/definitions/TrafficIncidentPoi"
                            }
                        }
                    }
                }
            }
        },
        "TrafficIncidentPoi": {
            "type": "object",
            "readOnly": true,
            "properties": {
                "id": {
                    "description": "ID of the traffic incident",
                    "type": "string",
                    "readOnly": true
                },
                "p": {
                    "description": "The point where an icon of the cluster or raw incident should be drawn, expressed in the requested projection. This is affected by traffic style, zoom level and road type",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "x": {
                            "description": "x coordinate",
                            "type": "number",
                            "readOnly": true
                        },
                        "y": {
                            "description": "y coordinate",
                            "type": "number",
                            "readOnly": true
                        }
                    }
                },
                "ic": {
                    "description": "The icon category associated with this incident. Values are numbers in the range 0-13, with the following meanings",
                    "type": "integer",
                    "readOnly": true
                },
                "ty": {
                    "description": "The magnitude of delay associated with incident. These values correspond to incident colors in the traffic tiles",
                    "type": "integer",
                    "readOnly": true
                },
                "cbl": {
                    "description": "Bottom left coordinate of the cluster in the projection of the request",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "x": {
                            "description": "x coordinate",
                            "type": "number",
                            "readOnly": true
                        },
                        "y": {
                            "description": "y coordinate",
                            "type": "number",
                            "readOnly": true
                        }
                    }
                },
                "ctr": {
                    "description": "Top right coordinate of the cluster in the projection of the request",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "x": {
                            "description": "x coordinate",
                            "type": "number",
                            "readOnly": true
                        },
                        "y": {
                            "description": "y coordinate",
                            "type": "number",
                            "readOnly": true
                        }
                    }
                },
                "cs": {
                    "description": "Cluster size: the number of incidents in the cluster",
                    "type": "integer",
                    "readOnly": true
                },
                "l": {
                    "description": "Length of the incident in meters",
                    "type": "integer",
                    "readOnly": true
                },
                "r": {
                    "description": "The road number(s) affected by the incident. Multiple road numbers will delimited by slashes",
                    "type": "string",
                    "readOnly": true
                },
                "dl": {
                    "description": "Delay caused by the incident in seconds (except in road closures)",
                    "type": "integer",
                    "readOnly": true
                },
                "t": {
                    "description": "To: the name of the intersection or location where the traffic due to the incident ends",
                    "type": "string",
                    "readOnly": true
                },
                "f": {
                    "description": "From: the name of the intersection or location where the traffic due to the incident starts",
                    "type": "string",
                    "readOnly": true
                },
                "d": {
                    "description": "Description of the incident in the language requested",
                    "type": "string",
                    "readOnly": true
                },
                "c": {
                    "description": "Cause of the incident, where available, in the language requested",
                    "type": "string",
                    "readOnly": true
                }
            }
        },
        "TrafficIncidentViewportResult": {
            "description": "This object is returned from a successful Traffic Incident Viewport call",
            "type": "object",
            "properties": {
                "viewpResp": {
                    "description": "Viewport Response object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                        "trafficState": {
                            "description": "Traffic State array",
                            "type": "object",
                            "readOnly": true,
                            "properties": {
                                "@trafficAge": {
                                    "description": "@Traffic Age property",
                                    "type": "integer",
                                    "readOnly": true
                                },
                                "@trafficModelId": {
                                    "description": "@Traffic Model Id property",
                                    "type": "string",
                                    "readOnly": true
                                }
                            }
                        },
                        "copyrightIds": {
                            "description": "Copyright Ids property",
                            "type": "string",
                            "readOnly": true
                        },
                        "@version": {
                            "description": "@Version property",
                            "type": "string",
                            "readOnly": true
                        },
                        "@maps": {
                            "description": "@maps property",
                            "type": "string",
                            "readOnly": true
                        }
                    }
                }
            }
        },
        "FeatureCollectionGeoJson": {
            "description": "A GeoJSON compliant FeatureCollection object",
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type property. Value should always be equal to - FeatureCollection",
                    "type": "string"
                },
                "features": {
                    "description": "Contains a list of GeoJSON compliant Feature objects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureGeoJson"
                    }
                }
            }
        },
        "FeatureGeoJson": {
            "description": "A GeoJSON compliant Feature object",
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type property. Value should always be equal to - Feature",
                    "type": "string"
                },
                "geometry": {
                    "$ref": "#/definitions/GeometryGeoJson"
                },
                "properties": {
                    "description": "Properties can contain addition metadata about the Feature. Value can be any JSON object or a JSON null value.",
                    "type": "object"
                }
            }
        },
        "GeometryGeoJson": {
            "description": "A GeoJSON compliant Geometry object",
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type property. This value must be one of the seven valid GeoJSON geometry types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon and GeometryCollection",
                    "type": "string"
                },
                "coordinates": {
                    "description": "Coordinates for the geometry object. Each Position object in Coordinates should be GeoJSON compliant i.e. longitude precedes latitute. Depending on the geometry this might be a 1d, 2d or a 3d array. Refer to RFC7946 for details.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LineStringGeoJson"
                    }
                }
            }
        },
        "LineStringGeoJson": {
            "description": "A GeoJSON compliant LineString Geometry object",
            "type": "object",
            "properties": {
                "type": {
                    "description": "Type property. This value must be equal to LineString.",
                    "type": "string"
                },
                "coordinates": {
                    "description": "Coordinates for the LineString object. Each Position object in Coordinates should be GeoJSON compliant i.e. longitude precedes latitute. Refer to RFC7946 for details.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/LineStringGeoJson"
                    }
                }
            }
        }
    }
}