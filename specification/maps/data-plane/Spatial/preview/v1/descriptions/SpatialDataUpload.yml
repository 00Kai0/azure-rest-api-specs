definitions:
  SpatialDataUploadDescription: >-
    
    ## Spatial Data Upload API

    This API allows the caller to upload spatial data content to the Azure Maps service. You can use this API in a scenario like uploading a collection of Geofences in `GeoJSON` format for use in our [Azure Maps Geofencing Service](https://docs.microsoft.com/en-us/rest/api/maps/). 

    ### Submit Batch Request

    To upload your content you will use a `POST` request where the request body will contain the spatial data to upload, the `dataFormat` query parameter will contain the format for the spatial data and the `Content-Type` header will be set to the content type of the data. For example, to upload a collection of geofences in `GeoJSON` format, set the request body to the geofence content, set the `dataFormat` query parameter to _geojson_ and set the `Content-Type` header to either one of the following media types: 
        
      - `application\json`
      - `application/vnd.geo+json`
      - `application/octet-stream`


    Here's a sample request body for uploading a simple Geofence represented as a circle geometry in `GeoJSON` using a center point and a radius:

    <br>

    ```json

    {
        "type": "FeatureCollection",
        "features": [{
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [-122.126986, 47.639754]
            },
            "properties": {
                "geometryId": "001",
                "radius": 500
            }
        }]
    }

    ```    
    
    <br>
    
    Please note that the Spatial Data Upload API is a long-running request. Here's a typical sequence of operations:

    1. Client sends a Search Data Upload `POST` request to Azure Maps

    2. The server will respond with one of the following:
     
        > HTTP `202 Accepted` - Upload request has been accepted.

        > HTTP `Error` - There was an error processing your Upload request. This could either be a `400 Bad Request` or any other `Error` status code.

    3. If the Upload request was accepted successfully, the `Location` header in the response contains the _status URI_ to check the current status of the long-running upload request. This status URI looks like the following:
    
    <br>
    
    ```

    https://atlas.microsoft.com/spatialData/{udid}/status?api-version=1.0&subscription-key={subscription-key}    

    ```

    <br>

    4. Client issues a `GET` request on the _status URI_ obtained in Step 3 above to check the current upload status.

    5. At this point, if the upload request is still being processed by Azure Maps, the client gets a HTTP `202 Accepted` response with the `Location` header set to the _status URI_ just like in Step 3 above.
    
    6. Client issues another `GET` request on the _status URI_ to check the current upload status.

    7. At this point, if the upload request processing is finished, the client receives one of the following responses:

        > HTTP `201 Created` - Upload was successful. Your content has been created. The `Location` header contains the URI to access the content in the future. The response body contains a unique data id (udid) for the content and looks like:

    ```json

    {
        "udid" : "d7e5efc8-2239-4387-a286-5bb51aa804e3.geojson"         
    }

    ```
 
        > HTTP `204 No Content` - Upload data processing failed. Your content was not created. The response body will contain a list of errors encountered while processing the upload data request.

    ```json

    {
        "error": {
          "code": "204 No Content",
          "message": "Upload data request failed. We encountered the following problems with your data:"
        }         
    }

    ```

    <br>
    
    ### Data Upload Limits

    Please, be aware that currently every Azure Maps account gets a free storage limit of 50 MB. This means that you can either upload 1 document of size 50 MB or 5 documents, each of size 10 MB or 100 documents, each of size 500 KB and so on. Once the free storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response. You can always use the Spatial Data Delete API to delete old/unused content and create space for new uploads.

    <br>